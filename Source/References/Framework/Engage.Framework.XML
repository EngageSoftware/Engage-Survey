<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Engage.Framework</name>
    </assembly>
    <members>
        <member name="T:Engage.AffectedObjectsContainer">
            <summary>
            Summary description for AffectedObjectsContainer.
            </summary>
        </member>
        <member name="T:Engage.IAffectedObjectsContainer">
            <summary>
            Summary description for IAffectedObjectsContainer.
            </summary>
        </member>
        <member name="T:Engage.Authentication.IMembershipUserContainer">
            <summary>
            This interface is the common reference type between Engage and ASPNET/DNN Membership users.
            </summary>
        </member>
        <member name="M:Engage.Entities.IEntity.IsSaveable">
            <summary>
            Is this <code>Entity</code> saveable to the database. At this level, is the object's state been changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.IEntity.IsValid">
            <summary>
            Is this <code>Entity</code>'s state valid. By default, it is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.IEntity.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.IEntity.ToString">
            <summary>
            Please tell me you don't have to actually do this.HK
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engage.Entities.IEntity.IsLoaded">
            <summary>
            Has this instance been loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.IEntity.IsDirty">
            <summary>
            Has the state of this instance changed since being loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.IEntity.IsNew">
            <summary>
            Is this instance a newly created object, not belonging to the database
            </summary>
        </member>
        <member name="T:Engage.Attributes.IAttributeContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Entities.IEntityContainer.AddAffiliation(Engage.Entities.IEntityContainer)">
            <summary>
            Affiliate child to this <code>EntityContainer</code>. The type is determined by the type of child.
            </summary>
            <param name="child">The <code>EntityContainer</code> instance to add</param>
        </member>
        <member name="T:Engage.Authentication.SecureContainer">
            <summary>
            This represents a Secure Container in the WinForms treeview application.
            </summary>
        </member>
        <member name="T:Engage.Entities.Composite">
            <summary>
            This object reprents a <code>EntityContainer</code> that supports children
            </summary>
        </member>
        <member name="T:Engage.Entities.EntityContainer">
            <summary>
            Summary description for EntityContainer.
            </summary>
        </member>
        <member name="M:Engage.Entities.Entity.#ctor">
            <summary>
            This constructor creates an empty <code>Entity</code> that is not yet part of the database. IE: Creating a new object.
            </summary>
        </member>
        <member name="M:Engage.Entities.Entity.IsSaveable">
            <summary>
            Is this <code>Entity</code> saveable to the database. At this level, is the object's state been changed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Entity.IsValid">
            <summary>
            Is this <code>Entity</code>'s state valid. By default, it is.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Entity.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.Entity.BeginLoad">
            <summary>
            Used primarily when loading an object from the db to prevent the object from being set to dirty
            </summary>
        </member>
        <member name="M:Engage.Entities.Entity.EndLoad">
            <summary>
            Used primarily when loading an object from the db is complete, to allow the dirty mechanism to function normally
            </summary>
        </member>
        <member name="P:Engage.Entities.Entity.IsLoaded">
            <summary>
            Has this instance been loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.Entity.IsDirty">
            <summary>
            Has the state of this instance changed since being loaded from the database
            </summary>
        </member>
        <member name="P:Engage.Entities.Entity.IsNew">
            <summary>
            Is this instance a newly created object, not belonging to the database
            </summary>
        </member>
        <member name="T:Engage.Entities.Entity.VersionManager">
            <summary>
            Version Manager inner class.
            </summary>
        </member>
        <member name="T:Engage.Util.IRequiresCleanup">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.EntityContainer.RemoveAffiliations(Engage.Entities.IEntityContainer)">
            <summary>
            Removes child 
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Engage.Entities.EntityContainer.RemoveAffiliations">
            <summary>
            Removes all children
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.RemoveAffiliations(Engage.Affiliations.EngageAffiliationType)">
            <summary>
            Removes all children of the specified type
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.GetParent(System.Int32)">
            <summary>
            This method is provided for situations where you don't know the parent's type but you do have
            a common AffiliationType for parents. 
            </summary>
            <remarks>Note: This method returns the first parent that is found for the specified type and does not
            recurse up.</remarks>
            <param name="affiliationTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.GetParents(Engage.Entities.EntityType)">
            <summary>
            Returns an IEntityContainer[] of parents of the given type of this object
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.LoadContainer(System.Int32)">
            <summary>
            Loads a <code>EntityContainer</code> from the database if not previously cached
            </summary>
            <param name="id">id of the <code>EntityContainer</code> to load</param>
            <returns>A loaded <code>EntityContainer</code></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.LoadContainer(System.Int32,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            
            Loads a <code>EntityContainer</code> from the database if not previously cached
            </summary>
            <param name="id">id of the <code>EntityContainer</code> to load</param>
            <param name="reload">should this objectID be reloaded from the database</param>
            <returns>A loaded <code>EntityContainer</code></returns>
            <value>value</value>
            <remarks>remarks</remarks>
            <param name="pending"></param>
            <param name="date"></param>
        </member>
        <member name="M:Engage.Entities.EntityContainer.IsSaveable">
            <summary>
            Is this <code>EntityContainer</code> saveable to the database. This is defined as all the 
            required attributes are valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.IsValid">
            <summary>
            Is this <code>EntityContainer</code>'s state valid. Defined as all attributes are valid and
            all ObjectRules are passed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EntityContainer.GetConsoleNode(Engage.Console.IConsoleNode)">
            <summary>
            Returns an IConsoleNode for every instance of this type. Providing this method in a subclass prevents
            defining via the database
            </summary>
            <returns></returns>
            <remarks>
            Returns an IConsoleNode for every instance of this type. Providing this method in a subclass prevents
            defining via the database
            </remarks>
            
        </member>
        <member name="M:Engage.Entities.EntityContainer.InitializeObject">
            <summary>
            Overridden by subclass to act as a 'constructor' called after the object
            is created/loaded from the db
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityContainer.CopyAttributeValues(Engage.Entities.EntityContainer,Engage.Entities.IEntityContainer)">
            <summary>
            copy all equally named attribute values from the source object to the destination object
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="P:Engage.Entities.EntityContainer.CollapsedIcon">
            <summary>
            Returns an index for every instance of this type. Providing this property in a subclass prevents
            defining via the database
            </summary>
        </member>
        <member name="P:Engage.Entities.EntityContainer.ExpandedIcon">
            <summary>
            Returns an index for every instance of this type. Providing this property in a subclass prevents
            defining via the database
            </summary>
        </member>
        <member name="M:Engage.Entities.Composite.Flush">
            <summary>
            This method is used to flush an existing Entity and reuse it.
            </summary>
            <remarks>This method has not been tested</remarks>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliations">
            <summary>
            Returns all the 'active' affiliations 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Composite.RemoveAffiliations">
            <summary>
            Removes all this <code>EntityContainer</code>'s <code>Affiliation</code>s
            </summary>
        </member>
        <member name="M:Engage.Entities.Composite.RemoveAffiliations(Engage.Affiliations.EngageAffiliationType)">
            <summary>
            Removes all the <code>Affiliation</code>s of the given type
            </summary>
        </member>
        <member name="M:Engage.Entities.Composite.RemoveAffiliations(Engage.Entities.IEntityContainer)">
            <summary>
            Removes this child from it's Affiliation
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Engage.Entities.Composite.HasChildren">
            <summary>
            Returns if this <code>EntityContainer</code> contains any child 'active' objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(Engage.Entities.EntityType,Engage.Entities.EntityType)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child types
            </summary>
            <param name="parentType">The parent object type</param>
            <param name="childType">The child object type</param>
            <returns>An <code>AffiliationDefinition</code> if found, otherwise throws an exception</returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(System.Int32,System.Int32)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child typeids
            </summary>
            <param name="parentTypeId">The object typeId of the parent object</param>
            <param name="childTypeId">The object typeId of the child object</param>
            <returns>An <code>AffiliationDefinition</code> if found, otherwise throws an exception</returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(Engage.Entities.EntityType,Engage.Entities.EntityType,System.Boolean)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child types
            </summary>
            <param name="parentType">The parent object type</param>
            <param name="childType">The child object type</param>
            <param name="throwError"><code>bool</code> indicating whether to throw an exception if a definition cannot be found</param>
            <returns>An <code>AffiliationDefinition</code> if found, null if not found, depending on the value of throwError</returns>
        </member>
        <member name="M:Engage.Entities.Composite.GetAffiliationDefinition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the <code>AffiliationDefinition</code> for the given parent and child typeids
            </summary>
            <param name="parentTypeId">The object typeId of the parent object</param>
            <param name="childTypeId">The object typeId of the child object</param>
            <param name="throwError"><code>bool</code> indicating whether to throw an exception if a definition cannot be found</param>
            <returns>An <code>AffiliationDefinition</code> if found, null if not found, depending on the value of throwError</returns>
        </member>
        <member name="T:Engage.Authentication.SecurityRole">
            <summary>
            This represents a Role in Engage (PartyRole) table.
            </summary>
        </member>
        <member name="T:Engage.Authentication.User">
            <summary>
            This object represents a User of the system which is a PartyUser and/or a ASPNET_USER row
            </summary>
        </member>
        <member name="M:Engage.Authentication.User.#ctor">
            <summary>
            Used only on web, no logged in user
            </summary>
        </member>
        <member name="T:Engage.Cache.CacheEntry">
            <summary>
            Summary description for CacheEntry.
            </summary>
        </member>
        <member name="T:Engage.Cache.DefaultCachingStrategy">
            <summary>
            This implementation provides default caching using a hashtable as the dictionary
            </summary>
        </member>
        <member name="T:Engage.Cache.ICachingStrategy">
            <summary>
            This interface is implemented by classes that provide caching.
            </summary>
        </member>
        <member name="T:Engage.Cache.HttpSessionCachingStrategy">
            <summary>
            This implementation provides caching using the web System.Web.Caching.Cache class
            </summary>
        </member>
        <member name="T:Engage.Cache.NullCache">
            <summary>
            This implementation provides no caching
            </summary>
        </member>
        <member name="T:Engage.Entities.INullEntity">
            <summary>
            This interface is implemented by objects that are null implementions of the 'real' objects
            It can then be used to test if this is a real or null implementation, in case some different
            behavior is required when the null object is encountered
            </summary>
        </member>
        <member name="T:Engage.Cache.WebCachingStrategy">
            <summary>
            This implementation provides caching using the web System.Web.Caching.Cache class
            </summary>
        </member>
        <member name="T:Engage.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:Engage.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:Engage.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:Engage.Annotations.AssertionConditionAttribute.#ctor(Engage.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:Engage.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:Engage.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:Engage.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:Engage.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:Engage.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:Engage.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:Engage.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:Engage.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:Engage.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:Engage.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:Engage.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseType">Specifies which types are required</param>
        </member>
        <member name="P:Engage.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:Engage.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:Engage.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:Engage.Annotations.PureAttribute">
            <summary>
            Indicates that method doesn't contain observable side effects.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
        </member>
        <member name="T:Engage.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. 
            If the parameter is delegate, indicates that delegate is executed while the method is executed.
            If the parameter is enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:Engage.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:Engage.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:Engage.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:Engage.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Engage.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:Engage.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="F:Engage.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:Engage.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:Engage.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Engage.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:Engage.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:Engage.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:Engage.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Engage.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:Engage.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:Engage.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:Engage.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:Engage.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:Engage.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Engage.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:Engage.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:Engage.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:Engage.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:Engage.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:Engage.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:Engage.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:Engage.Communication.Email.EmailEvent">
            <summary>
            This class represents the definition of an Email created by a user.
            </summary>
        </member>
        <member name="T:Engage.Routing.RoutingEvent">
            <summary>
            This class is provided so that it may be subclassed with a specific implementation such as 
            EmailEvent. 
            </summary>
        </member>
        <member name="M:Engage.Routing.RoutingEvent.IsApproved">
            <summary>
            This method inspects the Engage_Approval table to see if a) there are any approvals there if not
            the default is approved or true and b) if there are records loop through and inspect the approved
            flag for a false. If none found true is returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Communication.Email.EmailEvent.Load(System.Int32)">
            <exception cref="T:Engage.Data.DBException">If there's an error communicating with the database</exception>
        </member>
        <member name="T:Engage.Communication.Email.EmailTransaction">
            <summary>
            An outgoing email routing transaction.
            </summary>
        </member>
        <member name="T:Engage.RunnableServiceEvent">
            <summary>
            This class represents affectively, a row in Engage_RoutingTransaction that is runnable or needs an action taken.
            </summary>
        </member>
        <member name="F:Engage.RunnableServiceEvent.manager">
            <summary>
            Reference to the service who invoked this service event.
            </summary>
        </member>
        <member name="M:Engage.RunnableServiceEvent.#ctor(Engage.Routing.IServiceManager,Engage.RoutingTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.RunnableServiceEvent"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="t">The current routing transction.</param>
        </member>
        <member name="M:Engage.RunnableServiceEvent.GetRunnableServiceEvents(Engage.Routing.IServiceManager)">
            <summary>
            Gets all the runnable service events.
            </summary>
            <param name="manager">The manager.</param>
            <returns>A list of runnable services.</returns>
        </member>
        <member name="M:Engage.RunnableServiceEvent.GetRunnableServiceEvents(Engage.Routing.IServiceManager,System.Int32)">
            <summary>
            Gets the runnable service events for a given type.
            </summary>
            <param name="manager">The manager.</param>
            <param name="routingEventTypeId">The routing event type id.</param>
            <returns>A list of runnable services.</returns>
            <exception cref="T:Engage.Data.DBException">If there is an error communicating with the database</exception>
        </member>
        <member name="M:Engage.RunnableServiceEvent.Run(System.Int32)">
            <summary>
            Runs the specified revising user.
            </summary>
            <param name="revisingUser">The revising user.</param>
        </member>
        <member name="P:Engage.RunnableServiceEvent.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:Engage.RunnableServiceEvent.ServiceManager">
            <summary>
            Gets the service manager.
            </summary>
            <value>The service manager.</value>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.#ctor(Engage.Routing.IServiceManager,Engage.RoutingTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Communication.Email.EmailTransaction"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.IsUndeliverable(System.String)">
            <summary>
            Determines whether the specified email address is undeliverable.
            </summary>
            <param name="emailAddress">The email address.</param>
            <returns>
            	<c>true</c> if the specified email address is undeliverable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.GetEmailFooter">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.Dispose">
            <exception cref="T:Engage.Data.DBException">spInsertEmailEvent</exception>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.IsValidToSend">
            <summary>
            Determines whether [is valid to send].
            </summary>
            <returns>
            	<c>true</c> if [is valid to send]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.SendEmail">
            <summary>
            Sends the email.
            </summary>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.GetMessageBody">
            <summary>
            Gets the message body.
            </summary>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.UpdateText(System.String,System.String)">
            <summary>
            This method should be used to replace merge field values with the <paramref name="newText"/>
            This is useful so any concrete client implementations do not need to worry 
            about the underlying HTML and text body (and any other future implementations).
            </summary>
            <param name="oldText"></param>
            <param name="newText"></param>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.IsEmailUndeliverable(System.String)">
            <exception cref="T:Engage.Data.DBException">If an error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.GetLicenseString">
            <summary>
            Gets the license string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.LoadEmailLicense">
            <summary>
            Loads the email license.
            </summary>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.Email_BeforeSmtpSend(System.Object,aspNetEmail.BeforeSmtpSendEventArgs)">
            <summary>
            Handles the BeforeSmtpSend event of the Email control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:aspNetEmail.BeforeSmtpSendEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Engage.Communication.Email.EmailTransaction.Merge">
            <summary>
            Merges this instance.
            </summary>
        </member>
        <member name="P:Engage.Communication.Email.EmailTransaction.RevisingUser">
            <summary>
            Gets or sets the revising user.
            </summary>
            <value>The revising user.</value>
        </member>
        <member name="P:Engage.Communication.Email.EmailTransaction.MessageBody">
            <summary>
            Gets or sets the message body.
            </summary>
            <value>The message body.</value>
        </member>
        <member name="P:Engage.Communication.Email.EmailTransaction.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="P:Engage.Communication.Email.EmailTransaction.EventDate">
            <summary>
            Gets the event date.
            </summary>
            <value>The event date.</value>
        </member>
        <member name="T:Engage.Console.ConsoleNode">
            <summary>
            Summary description for ConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.IConsoleNode">
            <summary>
            Summary description for IConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.DebugTab">
            <summary>
            Summary description for DebugTab.
            </summary>
        </member>
        <member name="T:Engage.Console.PropertyTab">
            <summary>
            Summary description for PropertyTab.
            </summary>
        </member>
        <member name="F:Engage.Console.PropertyTab.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Engage.Console.PropertyTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Console.PropertyTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Engage.Console.DebugTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Console.DebugTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Engage.Console.DefaultConsoleNode">
            <summary>
            Summary description for DefaultConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.DragDataObject">
            <summary>
            Summary description for DragDataObject.
            </summary>
        </member>
        <member name="T:Engage.Console.IExplorerBarSnapIn">
            <summary>
            Summary description for IExplorerBarSnapin.
            </summary>
        </member>
        <member name="T:Engage.Console.IExplorerBarView">
            <summary>
            Summary description for IExplorerBarSnapin.
            </summary>
        </member>
        <member name="T:Engage.Console.IExplorerSnapIn">
            <summary>
            Summary description for IExplorerSnapin.
            </summary>
        </member>
        <member name="T:Engage.Console.ISnapInView">
            <summary>
            Summary description for ISnapInView.
            </summary>
        </member>
        <member name="T:Engage.Console.NullConsoleNode">
            <summary>
            Summary description for NullConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Console.SnapIn">
            <summary>
            This is a base abstract class used for building new SnapIns. 
            </summary>
        </member>
        <member name="T:Engage.Data.Configuration.ProviderConfigurationHandler">
            <summary>
            Handles the transformation of a provider section in the configuration file into a <see cref="T:Engage.Data.Configuration.ProviderConfiguration"/> object.
            </summary>
        </member>
        <member name="M:Engage.Data.Configuration.ProviderConfigurationHandler.CreateProviderConfiguration(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Creates a provider configuration.
            </summary>
            <param name="section">The provider section from the configuration file.</param>
            <returns>The created provider configuration object.</returns>
        </member>
        <member name="M:Engage.Data.Configuration.ProviderConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:Engage.Data.DataProvider">
            <summary>
            Provides access to an implementation-specific sub-class of <see cref="T:Engage.Data.DataProvider"/> (always <see cref="T:Engage.Data.SqlDataProvider"/> currently).
            </summary>
        </member>
        <member name="F:Engage.Data.DataProvider.instance">
            <summary>
            The current instance of this <see cref="T:Engage.Data.DataProvider"/>.
            </summary>
        </member>
        <member name="P:Engage.Data.DataProvider.Instance">
            <summary>
            Gets the current instance of this <see cref="T:Engage.Data.DataProvider"/>.
            </summary>
            <value>The current instance of <see cref="T:Engage.Data.DataProvider"/>.</value>
        </member>
        <member name="T:Engage.Data.DBException">
            <summary>
            An exception to be thrown on behalf of the data source.
            </summary>
        </member>
        <member name="T:Engage.Data.SqlDataProvider">
            <summary>
            Concrete implementation of <see cref="T:Engage.Data.IDataProvider"/> for SQL Server 2000+.
            </summary>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Data.SqlDataProvider"/> class.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">[SiteSqlServer] key not found in config file</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Application is a web site but configuration file (web.config) cannot be found</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.GetPrimaryKeyColumn(System.String)">
            <exception cref="T:Engage.Data.DBException">if there is an error retrieving the primary key column from the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.CommitTransaction">
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.RollbackTransaction">
            <exception cref="T:System.NotImplementedException"/>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObject(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateObject(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">rows affected == 0</exception>
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectAttribute(System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateObjectAttribute(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateObjectType(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <exception cref="T:Engage.Data.DBException">Could not update entity type</exception>
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertBinaryAttribute(System.Int32,System.Int32,System.Byte[],System.String,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectAffiliation(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectAffiliation(System.Int32,System.Collections.IDictionary,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteAffiliationDefinition(System.Int32)">
            <exception cref="T:Engage.Data.DBException">Unable to update EntityAffiliationDefinition</exception>
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteObjectAffiliation(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteObjectAffiliation(System.Int32,System.Collections.IDictionary,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.HasEntityPlayedRole(System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.GetVersionNumber(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertLargeTextAttribute(System.Int32,System.Int32,System.String,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.UpdateLargeTextAttribute(System.Int32,System.String,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.DeleteLargeTextAttribute(System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.InsertObjectVirtualRoot(System.Int32,System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.IsVirtualRoot(System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.GetVirtualRootId(System.Int32)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="M:Engage.Data.SqlDataProvider.FillDataTable(System.String,System.Data.DataTable)">
            <exception cref="T:Engage.Data.DBException">An error occurs while communicating with the database</exception>
        </member>
        <member name="T:Engage.Entities.Affiliation">
            <summary>
            This object represents a relationship between two <code>DbObjectContainers</code>.
            It contains the 'other' <code>EntityContainer</code> and the <code>AffiliationType</code>
            </summary>
        </member>
        <member name="M:Engage.Entities.Affiliation.#ctor(Engage.Entities.AffiliationDefinition,System.Int32,Engage.Entities.IEntityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Entities.Affiliation"/> class.
            </summary>
            <param name="ad">The ad.</param>
            <param name="parentId">The parent id.</param>
            <param name="child">The child.</param>
        </member>
        <member name="T:Engage.Entities.AffiliationDefinition">
            <summary>
            Summary description for AffiliationDefinition.
            </summary>
            
        </member>
        <member name="T:Engage.Affiliations.AffiliationManager">
            <summary>
            Summary description for AffiliationManager.
            </summary>
        </member>
        <member name="T:Engage.Entities.EngageDbUtil">
            <summary>
            Summary description for EngageDbUtil.
            </summary>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.IsObjectTypeRole(System.Int32)">
            <summary>
            Determines if the given objectTypeID is a Role
            </summary>
            <param name="objectTypeID">The objectTypeID to search</param>
            <returns>A <code>bool</code> indicating if the objectTypeID represents a Role</returns>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.InsertAttribute(System.Int32,System.String)">
            <summary>
            Inserts a new row into lkpAttribute
            </summary>
            <param name="typeID">AttributeTypeID, foreign key from lkpAttributeType</param>
            <param name="sDesc">sDesc, must be unique value in this table</param>
            <returns>The AttributeID of the new row</returns>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.GetItems(System.String,System.String[])">
            <summary>
            I added this to allow you to get lookup items from any table in order to
            use this you must pass in the columns in the following order:
            1. IdentityColumn
            2. ShortDescription
            3. LongDescription
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Entities.EngageDbUtil.AttributeDefinitionExists(System.Int32,System.Int32)">
            <summary>
            This method returns an Lookup array of all classes that are type Proxy.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Entities.NoRecordsFoundException">
            <summary>
            Summary description for NoRecordsFoundException.
            </summary>
        </member>
        <member name="M:Engage.Attributes.EntityAttribute.SetAttributeValue(System.String)">
            <summary>
            This method is used internally to set the value of this <code>EntityAttribute</code>
            without triggering the notifications. Used primarily when loading this object
            from the database 'mbLoading'
            </summary>
            <param name="s">The value to set</param>
        </member>
        <member name="M:Engage.Attributes.EntityAttribute.SetSearchable(System.Boolean)">
            <summary>
            This method is used to set if this <code>EntityAttribute</code> should be displayed in the 
            Engage.Db.<code>DataFinder/DataFindViewer</code> object(s).
            Used internally when this <code>EntityAttribute</code> is constructed
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Engage.Attributes.EntityAttribute.Searchable">
            <summary>
            This method is used to determine if this EntityAttribute should be displayed in the 
            etg DataFinder/DataFindViewer object(s) as a searchable attribute
            </summary>
        </member>
        <member name="T:Engage.Entities.EntityInUseException">
            <summary>
            Summary description for EntityInUseException.
            </summary>
        </member>
        <member name="M:Engage.Entities.EntityNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Engage.Definitions.AttributeDefinitionArg.#ctor(System.String,System.String,System.Int32)">
            <summary>
            The defaults are: AttributeTypeID = AttributeType.entity.GetId() and DefinitionRequirement = DefinitionRequirement.Required.GetId()
            the ClassId is either DefaultEntityAttribute or LookupAttribute based on whether the LookupTypeId > 1.
            </summary>
            <param name="shortdescription"></param>
            <param name="defaultValue"></param>
            <param name="lookupTypeId"></param>
        </member>
        <member name="T:Engage.Definitions.EntityDefinition">
            <summary>
            Summary description for EntityDefinition.
            </summary>
        </member>
        <member name="T:Engage.Definitions.IEntityDefinition">
            <summary>
            Summary description for IEntityDefinition.
            </summary>
        </member>
        <member name="M:Engage.Definitions.IEntityDefinition.Copy(Engage.Definitions.CopyDepth)">
            <summary>
            Create a copy of the instance of this class.
            </summary>
            <param name="depth">Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</param>
            <returns></returns>
            <remarks>Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</remarks>
        </member>
        <member name="M:Engage.Definitions.IEntityDefinition.CreateDefaultAttributes">
            <summary>
            Use this method to automatically create all the default attributes for this objecttype.
            </summary>
        </member>
        <member name="T:Engage.Definitions.IAttributeDefinitionContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Definitions.EntityDefinition.Copy(Engage.Definitions.CopyDepth)">
            <summary>
            Create a copy of the instance of this class.
            </summary>
            <param name="depth">Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</param>
            <returns></returns>
            <remarks>Shallow copy only creates a real copy of this instance of the class and contains references
            to any attributes and child objects. Deep copy creates copies of the instance, all attributes and child objects.</remarks>
        </member>
        <member name="M:Engage.Definitions.EntityDefinition.CopyDefinitionOnly">
            <summary>
            This method creates a new definition based on an this one without attributes.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engage.Definitions.EntityDefinition.ExpandedIcon">
            <summary>
            Returns an index for every instance of this type. Providing this property in a subclass prevents
            defining via the database
            </summary>
        </member>
        <member name="P:Engage.Definitions.EntityDefinition.IsNew">
            <summary>
            Is this instance a newly created object, not belonging to the database
            </summary>
        </member>
        <member name="T:Engage.Definitions.DefinitionAffiliation">
            <summary>
            This object represents a relationship between two <code>DbObjectDefintions</code>.
            It contains the 'other' <code>EntityContainer</code> and the <code>AffiliationType</code>
            </summary>
        </member>
        <member name="T:Engage.Definitions.DefinitionConsoleNode">
            <summary>
            Summary description for DefinitionConsoleNode.
            </summary>
        </member>
        <member name="T:Engage.Definitions.IDefinitionConsoleNode">
            <summary>
            Summary description for IDefinitionConsoleNode.
            </summary>
        </member>
        <member name="M:Engage.Definitions.EntityAttributeDefinition.SetAttributeValue(System.String)">
            <summary>
            This method is used internally to set the value of this <code>EntityAttribute</code>
            without triggering the notifications. Used primarily when loading this object
            from the database 'mbLoading'
            </summary>
            <param name="s">The value to set</param>
        </member>
        <member name="M:Engage.Definitions.EntityAttributeDefinition.SetSearchable(System.Boolean)">
            <summary>
            This method is used to set if this <code>EntityAttribute</code> should be displayed in the 
            Engage.Db.<code>DataFinder/DataFindViewer</code> object(s).
            Used internally when this <code>EntityAttribute</code> is constructed
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Engage.Definitions.EntityAttributeDefinition.Searchable">
            <summary>
            This method is used to determine if this EntityAttribute should be displayed in the 
            etg DataFinder/DataFindViewer object(s) as a searchable attribute
            </summary>
        </member>
        <member name="T:Engage.Framework">
            <summary>
            Summary description for Framework.
            </summary>
        </member>
        <member name="M:Engage.Framework.InitStorage">
            <summary>
            Initialize the Framework's caching mechanism not to cache
            call in global.asax Application_Start
            </summary>
        </member>
        <member name="M:Engage.Framework.InitStorage(System.Web.HttpContext,Engage.Util.EngageSessionBase)">
            <summary>
            Initialize the Framework's caching mechanizm for 'web' operation, ie:Browser front end, web site
            All caches are located in each user HttpSession
            call in global.asax Application_Start
            </summary>
            <param name="context"></param>
            <param name="sessionBase"></param>
        </member>
        <member name="M:Engage.Framework.CleanupStorage">
            <summary>
            Cleanup methods, normally called by Garbage collector threads
            </summary>
        </member>
        <member name="M:Engage.Framework.ClearCaches">
            <summary>
            Clears all caches within the Framework
            </summary>
        </member>
        <member name="M:Engage.Framework.Init(Engage.Util.EngageSessionBase)">
            <summary>
            Initialize the Framework for 'normal' operation, ie:Windows client front end
            call in the Main of the application
            </summary>
            <param name="sessionBase"></param>
        </member>
        <member name="M:Engage.Framework.Init(System.Web.SessionState.HttpSessionState,Engage.Util.EngageSessionBase)">
            <summary>
            Initialize the Framework for 'web' operation, ie:Browser front end, web site
            call in global.asax Session_Start
            UserStorage located in HttpSessionState 
            </summary>
            <param name="httpSession"></param>
            <param name="engageSessionBase"></param>
        </member>
        <member name="M:Engage.Framework.SaveObjects">
            <summary>
            For saving and individual object
            </summary>
        </member>
        <member name="T:Engage.FrameworkDataContext">
            <summary>
             Framwework Data Context
            </summary>
        </member>
        <member name="M:Engage.FrameworkDataContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.FrameworkDataContext"/> class.
            </summary>
        </member>
        <member name="P:Engage.FrameworkDataContext.Instance">
            <summary>
            Gets an instance of the <see cref="T:System.Data.Linq.DataContext"/>.
            </summary>
            <value>The <see cref="T:System.Data.Linq.DataContext"/> instance.</value>
        </member>
        <member name="T:Engage.LookupType">
            <summary>
            Summary description for LookupType.
            </summary>
        </member>
        <member name="M:Engage.Util.EngageType.#ctor(System.String,System.String)">
            <summary>
            Used to initialize a 'group' of <code>EngageType</code> subclass objects
            </summary>
            <param name="desc"></param>
            <param name="tableName">The name of the table from where these type will originate</param>
        </member>
        <member name="M:Engage.Util.EngageType.#ctor(System.Int32,System.String)">
            <summary>
            Used to initialize an instance of the given <code>EngageType</code>
            </summary>
            <param name="id">Primary key of this object</param>
            <param name="desc">ShortDescription of this object</param>
        </member>
        <member name="M:Engage.Util.EngageType.#ctor(System.String,System.String,System.String)">
            <summary>
            Used to initialize an instance of the given <code>EngageType</code>
            This constructor is used for initializing values from Lookup by
            specifying a LookupType
            </summary>
            <param name="desc">The desc.</param>
            <param name="tableName">Name of the table.</param>
            <param name="lookupType">Type of the lookup.</param>
        </member>
        <member name="M:Engage.LookupType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.LookupType"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="T:Engage.RoutingTransaction">
            <summary>
            This class represents a row in Engage_RoutingTransaction and can be extended to provide custom implementations
            such as EmailRoutingTransaction to do specific tasks.
            </summary>
        </member>
        <member name="M:Engage.RoutingTransaction.InsertRoutingTransactionDetail(System.Int32,System.Boolean,System.String,System.Int32)">
            <summary>
            Inserts the routing transaction detail.
            </summary>
            <param name="routingTransactionId">The routing transaction id.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="description">The description.</param>
            <param name="id">The created by.</param>
        </member>
        <member name="M:Engage.RoutingTransaction.CompleteTransaction(System.Int32)">
            <summary>
            Completes the transaction.
            </summary>
            <param name="revisingUser">The revising user.</param>
        </member>
        <member name="M:Engage.RoutingTransaction.CompleteTransaction(System.String,System.Boolean,System.Int32)">
            <summary>
            Completes the transaction.
            </summary>
            <param name="description">The description.</param>
            <param name="success">if set to <c>true</c> [success].</param>
            <param name="revisingUser">The created by Id.</param>
        </member>
        <member name="M:Engage.RoutingTransaction.DeleteTransactionDetails">
            <summary>
            Deletes the transaction details.
            </summary>
        </member>
        <member name="P:Engage.RoutingTransaction.AdditionalData">
            <summary>
            Gets or sets any additional data into a template.
            </summary>
            <value>The template.</value>
        </member>
        <member name="T:Engage.Geometry.Vector3f">
            <summary>A general-purpose 3-dimensional vector with floating point components.</summary>
        </member>
        <member name="M:Engage.Geometry.Vector3f.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Geometry.Vector3f"/> class.</summary>
        </member>
        <member name="M:Engage.Geometry.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Geometry.Vector3f"/> class.</summary>
            <param name="x">The initial X component.</param>
            <param name="y">The initial Y component.</param>
            <param name="z">The initial Z component.</param>
        </member>
        <member name="M:Engage.Geometry.Vector3f.op_Addition(Engage.Geometry.Vector3f,Engage.Geometry.Vector3f)">
            <summary>The binary add operator.</summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>The vector sum of the two operands.</returns>
        </member>
        <member name="M:Engage.Geometry.Vector3f.op_Subtraction(Engage.Geometry.Vector3f,Engage.Geometry.Vector3f)">
            <summary>The binary difference operator.</summary>
            <param name="a">The first operand.</param>
            <param name="b">The second operand.</param>
            <returns>The vector difference of the two operands.</returns>
        </member>
        <member name="M:Engage.Geometry.Vector3f.GetHashCode">
            <summary>Get the hash code for this object.</summary>
            <returns>An <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Engage.Geometry.Vector3f.Equals(Engage.Geometry.Vector3f)">
            <summary>The equality operator.</summary>
            <param name="other">The vector to compare <c>this</c> to.</param>
            <returns><c>true</c> if <c>this</c> is equivalent to <paramref name="other"/>.</returns>
        </member>
        <member name="P:Engage.Geometry.Vector3f.X">
            <summary>Gets or sets the X component.</summary>
        </member>
        <member name="P:Engage.Geometry.Vector3f.Y">
            <summary>Gets or sets the Y component.</summary>
        </member>
        <member name="P:Engage.Geometry.Vector3f.Z">
            <summary>Gets or sets the Z component.</summary>
        </member>
        <member name="P:Engage.Geometry.Vector3f.MagnitudeSquared">
            <summary>Gets the magnitude squared.</summary>
        </member>
        <member name="P:Engage.Geometry.Vector3f.Magnitude">
            <summary>Gets the magnitude.</summary>
        </member>
        <member name="P:Engage.Geometry.Vector3f.RectilinearMagnitude">
            <summary>Gets the Manhattan/rectilinear magnitude.</summary>
        </member>
        <member name="T:Engage.Imaging.BitmapExtensions">
            <summary>Extension methods on <see cref="T:System.Drawing.Bitmap"/></summary>
        </member>
        <member name="F:Engage.Imaging.BitmapExtensions.BitmapDataOffsetOffset">
            <summary>
            At this absolute offset (# of bytes) into a bitmap file,
            expect to find a 4-byte value which gives
            the absolute offset to the first byte of raw pixel data.
            </summary>
        </member>
        <member name="M:Engage.Imaging.BitmapExtensions.GetPixels(System.Drawing.Bitmap)">
            <summary>Read all raw pixel values from this <see cref="T:System.Drawing.Bitmap"/> image.</summary>
            <param name="image">The image.</param>
            <returns>A sequence of <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</returns>
        </member>
        <member name="M:Engage.Imaging.BitmapExtensions.GetHistogram(System.Drawing.Bitmap,System.Single)">
            <summary>Get a histogram of all colors in the image.</summary>
            <param name="image">The image.</param>
            <param name="minimumAlpha">
            A pixel must have at least this opaqueness to be included.
            Value is in [0,1], 0 being fully transparent.
            </param>
            <returns>The <see cref="T:Engage.Imaging.ColorHistogram"/>.</returns>
        </member>
        <member name="T:Engage.Imaging.ColorHistogram">
            <summary>A general histogram of color values.</summary>
        </member>
        <member name="F:Engage.Imaging.ColorHistogram.colorTallies">
            <summary>A mapping of color value to number of occurrences or frequency.</summary>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Imaging.ColorHistogram"/> class.</summary>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.#ctor(System.Collections.Generic.IEnumerable{Engage.Imaging.SimpleRGBAColor})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Imaging.ColorHistogram"/> class.</summary>
            <param name="colors">The data with which to populate this histogram.</param>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.#ctor(Engage.Imaging.ColorHistogram)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Imaging.ColorHistogram"/> class.</summary>
            <param name="source">An existing histogram to copy values from.</param>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.#ctor(System.Collections.Generic.IEnumerable{Engage.Pair{Engage.Imaging.SimpleRGBAColor,System.Int32}})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Imaging.ColorHistogram"/> class.</summary>
            <param name="colorTallies">The existing color-tally values to use.</param>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.PushColor(Engage.Imaging.SimpleRGBAColor)">
            <summary>Increment the quantity of a given color.</summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.GetCount(Engage.Imaging.SimpleRGBAColor)">
            <summary>Get the quantity of a certain color.</summary>
            <param name="color">The color.</param>
            <returns>The quantity as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.Collapse(System.Int32)">
            <summary>
            Reduce this set of colors to a certain maximum size by
            finding similar colors and dropping the least common ones.
            </summary>
            <param name="count">The maximum number of colors to keep.</param>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.Pruned(System.Int32)">
            <summary>
            Create a new histogram which is a subset of this one.
            Keep only the most common colors.
            </summary>
            <param name="count">The maximum number of colors in the new histogram.</param>
            <returns>A new <see cref="T:Engage.Imaging.ColorHistogram"/>.</returns>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.PrunedWithDiversity(System.Int32)">
            <summary>
            Create a new histogram which is a subset of this one. Rather than take strictly the
            most common colors, maintain some diversity of the color set.
            </summary>
            <param name="count">The maximum number of colors in the new histogram.</param>
            <returns>A new <see cref="T:Engage.Imaging.ColorHistogram"/>.</returns>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.GetColorsDescending">
            <summary>Get all colors in the histogram in order from most well-represented to most rare.</summary>
            <returns>An ordered sequence of <see cref="T:Engage.Imaging.SimpleRGBAColor"/></returns>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.PruneToMaximums(System.Int32)">
            <summary>Remove the least common color values; keep only a certain number of the most common distinct values.</summary>
            <param name="count">The number of distinct colors to maintain in the collection.</param>
        </member>
        <member name="M:Engage.Imaging.ColorHistogram.Transpose">
            <summary>
            Flip the key-value relationship of the histogram data,
            producing for each distinct quantity of pixels a list
            of the colors which appear that number of times.
            </summary>
            <returns>A set of lists of <see cref="T:Engage.Imaging.SimpleRGBAColor"/> ordered by length.</returns>
        </member>
        <member name="P:Engage.Imaging.ColorHistogram.Colors">
            <summary>Gets all the distinct colors represented here.</summary>
        </member>
        <member name="P:Engage.Imaging.ColorHistogram.DistinctColorCount">
            <summary>Gets the number of distinct colors of any quantity.</summary>
        </member>
        <member name="P:Engage.Imaging.ColorHistogram.ColorCounts">
            <summary>Gets all colors and their quantities.</summary>
        </member>
        <member name="T:Engage.Imaging.SimpleRGBAColor">
            <summary>
            An immutable 32-bit RGBA color value.
            This class is a simple and _fast_ alternative to the .Net framework's
            own color class. Time efficiency is prioritized over
            extensive feature sets, and values which may or may not
            be used are calculated lazily wherever possible.
            </summary>
            <remarks>Note that the alpha value is ignored by many of this class's methods.</remarks>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.Root3Over2">
            <summary>The value square root of 3 divided by 2.</summary>
            <remarks>This is kept as a constant value to avoid (re)calculating square roots.</remarks>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.R">
            <summary>The red component.</summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.G">
            <summary>The green component.</summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.B">
            <summary>The blue component.</summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.A">
            <summary>The alpha (transparency) value.</summary>
            <remarks><c>0</c> = transparent, <c>0xff</c> = opaque</remarks>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.rgbHash">
            <summary>
            The pre-calculated value for <see cref="M:Engage.Imaging.SimpleRGBAColor.GetHashCode"/>.
            This value is in fact unique to each distinct RGB value.
            </summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.rgb332">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.AsRGB332"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.unitR">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.UnitRed"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.unitG">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.UnitGreen"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.unitB">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.UnitBlue"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.unitA">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.UnitAlpha"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.unitRGBmax">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.UnitRGBMaximum"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.unitRGBmin">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.UnitRGBMinimum"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.hsvalpha">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.HSVAlpha"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.hsvbeta">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.HSVBeta"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.hsvConeX">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.HSVConeX"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.hsvConeY">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.HSVConeY"/></summary>
        </member>
        <member name="F:Engage.Imaging.SimpleRGBAColor.hslBiconeCoord">
            <summary>Backing for <see cref="P:Engage.Imaging.SimpleRGBAColor.HSLBiconeCoordinate"/></summary>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.#ctor(System.Collections.Generic.IList{System.Byte})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Imaging.SimpleRGBAColor"/> class.</summary>
            <param name="bgra">A sequence of four bytes representing B, G, R, A in order.</param>
            <remarks>
            This pixel format is what is expected from
            a raw bitmap image file stream with the 32-bit ARGB format.
            </remarks>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.DistanceSquared(Engage.Imaging.SimpleRGBAColor,Engage.Imaging.SimpleRGBAColor)">
            <summary>Gets the Euclidean distance squared between two colors as 3-dimensional points.</summary>
            <param name="a">A <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <param name="b">Another <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <returns>The distance squared between the colors in rectangular RGB space.</returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.RectilinearDistance(Engage.Imaging.SimpleRGBAColor,Engage.Imaging.SimpleRGBAColor)">
            <summary>Calculate rectilinear distance between two colors as 3-dimensional points.</summary>
            <param name="a">A <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <param name="b">Another <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <returns>The sum of the differences of the three color component values.</returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.HSVConeDistanceSquared(Engage.Imaging.SimpleRGBAColor,Engage.Imaging.SimpleRGBAColor)">
            <summary>Calculate distance squared between two colors as they are positioned in the HSV cone.</summary>
            <param name="a">A <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <param name="b">Another <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <returns>
            The distance squared between the two colors in their proper places in
            the HSV cone within rectangular 3D space.
            </returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.HSLBiconeDistanceSquared(Engage.Imaging.SimpleRGBAColor,Engage.Imaging.SimpleRGBAColor)">
            <summary>Calculate distance squared between two colors as they are positioned in the HSL bicone.</summary>
            <param name="a">A <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <param name="b">Another <see cref="T:Engage.Imaging.SimpleRGBAColor"/>.</param>
            <returns>
            The distance squared between the two colors in their proper places in
            the HSL bicone within rectangular 3D space.
            </returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.GetHashCode">
            <summary>Get the hash code for this object.</summary>
            <returns>An <see cref="T:System.Int32"/> unique to this color (alpha excluded).</returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.Equals(Engage.Imaging.SimpleRGBAColor)">
            <summary>The equality operator.</summary>
            <param name="other">The color to compare <c>this</c> to.</param>
            <returns><c>true</c> if <c>this</c> is equivalent to <paramref name="other"/> (alpha excluded).</returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.ConvertToRGB332">
            <summary>Calculate the 8-bit reduced color value.</summary>
            <returns>This color value reduced to 3-3-2 bits.</returns>
        </member>
        <member name="M:Engage.Imaging.SimpleRGBAColor.GetHSLBiconeCoordinate">
            <summary>Calculate this color's HSL bicone rectangular coordinate.</summary>
            <returns>A <see cref="T:Engage.Geometry.Vector3f"/>.</returns>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HexCode">
            <summary>Gets the HTML hex code for this color (alpha excluded).</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.UnitRed">
            <summary>Gets the red value translated to the range [0,1].</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.UnitGreen">
            <summary>Gets the green value translated to the range [0,1].</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.UnitBlue">
            <summary>Gets the blue value translated to the range [0,1].</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.UnitAlpha">
            <summary>Gets the alpha value translated to the range [0,1].</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.UnitRGBMaximum">
            <summary>Gets the maximum value among the three component unit values.</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.UnitRGBMinimum">
            <summary>Gets the minimum value among the three component unit values.</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HSLBiconeCoordinate">
            <summary>Gets the rectangular space location of this color in the HSL bicone.</summary>
            <remarks>
            The RGB-HSL mapping used here produces a bicone such that:
                full-black and full-white appear at the two opposing points
                all fully-saturated colors appear around the circular edge
                height (black to white) = 0.5
                radius (grey to saturated) = sqrt(3)/2
            </remarks>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HSVConeX">
            <summary>Gets the x-coordinate of this color in rectangular 3D space within the HSV cone.</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HSVConeY">
            <summary>Gets the y-coordinate of this color in rectangular 3D space within the HSV cone.</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HSVConeZ">
            <summary>Gets the z-coordinate of this color in rectangular 3D space within the HSV cone.</summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.AsRGB332">
            <summary>
            Gets the color in RGB332 format.
            The 8 bits of the byte are 3 bits red, 3 bits green, and 2 bits blue concatenated.
            </summary>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HSVAlpha">
            <summary>Gets the HSV space conversion alpha factor.</summary>
            <remarks>
            For information on the alpha and beta factors and their meanings, refer to:
            http://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma May 2013
            </remarks>
        </member>
        <member name="P:Engage.Imaging.SimpleRGBAColor.HSVBeta">
            <summary>Gets the HSV space conversion beta factor.</summary>
        </member>
        <member name="T:Engage.Numeric.CompoundInterval`1">
            <summary>
            An efficiently searchable "set of intervals".
            Essentially this is like a single interval which may have any number of
            endpoints and thus multiple distinct regions of inclusion and exclusion.
            </summary>
            <remarks>
            This class is _not_ intended to aggregate many fully-defined simple intervals.
            It does _not_ provide methods for determining which simple interval(s) a query
            intersects; it can only report whether a query does or does not intersect _any_
            included region.
            </remarks>
            <typeparam name="T">The type of the interval endpoint values and query values.</typeparam>
        </member>
        <member name="F:Engage.Numeric.CompoundInterval`1.pointsSorted">
            <summary>The points of interest of this interval.</summary>
            <remarks>
            The number of items in this list will always be a multiple of two.
            The items in this list, in order, follow a strict lower-upper-lower-upper bound pattern.
            </remarks>
        </member>
        <member name="F:Engage.Numeric.CompoundInterval`1.tightBound">
            <summary>The smallest interval which includes all subintervals here.</summary>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.CompoundInterval`1"/> class.</summary>
            <remarks>
            A default/empty instance of this class includes no values (-infinity to infinity is excluded).
            </remarks>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.#ctor(Engage.Numeric.CompoundInterval{`0})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.CompoundInterval`1"/> class.</summary>
            <param name="source">The interval to copy.</param>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.CompoundInterval`1"/> class.</summary>
            <param name="points">The raw subinterval endpoints to use.</param>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.Merge(System.Collections.Generic.IEnumerable{Engage.Numeric.CompoundInterval{`0}})">
            <summary>Merge several intervals into a union.</summary>
            <param name="sources">The intervals to combine.</param>
            <returns>A new interval which covers all values covered by any in the set of sources.</returns>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.AnyOverlap(System.Collections.Generic.IEnumerable{Engage.Numeric.CompoundInterval{`0}})">
            <summary>Determine whether there is any overlap amongst a set of intervals.</summary>
            <param name="intervals">The intervals to test against each other.</param>
            <returns><c>true</c> if there is any overlap between any two intervals</returns>
            <remarks>
            For this method all endpoints are taken as open, in other words,
            overlaps of length zero are considered not overlapping.
            </remarks>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.Include(Engage.Numeric.Interval{`0})">
            <summary>Include a new range in the set.</summary>
            <param name="interval">The interval to include.</param>
            <remarks>
            This method is most efficient when including non-overlapping
            intervals greater than the current upper bound.
            </remarks>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.Contains(`0,System.Boolean)">
            <summary>Test whether a point is within any part of this interval.</summary>
            <param name="point">The point to test.</param>
            <param name="closed">Whether to consider subinterval endpoints closed.</param>
            <returns><c>true</c> if the point is contained by <c>this</c></returns>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.Overlaps(Engage.Numeric.Interval{`0})">
            <summary>Test for any overlap between this and a simple interval.</summary>
            <param name="interval">The interval to test.</param>
            <returns><c>true</c> if the given interval overlaps this one in any way.</returns>
            <remarks>
            For this method all endpoints are taken as open, in other words,
            overlaps of length zero are considered not overlapping.
            </remarks>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.Overlaps(Engage.Numeric.CompoundInterval{`0})">
            <summary>Test for any overlap between this and another compound interval.</summary>
            <param name="other">The other interval to test against.</param>
            <returns><c>true</c> if the given interval overlaps this one in any way.</returns>
            <remarks>
            For this method all endpoints are taken as open, in other words,
            overlaps of length zero are considered not overlapping.
            </remarks>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.GetSubintervals">
            <summary>Produce a minimal sequence of intervals covering all values this object covers.</summary>
            <returns>A sequence of intervals.</returns>
            <remarks>Note that these may or may not be identical to the intervals originally inserted here.</remarks>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.IncludeOverlappingInterval(Engage.Numeric.Interval{`0})">
            <summary>Update <c>this.pointsSorted</c>, if needed, to include a given interval.</summary>
            <param name="interval">
            The interval to include.
            This method assumes that at least one of this interval's
            endpoints is strictly inside the current tight bound.
            Also note, the tight bound is not updated here.
            </param>
        </member>
        <member name="P:Engage.Numeric.CompoundInterval`1.Any">
            <summary>Gets a value indicating whether any subintervals are defined.</summary>
        </member>
        <member name="P:Engage.Numeric.CompoundInterval`1.SubintervalCount">
            <summary>Gets the number of disjoint subintervals.</summary>
        </member>
        <member name="P:Engage.Numeric.CompoundInterval`1.SubintervalEndpoints">
            <summary>Gets the sequence of subinterval endpoints describing this interval.</summary>
        </member>
        <member name="P:Engage.Numeric.CompoundInterval`1.TightBoundEndpoints">
            <summary>Gets a sequence of two subinterval endpoints describing this interval's maximum extents.</summary>
        </member>
        <member name="T:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint">
            <summary>A class to assist in ordering a mixed collection of points.</summary>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint.#ctor(`0,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint"/> class.</summary>
            <param name="value">The value.</param>
            <param name="opening">If true, this point is a lower bound.</param>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint"/> class from being created.</summary>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint.CompareTo(Engage.Numeric.CompoundInterval{`0}.SubintervalEndpoint)">
            <summary>Compare this to another point.</summary>
            <param name="other">The other point.</param>
            <returns>Negative if other belongs after / is "greater than" this.</returns>
        </member>
        <member name="M:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint.HasDoubleOpening(System.Collections.Generic.List{Engage.Numeric.CompoundInterval{`0}.SubintervalEndpoint})">
            <summary>
            Examine a sequence of points in order and determine whether any
            subinterval opens within another.</summary>
            <param name="endpoints">The points to test.</param>
            <returns><c>true</c> if there is any redundant lower bound.</returns>
        </member>
        <member name="P:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint.Value">
            <summary>Gets the value / position of this point.</summary>
        </member>
        <member name="P:Engage.Numeric.CompoundInterval`1.SubintervalEndpoint.Opening">
            <summary>Gets a value indicating whether this is a lower bound.</summary>
        </member>
        <member name="T:Engage.Numeric.Interval`1">
            <summary>A simple numeric interval which can be tested against points and other intervals.</summary>
            <typeparam name="T">The type of the interval endpoint values and query values.</typeparam>
        </member>
        <member name="M:Engage.Numeric.Interval`1.#ctor(`0,`0)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.Interval`1"/> class.</summary>
            <param name="endpoint_a">One limit of the interval.</param>
            <param name="endpoint_b">The other limit of the interval.</param>
            <remarks>Order of arguments is irrelevant.</remarks>
        </member>
        <member name="M:Engage.Numeric.Interval`1.#ctor(Engage.Numeric.Interval{`0})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.Interval`1"/> class.</summary>
            <param name="source">The interval to copy.</param>
        </member>
        <member name="M:Engage.Numeric.Interval`1.ExtendToInclude(Engage.Numeric.Interval{`0})">
            <summary>Enlarge this interval if needed to include another interval completely.</summary>
            <param name="other">The other interval.</param>
        </member>
        <member name="M:Engage.Numeric.Interval`1.Contains(`0,System.Boolean,System.Boolean)">
            <summary>Determine whether a point is inside this interval.</summary>
            <param name="point">The point.</param>
            <param name="closedMin">If true, consider the minimum bound inside the interval.</param>
            <param name="closedMax">If true, consider the maximum bound inside the interval.</param>
            <returns><c>true</c> if the point is within this interval.</returns>
        </member>
        <member name="M:Engage.Numeric.Interval`1.Overlaps(Engage.Numeric.Interval{`0},System.Boolean)">
            <summary>Determine whether this interval overlaps another.</summary>
            <param name="other">The other interval.</param>
            <param name="closedEndpoints">
            If true, consider the cases of "touching" endpoints (overlap length = 0) to be overlapping.
            </param>
            <returns><c>true</c> if the two intervals overlap.</returns>
        </member>
        <member name="M:Engage.Numeric.Interval`1.Equals(Engage.Numeric.Interval{`0})">
            <summary>Test for equality with another interval.</summary>
            <param name="other">The interval to compare this to.</param>
            <returns><c>true</c> if <c>this</c> and <c>other</c> are identical.</returns>
        </member>
        <member name="P:Engage.Numeric.Interval`1.Minimum">
            <summary>Gets the minimum limit of the interval.</summary>
        </member>
        <member name="P:Engage.Numeric.Interval`1.Maximum">
            <summary>Gets the maximum limit of the interval.</summary>
        </member>
        <member name="P:Engage.Numeric.Interval`1.BoundsOrdered">
            <summary>Gets the minimum and maximum bounds as a sequence.</summary>
        </member>
        <member name="P:Engage.Numeric.Interval`1.IsDegenerate">
            <summary>Gets a value indicating whether this interval includes any range.</summary>
        </member>
        <member name="T:Engage.Numeric.RunLength">
            <summary>Take numerical values one at a time and track how many consecutive values are identical.</summary>
        </member>
        <member name="F:Engage.Numeric.RunLength.epsilon">
            <summary>maximum deviation from base value of current run</summary>
        </member>
        <member name="F:Engage.Numeric.RunLength.lastValue">
            <summary>base value of the current run</summary>
        </member>
        <member name="M:Engage.Numeric.RunLength.#ctor(System.Double)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.RunLength"/> class.</summary>
            <param name="epsilon">Maximum difference between two "identical" values.</param>
        </member>
        <member name="M:Engage.Numeric.RunLength.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.RunLength"/> class.</summary>
        </member>
        <member name="M:Engage.Numeric.RunLength.PushTest(System.Double)">
            <summary>Consider next value and determine run length.</summary>
            <param name="x">The value.</param>
            <returns>Number of consecutive values identical to x.</returns>
        </member>
        <member name="P:Engage.Numeric.RunLength.CurrentRun">
            <summary>Gets current run length.</summary>
        </member>
        <member name="T:Engage.Numeric.SampleStatistics">
            <summary>A collection of values and various statistical properties of them.</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.samples">
            <summary>the values</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.min">
            <summary>minimum value</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.max">
            <summary>maximum value</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.range">
            <summary>maximum - minimum</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.sum">
            <summary>sum of all values</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.sumabs">
            <summary>sum of absolute values</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.mean">
            <summary>mean over all values</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.variance">
            <summary>variance over all values</summary>
        </member>
        <member name="F:Engage.Numeric.SampleStatistics.stddev">
            <summary>standard deviation</summary>
        </member>
        <member name="M:Engage.Numeric.SampleStatistics.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.SampleStatistics"/> class.</summary>
        </member>
        <member name="M:Engage.Numeric.SampleStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.SampleStatistics"/> class.</summary>
            <param name="samples">initial population of doubles</param>
        </member>
        <member name="M:Engage.Numeric.SampleStatistics.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Numeric.SampleStatistics"/> class.</summary>
            <param name="samples">initial population of <c>int</c>s</param>
        </member>
        <member name="M:Engage.Numeric.SampleStatistics.Add(System.Double)">
            <summary>add a value</summary>
            <param name="value">the value</param>
        </member>
        <member name="M:Engage.Numeric.SampleStatistics.InvalidateAllStats">
            <summary>discard all stats</summary>
        </member>
        <member name="M:Engage.Numeric.SampleStatistics.InvalidateMeanStats">
            <summary>discard mean, variance, standard deviation</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.Min">
            <summary>Gets minimum.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.Max">
            <summary>Gets maximum.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.Range">
            <summary>Gets range.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.Sum">
            <summary>Gets sum.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.SumAbsolute">
            <summary>Gets sum of absolute values.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.Mean">
            <summary>Gets mean.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.Variance">
            <summary>Gets variance.</summary>
        </member>
        <member name="P:Engage.Numeric.SampleStatistics.StdDeviation">
            <summary>Gets standard deviation.</summary>
        </member>
        <member name="T:Engage.Configuration.RuntimeEnvironmentsSectionHandler">
            <summary>
            Summary description for RuntimeEnvironmentsSectionHandler.
            </summary>
        </member>
        <member name="T:Engage.Routing.IServiceManager">
            <summary>
            Interface implemented by Engage Service to access any service level information.
            </summary>
        </member>
        <member name="M:Engage.Routing.IServiceManager.SendEmail(System.String,System.String)">
            <summary>
            Sends the using information configured in the services app.config file.
            </summary>
            <param name="subject">The subject of the email message.</param>
            <param name="body">The body of the email message.</param>
        </member>
        <member name="M:Engage.Routing.IServiceManager.WriteMessage(System.String)">
            <summary>
            Provides a mechanism so that the caller can receive messages of importance and log it if desired.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Engage.Routing.RoutingEventType">
            <summary>
            Summary description for RoutingEventType.
            </summary>
        </member>
        <member name="T:Engage.Routing.RoutingManager">
            <summary>
            This class handles the processing of RoutingTransactions records. RunServiceEvents provides a way to run
            all Routing Event types or a specific type. Any unhandled exceptions are sent to alerts@engageemail.com
            for review.
            </summary>
        </member>
        <member name="M:Engage.Routing.RoutingManager.RunServiceEvents(Engage.Routing.IServiceManager,System.Int32,System.Int32)">
            <summary>
            Runs the service events.
            </summary>
            <param name="manager">The manager.</param>
            <param name="routingEventTypeId">The routing event type id.</param>
            <param name="revisingUser">The revising user.</param>
        </member>
        <member name="M:Engage.Routing.RoutingManager.RunServiceEvents(Engage.Routing.IServiceManager,System.Int32)">
            <summary>
            Runs the service events.
            </summary>
            <param name="manager">The manager.</param>
            <param name="revisingUser">The revising user.</param>
        </member>
        <member name="M:Engage.Routing.RoutingManager.RunServiceEvents(Engage.Routing.IServiceManager,Engage.Routing.RoutingEventType,System.Int32)">
            <summary>
            Runs the service events.
            </summary>
            <param name="manager">The manager.</param>
            <param name="type">The type.</param>
            <param name="revisingUser">The revising user.</param>
        </member>
        <member name="M:Engage.Routing.RoutingManager.RunEvents(System.Collections.Generic.IEnumerable{Engage.RunnableServiceEvent},System.Int32)">
            <summary>
            Runs the transactions.
            </summary>
            <param name="runnableServiceEvents">The transactions.</param>
            <param name="revisingUser">The revising user.</param>
        </member>
        <member name="M:Engage.Routing.RoutingManager.SendNotification(System.String)">
            <summary>
            Sends the notification.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="P:Engage.Routing.RoutingManager.Instance">
            <summary>
            Gets a singleton instance of the RoutingManager.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Engage.Routing.RoutingManager.MaxRoutingEventsPerCycle">
            <summary>
            Gets the max routing events per cycle.
            </summary>
            <value>The max routing events per cycle.</value>
        </member>
        <member name="T:Engage.Routing.RoutingTransactionDetail">
            <summary>
            This class represents a row in Engage_RoutingTransactionDetail with details about the transaction results.
            </summary>
        </member>
        <member name="T:Engage.WebServicesGateway.WebServiceGateway">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.#ctor">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.Execute(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.ExecuteAsync(System.Byte[])">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.ExecuteAsync(System.Byte[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Engage.WebServicesGateway.WebServiceGateway.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Engage.WebServicesGateway.WebServiceGateway.ExecuteCompleted">
            <remarks/>
        </member>
        <member name="T:Engage.WebServicesGateway.ExecuteCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Engage.WebServicesGateway.ExecuteCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Engage.WebServicesGateway.ExecuteCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Engage.Templating.Attribute">
            <summary>
            Represents a single attribute of a <see cref="T:Engage.Templating.Tag"/>.
            </summary>
        </member>
        <member name="M:Engage.Templating.Attribute.#ctor(Engage.Templating.Tag)">
            <summary>
            Initializes a new instance of the <b>Attribute</b> class
            with the specified <see cref="T:Engage.Templating.Tag"/> that the attribute belongs to.
            </summary>
            <param name="parent"><see cref="T:Engage.Templating.Tag"/> to which the newly created Attribute belongs to.</param>
        </member>
        <member name="M:Engage.Templating.Attribute.ItIsDataBound">
            <summary>
            Sets the <see cref="P:Engage.Templating.Attribute.DataBound"/> flag to true.
            </summary>
        </member>
        <member name="M:Engage.Templating.Attribute.ToString">
            <summary>
            Gets string representation of the attribute.
            </summary>
            <returns>Entire attribute text (<see cref="P:Engage.Templating.Attribute.Body"/>).</returns>
        </member>
        <member name="P:Engage.Templating.Attribute.Root">
            <summary>
            Gets the <see cref="T:Engage.Templating.Template"/> to which this attribute belongs.
            </summary>
            <value>
            The <see cref="T:Engage.Templating.Template"/> to which this attribute belongs.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Parent">
            <summary>
            Gets the <see cref="T:Engage.Templating.Tag"/> that the Atrribute belongs to.
            </summary>
            <value>
            The <see cref="T:Engage.Templating.Tag"/> that the Atrribute belongs to.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Body">
            <summary>
            Gets the entire body of the <b>Attribute</b>.
            </summary>
            <value>
            The entire body of the <b>Attribute</b>.
            For example, Body is <c>id="Label1"</c> for the attribute <c>id="Label1"</c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.BodyFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Attribute.Body"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing entire body of this tag (<see cref="P:Engage.Templating.Attribute.Body"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Key">
            <summary>
            Gets the key of the attribute.
            </summary>
            <value>
            The key of the attribute.
            For example, Key is <c>id</c> for the attribute <c>id="Label1"</c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.KeyFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Attribute.Key"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing key of this tag (<see cref="P:Engage.Templating.Attribute.Key"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.Value">
            <summary>
            Gets the value of the attribute.
            </summary>
            <value>
            The value of the attribute.
            For example, Value is <c>Label1</c> for the attribute <c>id="Label1"</c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.ValueFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Attribute.Value"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing value of this tag (<see cref="P:Engage.Templating.Attribute.Value"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Attribute.DataBound">
            <summary>
            Gets value indicating whether the attribute is databound.
            </summary>
            <value>
            <b>true</b> if the attribute is databound; otherwise, <b>false</b>.
            For example, DataBound is <c>true</c> for the attribute <c>Text='&lt;% this.ReturnText() %>'</c>.
            </value>
        </member>
        <member name="T:Engage.Templating.AttributeList">
            <summary>
            Represents a list of attributes that can be accessed by key or index.
            </summary>
        </member>
        <member name="M:Engage.Templating.AttributeList.#ctor">
            <summary>
            Initializes a new instance of the <b>AttributeList</b> class.
            The list is initialy empty.
            </summary>
        </member>
        <member name="M:Engage.Templating.AttributeList.GetEnumerator">
            <summary>
            Provides support for the "foreach" style iteration over the lis of attributes in the <b>AttributeList</b>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Engage.Templating.AttributeList.Append(Engage.Templating.Attribute)">
            <summary>
            Appends specified <see cref="T:Engage.Templating.Attribute"/> at the end of the list.
            </summary>
            <param name="attribute">The <see cref="T:Engage.Templating.Attribute"/> to append.</param>
        </member>
        <member name="P:Engage.Templating.AttributeList.Item(System.String)">
            <summary>
            Gets the attribute with the specified key.
            </summary>
            <param name="attributeKey">The key of the attribute.</param>
            <value>
            The <see cref="T:Engage.Templating.Attribute"/> with the specified key.
            </value>
        </member>
        <member name="P:Engage.Templating.AttributeList.Item(System.Int32)">
            <summary>
            Gets the attribute with the specified index.
            </summary>
            <param name="index">The index of the attribute.</param>
            <value>
            The <see cref="T:Engage.Templating.Attribute"/> with the specified index.
            </value>
        </member>
        <member name="P:Engage.Templating.AttributeList.Count">
            <summary>
            Gets the number of attributes in the list.
            </summary>
            <value>
            The number of attributes.
            </value>
        </member>
        <member name="T:Engage.Templating.DocumentFragment">
            <summary>
            Represents fragment of <see cref="T:Engage.Templating.Template"/> defined by index and length
            in the parent document.
            </summary>
        </member>
        <member name="M:Engage.Templating.DocumentFragment.#ctor(Engage.Templating.Template)">
            <summary>
            Initializes a new instance of the <b>DocumentFragment</b> class
            with the specified <see cref="T:Engage.Templating.Template"/> that the fragment belongs to.
            </summary>
            <param name="root"><see cref="T:Engage.Templating.Template"/> to which the newly created fragment belongs to.</param>
        </member>
        <member name="M:Engage.Templating.DocumentFragment.Set(System.Int32,System.Int32)">
            <summary>
            Defines index and length of the fragment in the <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <param name="index">Index at which the fragment occurs in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.</param>
            <param name="length">Length of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>Index must be greater or equal to zero</para> 
            <para>Index cannot exceed document length</para> or
            <para>Length must be greater or equal to zero</para> or
            <para>Index plus length cannot exceed document length</para>
            </exception>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Root">
            <summary>
            Gets the <see cref="T:Engage.Templating.Template"/> to which this fragment belongs.
            </summary>
            <value>
            The <see cref="T:Engage.Templating.Template"/> to which this fragment belongs.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Index">
            <summary>
            Gets index of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            Index of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Length">
            <summary>
            Gets length of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            Length of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.LineNo">
            <summary>
            Gets the line number of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            The line number of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.ColumnNo">
            <summary>
            Gets the column number of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </summary>
            <value>
            The line column of the fragment in <see cref="P:Engage.Templating.DocumentFragment.Root"/> document.
            </value>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Text">
            <summary>
            Gets the text of the fragment.
            </summary>
            <value>
            The text of the fragment.
            </value>
            <exception cref="T:System.InvalidOperationException">Index and length not defined.</exception>
        </member>
        <member name="P:Engage.Templating.DocumentFragment.Defined">
            <summary>
            Gets value indicating whether the fragment is defined.
            </summary>
            <value>
            <b>true</b> if the fragment is defined; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Engage.Templating.EngageTag">
            <summary>
            Represents a single Engage tag in a template document.
            </summary>
        </member>
        <member name="T:Engage.Templating.Tag">
            <summary>
            Represents a single tag in the ASPX document.
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.emptyTags">
            <summary>
            The list of tags which do not require closing tags
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.attributes">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Attributes"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.childTags">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.ChildTags"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.nameFragment">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.NameFragment"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.parent">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Parent"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.root">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Root"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.tagType">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.TagType"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.valueFragment">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.ValueFragment"/>
            </summary>
        </member>
        <member name="F:Engage.Templating.Tag.error">
            <summary>
            Backing field for <see cref="P:Engage.Templating.Tag.Error"/>
            </summary>
        </member>
        <member name="M:Engage.Templating.Tag.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Engage.Templating.Tag"/> class.
            </summary>
        </member>
        <member name="M:Engage.Templating.Tag.#ctor(Engage.Templating.Tag,Engage.Templating.TagType)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Templating.Tag"/> class
            with the specified parent and type.
            </summary>
            <param name="parent">Parent of the created tag.</param>
            <param name="type">Type of the created tag.</param>
        </member>
        <member name="M:Engage.Templating.Tag.HasAttribute(System.String)">
            <summary>
            Determines whether this tag has an attribute with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>
            <c>true</c> if this tag has an attribute with the specified <paramref name="name"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Templating.Tag.GetAttributeValue(System.String)">
            <summary>
            Gets the value of the attribute on this tag with the given <paramref name="name"/>.
            </summary>
            <param name="name">The attribute name.</param>
            <returns>The value of the attribute with the given <paramref name="name"/>, or <c>null</c> if an attribute with that name does not exist on this tag</returns>
        </member>
        <member name="M:Engage.Templating.Tag.ToString">
            <summary>
            Gets string representation of the tag.
            </summary>
            <returns>Entire tag text (<see cref="P:Engage.Templating.Tag.Value"/>).</returns>
        </member>
        <member name="M:Engage.Templating.Tag.SetError(Engage.Templating.TagError)">
            <summary>
            Sets error to the current tag.
            </summary>
            <param name="tagError">Error to set.</param>
        </member>
        <member name="P:Engage.Templating.Tag.Root">
            <summary>
            Gets the <see cref="T:Engage.Templating.Template"/> to which this tag belongs.
            </summary>
            <value>The <see cref="T:Engage.Templating.Template"/> to which this tag belongs.</value>
        </member>
        <member name="P:Engage.Templating.Tag.Parent">
            <summary>
            Gets the parent of this tag.
            </summary>
            <value>
            The <b>Tag</b> that is the parent of the current tag.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Prefix">
            <summary>
            Gets the namespace prefix of this tag.
            </summary>
            <value>
            The namespace prefix of this tag.
            For example, Prefix is <c>asp</c> for the tag <c>&lt;asp:label></c>.
            If there is no prefix, this property returns String.Empty.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.LocalName">
            <summary>
            Gets local name of the tag.
            </summary>
            <value>
            The name of the tag with the prefix removed.
            For example, LocalName is <c>label</c> for the tag <c>&lt;asp:label></c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Name">
            <summary>
            Gets the qualified name of the tag.
            </summary>
            <value>
            The qualified name of the tag.
            For example, Name is <c>asp:label</c> for the tag <c>&lt;asp:label></c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.NameFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Tag.Name"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing name of this tag (<see cref="P:Engage.Templating.Tag.Name"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Value">
            <summary>
            Gets the entire text of this tag.
            </summary>
            <value>
            Entire text of this tag.
            For example, Value is <c>&lt;asp:label id="Label1"></c> for the tag <c>&lt;asp:label id="Label1"></c>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.ValueFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Tag.Value"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing entire text of this tag (<see cref="P:Engage.Templating.Tag.Value"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Attributes">
            <summary>
            Gets an <see cref="T:Engage.Templating.AttributeList"/> containing the attributes of this tag.
            </summary>
            <value>
            An <see cref="T:Engage.Templating.AttributeList"/> containing the attributes of the tag.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.ChildTags">
            <summary>
            Gets all the child tags of the tag.
            </summary>
            <value>
            An <see cref="T:Engage.Templating.TagList"/> that contains all the child tags of the tag.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.HasChildTags">
            <summary>
            Gets a value indicating whether this tag has any child tags.
            </summary>
            <value>
            <b>true</b> if the tag has child tags; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.FirstChild">
            <summary>
            Gets the first child of the tag.
            </summary>
            <value>
            The first child of the tag.
            If there is no such tag, a null reference is returned.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.LastChild">
            <summary>
            Gets the last child of the tag.
            </summary>
            <value>
            The last child of the tag.
            If there is no such tag, a null reference is returned.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.TagType">
            <summary>
            Gets the type of the current tag.
            </summary>
            <value>
            One of the <see cref="P:Engage.Templating.Tag.TagType"/> values.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.Error">
            <summary>
            Gets the error of the current tag.
            </summary>
            <value>
            One of the <see cref="T:Engage.Templating.TagError"/> values.
            </value>
        </member>
        <member name="P:Engage.Templating.Tag.RequiresClosingTag">
            <summary>
            Gets a value indicating whether the tag requires to be closed with a close tag.
            </summary>
            <value>
            <b>true</b> if the tag requires to be closed; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Engage.Templating.TagError">
            <summary>
            Specifies error of <see cref="T:Engage.Templating.Tag"/>.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagError.None">
            <summary>
            Specified that there is no error.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagError.UnclosedOpenTag">
            <summary>
            The tag is not closed with a closing tag.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagError.UnopenedCloseTag">
            <summary>
            Close tag occurs without open tag.
            </summary>
        </member>
        <member name="T:Engage.Templating.TagList">
            <summary>
            Represents a list of tags that can be accessed by name or index.
            </summary>
        </member>
        <member name="M:Engage.Templating.TagList.#ctor">
            <summary>
            Initializes a new instance of the <b>TagList</b> class.
            The list is initialy empty.
            </summary>
        </member>
        <member name="M:Engage.Templating.TagList.GetEnumerator">
            <summary>
            Provides support for the "foreach" style iteration over the list of tags in the <b>TagList</b>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="M:Engage.Templating.TagList.Append(Engage.Templating.Tag)">
            <summary>
            Appends specified <see cref="T:Engage.Templating.Tag"/> at the end of the list.
            </summary>
            <param name="tag">The <see cref="T:Engage.Templating.Tag"/> to append.</param>
        </member>
        <member name="P:Engage.Templating.TagList.Item(System.String)">
            <summary>
            Gets the first tag with the specified qualified <see cref="P:Engage.Templating.Tag.Name"/>.
            </summary>
            <param name="name">The qualified name of the tag to retrieve.</param>
            <value>The first <see cref="T:Engage.Templating.Tag"/> that matches the specified name.</value>
        </member>
        <member name="P:Engage.Templating.TagList.Item(System.Int32)">
            <summary>
            Gets the tag with the specified index.
            </summary>
            <param name="index">The index of the tag.</param>
            <value>
            The <see cref="T:Engage.Templating.Tag"/> with the specified index.
            </value>
        </member>
        <member name="P:Engage.Templating.TagList.FirstTag">
            <summary>
            Gets the first <see cref="T:Engage.Templating.Tag"/> in the list.
            </summary>
            <value>
            The first <see cref="T:Engage.Templating.Tag"/> in the list.
            </value>
        </member>
        <member name="P:Engage.Templating.TagList.LastTag">
            <summary>
            Gets the last <see cref="T:Engage.Templating.Tag"/> in the list.
            </summary>
            <value>
            The last <see cref="T:Engage.Templating.Tag"/> in the list.
            </value>
        </member>
        <member name="P:Engage.Templating.TagList.Count">
            <summary>
            Gets the number of tags in the list.
            </summary>
            <value>
            The number of tags.
            </value>
        </member>
        <member name="T:Engage.Templating.TagType">
            <summary>
            Specifies the type of <see cref="T:Engage.Templating.Tag"/>.
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Root">
            <summary>
            A <see cref="T:Engage.Templating.Template"/> object that, as the root of the document tree,
            provides access to the entire Asp document. 
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Open">
            <summary>
            Open tag.
            <para>
            Example: &lt;asp:label id="Label1">
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Close">
            <summary>
            Close tag.
            <para>
            Example: &lt;/asp:label>
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Text">
            <summary>
            Text tag.
            <para>
            Example: &lt;title>TEXT&lt;/title> - the TEXT will occur as a Text tag
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Directive">
            <summary>
            Directive tag.
            <para>
            Example: &lt;%@ Page language= "c#" %>
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Code">
            <summary>
            Code tag.
            <para>
            Example: &lt;% this.DoSomething() %>
            </para>
            </summary>
        </member>
        <member name="F:Engage.Templating.TagType.Comment">
            <summary>
            Comment tag.
            <para>
            Example: &lt;!-- COMMENTED --> or &lt;%-- COMMENTED --%>
            </para>
            </summary>
        </member>
        <member name="T:Engage.Templating.Template">
            <summary>
            Represents an template document.
            </summary>
        </member>
        <member name="M:Engage.Templating.Template.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Engage.Templating.Template"/> class.
            </summary>
        </member>
        <member name="M:Engage.Templating.Template.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Templating.Template"/> class
            with the Aspx document content.
            </summary>
            <param name="docName">Name of the doc.</param>
            <param name="template">The Aspx document content that will be represented by the created <see cref="T:Engage.Templating.Template"/> object.</param>
        </member>
        <member name="P:Engage.Templating.Template.Root">
            <summary>
            Gets <see cref="T:Engage.Templating.Template"/> to which this tag belongs.
            </summary>
            <value>
            This property always returns this reference
            as the <b>Template Document</b> is always a root.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Parent">
            <summary>
            Gets the parent of this tag.
            </summary>
            <value>
            This property always returns a null reference
            as the <b>Document</b> is always a root.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Prefix">
            <summary>
            Gets the namespace prefix of this tag.
            </summary>
            <value>
            This property always returns an empty string (String.Empty)
            as the <b>Document</b> does not have a Prefix.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.LocalName">
            <summary>
            Gets the entire text of the ASP document.
            </summary>
            <value>
            The entire text of the ASP document.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Name">
            <summary>
            Gets the entire text of the ASP document.
            </summary>
            <value>
            The entire text of the ASP document.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.NameFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Template.Name"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing name of this tag (<see cref="P:Engage.Templating.Template.Name"/>).
            </value>
        </member>
        <member name="P:Engage.Templating.Template.Value">
            <summary>
            Gets entire text of the ASP document.
            </summary>
            <value>
            Entire text of this document.
            </value>
        </member>
        <member name="P:Engage.Templating.Template.ValueFragment">
            <summary>
            Gets <see cref="T:Engage.Templating.DocumentFragment"/> that
            represents <see cref="P:Engage.Templating.Template.Value"/> of this tag.
            </summary>
            <value>
            <see cref="T:Engage.Templating.DocumentFragment"/> representing value of this tag (<see cref="P:Engage.Templating.Template.Value"/>).
            </value>
        </member>
        <member name="T:Engage.Services.IMessageLogger">
            <summary>
            Summary description for IMessageLogger.
            </summary>
        </member>
        <member name="T:Engage.Services.IProgressBar">
            <summary>
            Summary description for IProgressBar.
            </summary>
        </member>
        <member name="T:Engage.Services.IProgressBarProvider">
            <summary>
            Summary description for IProgressBarProvider.
            </summary>
        </member>
        <member name="T:Engage.Services.IUIElementService">
            <summary>
            Enables interaction with the user interface of the development environment object that is hosting the designer.
            </summary>
        </member>
        <member name="T:Engage.Services.IUIService">
            <summary>
            Enables interaction with the user interface of the development environment object that is hosting the designer.
            </summary>
        </member>
        <member name="T:Engage.Services.IXmlProvider">
            <summary>
            Summary description for IXmlProvider.
            </summary>
        </member>
        <member name="T:Engage.Services.NullProgressBar">
            <summary>
            Summary description for DefaultProgressBar.
            </summary>
        </member>
        <member name="T:Engage.Services.ServiceHelper">
            <summary>
            A utility class to help with common service related activities.
            </summary>
        </member>
        <member name="T:Engage.UserStorage">
            <summary>
            Summary description for UserStorage.
            </summary>
        </member>
        <member name="T:Engage.ASPNetDebugAssert">
            <summary>
            Will break on failed assert statements in ASP.NET applications.
            </summary>
            <remarks>
            You need to set up a boolean switch in your web.config named "BreakOnAssert" to true in order to enable this.
            Then wire up this class as a listener.
            from http://www.c-sharpcorner.com/UploadFile/johnconwell/DebugAssertInASPDotNet11262005013820AM/DebugAssertInASPDotNet.aspx
            </remarks>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.Write(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString"/> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object"/> whose fully qualified class name you want to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener"/> class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Engage.ASPNetDebugAssert.BreakInCode">
            <summary>
            Causes the debugger to break debugging.
            </summary>
        </member>
        <member name="T:Engage.Util.BijectiveMap">
            <summary>A one-to-one mapping of integer values.</summary>
        </member>
        <member name="F:Engage.Util.BijectiveMap.forwardMap">
            <summary>Mapping of input to output.</summary>
        </member>
        <member name="F:Engage.Util.BijectiveMap.backwardMap">
            <summary>Mapping of output to input.</summary>
        </member>
        <member name="M:Engage.Util.BijectiveMap.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.BijectiveMap"/> class.</summary>
        </member>
        <member name="M:Engage.Util.BijectiveMap.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.BijectiveMap"/> class.</summary>
            <param name="orderedInputs">The values to map, in order.</param>
            <param name="orderedOutputs">The corresponding values to map to, in order.</param>
        </member>
        <member name="M:Engage.Util.BijectiveMap.Add(System.Int32,System.Int32)">
            <summary>Add a single value mapping.</summary>
            <param name="x">The input value.</param>
            <param name="y">The output value.</param>
        </member>
        <member name="M:Engage.Util.BijectiveMap.Map(System.Int32)">
            <summary>Map a value.</summary>
            <param name="x">The value to map.</param>
            <returns>The mapping value.</returns>
        </member>
        <member name="M:Engage.Util.BijectiveMap.Map(Engage.Util.UnorderedIntPair)">
            <summary>Map a pair of values.</summary>
            <param name="pair">The pair to map.</param>
            <returns>A new <see cref="T:Engage.Util.UnorderedIntPair"/> with values mapped.</returns>
        </member>
        <member name="M:Engage.Util.BijectiveMap.Unmap(System.Int32)">
            <summary>Reverse map a value.</summary>
            <param name="y">The output value to un-map.</param>
            <returns>The input value mapped to this value.</returns>
        </member>
        <member name="T:Engage.Util.CachedPropertyResolver">
            <summary>
            A class for getting values of an object's properties and fields (or nested properties) by name.
            </summary>
        </member>
        <member name="F:Engage.Util.CachedPropertyResolver.InvalidPathRegex">
            <summary>
            Expression which will match invalid property paths.
            </summary>
        </member>
        <member name="F:Engage.Util.CachedPropertyResolver.propertyCache">
            <summary>Cache of property path to value.</summary>
        </member>
        <member name="F:Engage.Util.CachedPropertyResolver.propertyMisses">
            <summary>Paths of properties that are known to be absent.</summary>
        </member>
        <member name="F:Engage.Util.CachedPropertyResolver.ignoreCase">
            <summary>If true, do case-insensitive property name searches.</summary>
        </member>
        <member name="M:Engage.Util.CachedPropertyResolver.#ctor(System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Util.CachedPropertyResolver"/> class.
            </summary>
            <param name="o">The object on which to search for properties and fields.</param>
            <param name="ignoreCase">If true, do case-insensitive property name searches.</param>
        </member>
        <member name="M:Engage.Util.CachedPropertyResolver.TryGetPropertyValue(System.String,System.Object,System.Object@,System.Boolean)">
            <summary>
            Try to get a property or field value by name.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="o">The object to search for the property.</param>
            <param name="value">The property's value.</param>
            <param name="ignoreCase">If true, do case-insensitive property name matches.</param>
            <returns><c>true</c> if the property was found.</returns>
        </member>
        <member name="M:Engage.Util.CachedPropertyResolver.TryGetValue(System.String,System.Object@)">
            <summary>
            Get the value of a property or field.
            </summary>
            <param name="propertyPath">
            The property path.
            This may be the name of a property on the object or a dot-delimited specification of a nested property.
            </param>
            <param name="value">The value of the property or field.</param>
            <returns><c>true</c> if the lookup succeeded.</returns>
        </member>
        <member name="M:Engage.Util.CachedPropertyResolver.ExtendCache(System.String)">
            <summary>
            Extend the property cache to include a specified property and its parents.
            </summary>
            <param name="path">The property name or path.</param>
            <returns><c>true</c> if all properties were found</returns>
        </member>
        <member name="T:Engage.Util.Combinatorics`1">
            <summary>A collection of combinatorics-related methods.</summary>
            <typeparam name="T">The type of item.</typeparam>
        </member>
        <member name="M:Engage.Util.Combinatorics`1.Combinations(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>Generate all k-combinations for a set of items.</summary>
            <param name="items">The items to choose from.</param>
            <param name="k">The number of items to take at a time.</param>
            <returns>
            A sequence of sequences of items.
            Note that there is no guarantee of certain orderings.
            </returns>
        </member>
        <member name="T:Engage.Util.Combinatorics">
            <summary>Type-independent combinatorics tools.</summary>
        </member>
        <member name="M:Engage.Util.Combinatorics.IntegerCombinations(System.Int32,System.Int32)">
            <summary>Generate all k-combinations of the integers in [0,n).</summary>
            <param name="n">The number of numbers to draw from.</param>
            <param name="k">The number of numbers to take at a time.</param>
            <returns>A sequence of monotonically decreasing sequences of <c>int</c>.</returns>
        </member>
        <member name="M:Engage.Util.Combinatorics.AllPairs(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Generate all pairings among some set of values.</summary>
            <param name="values">The values to pair.</param>
            <returns>A sequence of <see cref="T:Engage.Util.UnorderedIntPair"/>.</returns>
        </member>
        <member name="T:Engage.Util.Combinatorics.IntegerPermutation">
            <summary>An immutable permutation of integers.</summary>
        </member>
        <member name="F:Engage.Util.Combinatorics.IntegerPermutation.members">
            <summary>All values which appear in the sequence.</summary>
        </member>
        <member name="F:Engage.Util.Combinatorics.IntegerPermutation.sequence">
            <summary>The sequence itself.</summary>
        </member>
        <member name="F:Engage.Util.Combinatorics.IntegerPermutation.hashcode">
            <summary>The hash code of this sequence.</summary>
        </member>
        <member name="M:Engage.Util.Combinatorics.IntegerPermutation.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.Combinatorics.IntegerPermutation"/> class.</summary>
            <param name="values">The unique values in order.</param>
        </member>
        <member name="M:Engage.Util.Combinatorics.IntegerPermutation.CanBeGrouped(Engage.Util.Combinatorics.IntegerPermutation)">
            <summary>Determine whether this and another sequence are permutations of the same set.</summary>
            <param name="other">The other sequence.</param>
            <returns><c>true</c> if the two are in some permutation group.</returns>
        </member>
        <member name="M:Engage.Util.Combinatorics.IntegerPermutation.Equals(Engage.Util.Combinatorics.IntegerPermutation)">
            <summary>Determine whether this and another sequence are identical.</summary>
            <param name="other">The other sequence.</param>
            <returns><c>true</c> if the two are equivalent.</returns>
        </member>
        <member name="M:Engage.Util.Combinatorics.IntegerPermutation.GetHashCode">
            <summary>Get the hash code for this sequence.</summary>
            <returns>A value which almost kindasorta uniquely identifies this sequence.</returns>
        </member>
        <member name="T:Engage.Controls.ValidationSummary">
            <summary>
            An altered <see cref="T:System.Web.UI.WebControls.ValidationSummary"/> that renders within a structure like the the ModuleMessage control with an Error ModuleMessageType.
            </summary>
        </member>
        <member name="M:Engage.Controls.ValidationSummary.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"/> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The output stream that renders HTML content to the client.</param>
        </member>
        <member name="M:Engage.Controls.ValidationSummary.IsPageInError">
            <summary>
            Determines whether the page that this validation summary is on is in error.  Use this to determine whether to display markup or not.
            </summary>
            <remarks>
            We need to use this method because we can't call Page.IsValid until the page has been validated, which it may not have been.
            If we validate manually, it may throw validation errors before the user submits the page.
            </remarks>
            <returns>
            	<c>true</c> if this control's page in error; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Engage.Affiliations.AffiliationNotAllowedException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Affiliations.AffiliationTypeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.IQueryableSimpleGraph">
            <summary>An interface specifying read-only i.e. query-like operations for simple graphs.</summary>
        </member>
        <member name="M:Engage.Util.IQueryableSimpleGraph.GetAdjacencies(System.Int32)">
            <summary>Get any and all vertices directly adjacent to the vertex given.</summary>
            <param name="vertex">The vertex.</param>
            <returns>A sequence of the vertex's neighbors, if any.</returns>
        </member>
        <member name="M:Engage.Util.IQueryableSimpleGraph.AllMaximumMatchings">
            <summary>Get all possible maximum matchings.</summary>
            <returns>A sequence of vertex pair sets with no repeated vertices.</returns>
        </member>
        <member name="P:Engage.Util.IQueryableSimpleGraph.VertexCount">
            <summary>Gets the number of vertices in the graph.</summary>
        </member>
        <member name="P:Engage.Util.IQueryableSimpleGraph.IsolatedVertexCount">
            <summary>Gets the number of vertices having no incident edges.</summary>
        </member>
        <member name="P:Engage.Util.IQueryableSimpleGraph.Vertices">
            <summary>Gets all the vertices.</summary>
        </member>
        <member name="P:Engage.Util.IQueryableSimpleGraph.ConnectedVertices">
            <summary>Gets all the vertices having at least one edge.</summary>
        </member>
        <member name="T:Engage.Util.ListControlExtensions">
            <summary>Extension methods for manipulating <see cref="T:System.Web.UI.WebControls.ListControl"/> instances</summary>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetSelectedInt32(System.Web.UI.WebControls.ListControl)">
            <summary>Get the selected <see cref="T:System.Int32"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <returns>The selected <see cref="T:System.Int32"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetSelectedNullableInt32(System.Web.UI.WebControls.ListControl)">
            <summary>Get the selected <see cref="T:System.Int32"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <returns>The selected <see cref="T:System.Int32"/> value or <c>null</c> if none.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSelectedInt32(System.Web.UI.WebControls.ListControl,System.Nullable{System.Int32})">
            <summary>Set the selected <see cref="T:System.Int32"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="itemValue">The item value to select (select first empty value if <c>null</c>)</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetSelectedEnum``1(System.Web.UI.WebControls.ListControl)">
            <summary>Get the selected <see cref="T:System.Enum"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/>.</typeparam>
            <returns>The selected <see cref="T:System.Enum"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetSelectedNullableEnum``1(System.Web.UI.WebControls.ListControl)">
            <summary>Get the selected <see cref="T:System.Enum"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/>.</typeparam>
            <returns>The selected <see cref="T:System.Enum"/> value or <c>null</c> if none.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSelectedEnum``1(System.Web.UI.WebControls.ListControl,``0)">
            <summary>Set the selected <see cref="T:System.Enum"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="itemValue">The <see cref="T:System.Enum"/> value to select (select first empty value if <c>null</c>)</param>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSelectedEnum``1(System.Web.UI.WebControls.ListControl,System.Nullable{``0})">
            <summary>Set the selected <see cref="T:System.Enum"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="itemValue">The <see cref="T:System.Enum"/> value to select (select first empty value if <c>null</c>)</param>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/>.</typeparam>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetSelectedBoolean(System.Web.UI.WebControls.ListControl)">
            <summary>Get the selected <see cref="T:System.Boolean"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <returns>The selected <see cref="T:System.Boolean"/> value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetSelectedNullableBoolean(System.Web.UI.WebControls.ListControl)">
            <summary>Get the selected <see cref="T:System.Boolean"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <returns>The selected <see cref="T:System.Boolean"/> value or <c>null</c> if none.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSelectedBoolean(System.Web.UI.WebControls.ListControl,System.Nullable{System.Boolean})">
            <summary>Set the selected <see cref="T:System.Boolean"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="itemValue">The item value to select (select first empty value if <c>null</c>)</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSelectedString(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>Set the selected <see cref="T:System.Boolean"/> value from a <see cref="T:System.Web.UI.WebControls.ListControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="itemValue">The item value to select (select first empty value if <c>null</c>)</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetMultipleSelectedInt32Values(System.Web.UI.WebControls.ListControl,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Select one or more <see cref="T:System.Int32"/> values in a <see cref="T:System.Web.UI.WebControls.ListBox"/> and unselect any other items.</summary>
            <param name="listControl">A list control (which allows multiple selection).</param>
            <param name="values">The values to select.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> or <paramref name="values"/> are <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetMultipleSelectedValues(System.Web.UI.WebControls.ListControl,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Select one or more values in a <see cref="T:System.Web.UI.WebControls.ListBox"/> and unselect any other items.</summary>
            <param name="listControl">A list control (which allows multiple selection).</param>
            <param name="values">The values to select.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> or <paramref name="values"/> are <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetMultipleSelectedInt32Values(System.Web.UI.WebControls.ListControl)">
            <summary>
            Get all selected <see cref="T:System.Int32"/> values from a <see cref="T:System.Web.UI.WebControls.ListBox"/>.
            Non-integer values are ignored whether selected or not.
            </summary>
            <param name="listControl">A list control (which allows multiple selection).</param>
            <returns>A sequence of the selected items' values as <see cref="T:System.Int32"/> values</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.GetMultipleSelectedValues(System.Web.UI.WebControls.ListControl)">
            <summary>
            Get all selected values from a <see cref="T:System.Web.UI.WebControls.ListBox"/>.
            </summary>
            <param name="listControl">A list control (which allows multiple selection).</param>
            <returns>A sequence of the selected items' values</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="listControl"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SelectValue(System.Web.UI.WebControls.ListControl,System.String,System.Boolean)">
            <summary>Marks the given value as a selected value of the <paramref name="listControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
            <param name="caseSensitive">if set to <c>true</c> match value with exact case; otherwise match insensitive to case.</param>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSingleSelectedValue(System.Web.UI.WebControls.ListControl,System.String,System.Boolean)">
            <summary>Sets the given value as the only selected value of the <paramref name="listControl"/>.</summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
            <param name="caseSensitive">if set to <c>true</c> match value with exact case; otherwise match insensitive to case.</param>
        </member>
        <member name="M:Engage.Util.ListControlExtensions.SetSingleSelectedValueCaseInsensitive(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>Sets the selected value without regard for case.</summary>
            <param name="listControl">The list control.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Engage.Util.NearestQueue`1">
            <summary>
            An object for taking possible pairs of items in order such that
            some distance-like metric monotonically increases.
            </summary>
            <typeparam name="PointType">
            The type of the items which will be paired off
            and then have distances calculated between them.
            </typeparam>
        </member>
        <member name="F:Engage.Util.NearestQueue`1.queue">
            <summary>All distinct pairs of points ordered by decreasing distance metric.</summary>
        </member>
        <member name="F:Engage.Util.NearestQueue`1.discards">
            <summary>
            A quickly-searchable collection of points which are globally discarded.
            This is used to discard pairings lazily.
            </summary>
        </member>
        <member name="M:Engage.Util.NearestQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},Engage.Util.NearestQueue{`0}.PointPairMetric)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.NearestQueue`1"/> class.</summary>
            <param name="points">The points to pair up and queue.</param>
            <param name="distanceFunction">The function with which to calculate distance between two points.</param>
        </member>
        <member name="M:Engage.Util.NearestQueue`1.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Engage.Util.NearestQueue`1"/> class from being created.</summary>
        </member>
        <member name="M:Engage.Util.NearestQueue`1.PopNearest">
            <summary>Remove and return the nearest pair of points.</summary>
            <returns>A pair of the nearest points.</returns>
        </member>
        <member name="M:Engage.Util.NearestQueue`1.Discard(`0)">
            <summary>Discard all pairings involving a given point.</summary>
            <param name="point">The point to discard globally.</param>
        </member>
        <member name="T:Engage.Util.NearestQueue`1.PointPairMetric">
            <summary>A basic function prototype for calculating a metric between two points.</summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The value of the metric between the points.</returns>
        </member>
        <member name="T:Engage.Util.NearestQueue`1.QueueFrame">
            <summary>A frame in the pairing queue.</summary>
        </member>
        <member name="M:Engage.Util.NearestQueue`1.QueueFrame.#ctor(`0,`0,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.NearestQueue`1.QueueFrame"/> class.</summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <param name="metric">The value of the metric between the points.</param>
        </member>
        <member name="P:Engage.Util.NearestQueue`1.QueueFrame.PointA">
            <summary>Gets the first point in the pair of points.</summary>
        </member>
        <member name="P:Engage.Util.NearestQueue`1.QueueFrame.PointB">
            <summary>Gets the second point in the pair of points.</summary>
        </member>
        <member name="P:Engage.Util.NearestQueue`1.QueueFrame.Metric">
            <summary>Gets the value of the metric between the two points.</summary>
        </member>
        <member name="T:Engage.Util.NullableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Nullable`1"/>
            </summary>
        </member>
        <member name="M:Engage.Util.NullableExtensions.ToString``1(System.Nullable{``0},System.String,System.IFormatProvider)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <typeparam name="T">The underlying value type of <paramref name="this"/></typeparam>
            <param name="this">The value for which to get a <see cref="T:System.String"/> representation.</param>
            <param name="format">The format to use -or- <c>null</c> to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value -or- <c>null</c> to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="M:Engage.Util.NullableExtensions.ToString``1(System.Nullable{``0},System.IFormatProvider)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <typeparam name="T">The underlying value type of <paramref name="this"/></typeparam>
            <param name="this">The value for which to get a <see cref="T:System.String"/> representation.</param>
            <param name="formatProvider">The provider to use to format the value -or- <c>null</c> to obtain the numeric format information from the current locale setting of the operating system.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="M:Engage.Util.NullableExtensions.ToString``1(System.Nullable{``0},System.String,System.IFormatProvider,System.String)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <typeparam name="T">The underlying value type of <paramref name="this"/></typeparam>
            <param name="this">The value for which to get a <see cref="T:System.String"/> representation.</param>
            <param name="format">The format to use -or- <c>null</c> to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
            <param name="formatProvider">The provider to use to format the value -or- <c>null</c> to obtain the numeric format information from the current locale setting of the operating system.</param>
            <param name="defaultString">The <see cref="T:System.String"/> to provide when <paramref name="this"/> doesn't have a value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="M:Engage.Util.NullableExtensions.ToString``1(System.Nullable{``0},System.IFormatProvider,System.String)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <typeparam name="T">The underlying value type of <paramref name="this"/></typeparam>
            <param name="this">The value for which to get a <see cref="T:System.String"/> representation.</param>
            <param name="formatProvider">The provider to use to format the value -or- <c>null</c> to obtain the numeric format information from the current locale setting of the operating system.</param>
            <param name="defaultString">The <see cref="T:System.String"/> to provide when <paramref name="this"/> doesn't have a value.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Engage.Util.RenewableTakeSome`1">
            <summary>An enumerator with a Take()-like limit which can be arbitrarily reset.</summary>
            <typeparam name="T">The type of object being enumerated.</typeparam>
        </member>
        <member name="F:Engage.Util.RenewableTakeSome`1.source">
            <summary>The item source to take from.</summary>
        </member>
        <member name="F:Engage.Util.RenewableTakeSome`1.remaining">
            <summary>The maximum number of additional items to yield.</summary>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.RenewableTakeSome`1"/> class.</summary>
            <param name="takeFrom">The items to draw from.</param>
            <param name="stretchLength">The initial maximum number of items to take.</param>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Engage.Util.RenewableTakeSome`1"/> class from being created.</summary>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.Renew">
            <summary>Allow another <see cref="P:Engage.Util.RenewableTakeSome`1.StretchLength"/> items to be taken.</summary>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.Renew(System.Int32)">
            <summary>Allow another <see cref="P:Engage.Util.RenewableTakeSome`1.StretchLength"/> items to be taken.</summary>
            <param name="newStretchLength">New value for <see cref="P:Engage.Util.RenewableTakeSome`1.StretchLength"/>.</param>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.Dispose">
            <summary>Dispose the source enumerator.</summary>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.MoveNext">
            <summary>Advance to the next item in the sequence.</summary>
            <returns><c>true</c> if there is a next item.</returns>
        </member>
        <member name="M:Engage.Util.RenewableTakeSome`1.Reset">
            <summary>Reset the source enumerator and renew this limit.</summary>
        </member>
        <member name="P:Engage.Util.RenewableTakeSome`1.StretchLength">
            <summary>Gets the last limit set.</summary>
        </member>
        <member name="P:Engage.Util.RenewableTakeSome`1.Current">
            <summary>Gets the current item.</summary>
        </member>
        <member name="P:Engage.Util.RenewableTakeSome`1.System#Collections#IEnumerator#Current">
            <summary>Gets the current item.</summary>
        </member>
        <member name="T:Engage.Util.SimpleGraph">
            <summary>
            A simple graph.
            Undirected edges.
            No loops (edges from any vertex back to itself).
            Simple integers are used for vertices.
            </summary>
        </member>
        <member name="F:Engage.Util.SimpleGraph.adjacencies">
            <summary>For each vertex, a set of vertices which share an edge with it.</summary>
            <remarks>
            Every vertex is represented here regardless of number of incident edges
            i.e. this dictionary's key collection _is_ the vertex collection.
            </remarks>
        </member>
        <member name="F:Engage.Util.SimpleGraph.nextVertex">
            <summary>The next value to use when creating a new vertex.</summary>
        </member>
        <member name="M:Engage.Util.SimpleGraph.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.SimpleGraph"/> class.</summary>
        </member>
        <member name="M:Engage.Util.SimpleGraph.#ctor(Engage.Util.SimpleGraph)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.SimpleGraph"/> class.</summary>
            <param name="src">The graph to duplicate.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.#ctor(Engage.Util.IQueryableSimpleGraph)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.SimpleGraph"/> class.</summary>
            <param name="src">The graph to duplicate.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GenerateCompleteGraph(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Generate a complete graph.</summary>
            <param name="vertices">The vertices to use.</param>
            <returns>A <see cref="T:Engage.Util.SimpleGraph"/> with all pairs of vertices connected.</returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AddVertex">
            <summary>Add a new vertex to the graph and return its unique identifier.</summary>
            <returns>An <see cref="T:System.Int32"/> unique to the new vertex.</returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AddVertex(System.Int32)">
            <summary>Add a new vertex with a specific value to the graph.</summary>
            <param name="vertex">The vertex to add.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.RemoveVertex(System.Int32)">
            <summary>Remove a vertex and any edges connected to it.</summary>
            <param name="v">The vertex to remove.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AddEdge(System.Int32,System.Int32)">
            <summary>Create an edge between two distinct vertices.</summary>
            <param name="vertex_a">A vertex.</param>
            <param name="vertex_b">Another vertex.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AddEdge(Engage.Util.UnorderedIntPair)">
            <summary>Create an edge between two distinct vertices.</summary>
            <param name="vertexPair">A pair of vertices.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AddCompleteEdges(System.Collections.Generic.IList{System.Int32})">
            <summary>Add edges between every pair in a set of vertices.</summary>
            <param name="vertices">The vertices to be fully-connected.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.RemoveEdge(System.Int32,System.Int32)">
            <summary>Remove an edge between two distinct vertices.</summary>
            <param name="vertex_a">A vertex.</param>
            <param name="vertex_b">Another vertex.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.RemoveEdge(Engage.Util.UnorderedIntPair)">
            <summary>Remove an edge between two distinct vertices.</summary>
            <param name="vertexPair">A pair of vertices.</param>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AllMaximumMatchings">
            <summary>Get all matchings of maximum theoretical/optimistic size.</summary>
            <returns>A sequence of vertex pair sets with no repeated vertices.</returns>
            <remarks>This implementation is not good.</remarks>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetDegree(System.Int32)">
            <summary>Get the number of edges incident to a given vertex.</summary>
            <param name="vertex">The vertex.</param>
            <returns>The number of vertices adjacent.</returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetAdjacencies(System.Int32)">
            <summary>Get any and all vertices directly adjacent to the vertex given.</summary>
            <param name="vertex">The vertex.</param>
            <returns>A sequence of the vertex's neighbors, if any.</returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.Traverse">
            <summary>
            Iterate over all vertices in some arbitrary order, following
            edges from one vertex to the next wherever possible.
            No guarantees about precise order,
            except that all isolated vertices are returned first.
            </summary>
            <returns>A sequence of vertices.</returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetQuickColoring">
            <summary>
            Quickly produce a partition of the graph's vertices
            such that no two in any partition share an edge.
            In other words, break the graph into disjoint subsets.
            </summary>
            <returns>
            A mapping of some arbitrary "color" value to sets of vertices,
            where each set has all vertices of the same color,
            no vertex appears in more than one set,
            and no two vertices within a set are connected by an edge.
            </returns>
            <remarks>
            This simple algorithm cannot be expected to always produce
            optimal solutions, but it does in some cases.
            </remarks>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetSWOColoring">
            <summary>
            Use "squeaky wheel" optimization to produce a partition of the graph's vertices
            such that no two in any partition share an edge.
            In other words, break the graph into disjoint subsets.
            </summary>
            <returns>
            A mapping of some arbitrary "color" value to sets of vertices,
            where each set has all vertices of the same color,
            no vertex appears in more than one set,
            and no two vertices within a set are connected by an edge.
            </returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetRandomColoring(System.Random)">
            <summary>
            Quickly produce a partition of the graph's vertices
            such that no two in any partition share an edge.
            In other words, break the graph into disjoint subsets.
            </summary>
            <param name="rng">The <see cref="T:System.Random"/> to use in traversing the graph.</param>
            <returns>
            A mapping of some arbitrary "color" value to sets of vertices,
            where each set has all vertices of the same color,
            no vertex appears in more than one set,
            and no two vertices within a set are connected by an edge.
            </returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetBestRandomColoring(System.Random,System.Collections.Generic.IList{System.Int32})">
            <summary>Generate multiple random colorings and return the best found.</summary>
            <param name="rng">The <see cref="T:System.Random"/> to use in traversing the graph.</param>
            <param name="tryOrdering">An ordering of vertices to include in the coloring search.</param>
            <returns>
            A mapping of some arbitrary "color" value to sets of vertices,
            where each set has all vertices of the same color,
            no vertex appears in more than one set,
            and no two vertices within a set are connected by an edge.
            </returns>
            <remarks>
            This method is guaranteed to return, but its running time
            is not very consistent. Large graphs with high degree especially
            may or may not run for long times.
            </remarks>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GreedyColorInOrder(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Partition the graph's vertices such that no two in any partition share an edge.</summary>
            <param name="orderedVertices">Vertices to include in the coloring in some order.</param>
            <returns>
            A mapping of some arbitrary "color" value to sets of vertices,
            where each set has all vertices of the same color,
            no vertex appears in more than one set,
            and no two vertices within a set are connected by an edge.
            </returns>
            <remarks>There should exist some ordering of the vertices which will result in an optimal coloring.</remarks>
        </member>
        <member name="M:Engage.Util.SimpleGraph.GetVerifyNeighborSet(System.Int32)">
            <summary>Get the adjacency list for a given vertex.</summary>
            <param name="vertex">The vertex.</param>
            <returns>The vertex's associated neighbor set.</returns>
        </member>
        <member name="M:Engage.Util.SimpleGraph.AlmostAllMatchings">
            <summary>
            Get almost all possible matchings.
            All maximum matchings will be produced, some other types may not be.
            </summary>
            <returns>A sequence of vertex pair sets with no repeated vertices.</returns>
        </member>
        <member name="P:Engage.Util.SimpleGraph.VertexCount">
            <summary>Gets the number of vertices in the graph.</summary>
        </member>
        <member name="P:Engage.Util.SimpleGraph.IsolatedVertexCount">
            <summary>Gets the number of vertices having no incident edges.</summary>
        </member>
        <member name="P:Engage.Util.SimpleGraph.MaximumDegree">
            <summary>Gets the maximum degree over all vertices.</summary>
        </member>
        <member name="P:Engage.Util.SimpleGraph.Vertices">
            <summary>Gets all the vertices.</summary>
        </member>
        <member name="P:Engage.Util.SimpleGraph.ConnectedVertices">
            <summary>Gets all the vertices having at least one edge.</summary>
        </member>
        <member name="P:Engage.Util.SimpleGraph.EdgeCount">
            <summary>Gets the number of edges in the graph.</summary>
        </member>
        <member name="T:Engage.Util.StringExtensions">
            <summary>Extensions to <see cref="T:System.String"/></summary>
        </member>
        <member name="F:Engage.Util.StringExtensions.FormatWithTokenRegex">
            <summary>Expression matching format tokens and ignoring escapes "{{" and "}}" properly.</summary>
        </member>
        <member name="F:Engage.Util.StringExtensions.StringFormatDelims">
            <summary>characters used by string.Format to mark the start of special formatting</summary>
        </member>
        <member name="M:Engage.Util.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns a value indicating whether the specified <see cref="T:System.String"/> object occurs within the <paramref name="this"/> string.
            A parameter specifies the type of search to use for the specified string.
            </summary>
            <param name="this">The string to search in</param>
            <param name="value">The string to seek</param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="this"/> or <paramref name="value"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="comparisonType"/> is not a valid <see cref="T:System.StringComparison"/> value</exception>
            <returns>
            <c>true</c> if the <paramref name="value"/> parameter occurs within the <paramref name="this"/> parameter, 
            or if <paramref name="value"/> is the empty string (<c>""</c>); 
            otherwise, <c>false</c>.
            </returns>
            <remarks>
            The <paramref name="comparisonType"/> parameter specifies to search for the value parameter using the current or invariant culture, 
            using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.
            </remarks>
        </member>
        <member name="M:Engage.Util.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a new string in which all occurrences of a specified <see cref="T:System.String"/> in <paramref name="this"/> string are replaced with another specified string.
            A parameter specifies the type of search to use for the specified string.
            </summary>
            <param name="this">The string to search in</param>
            <param name="oldValue">The string to be replaced</param>
            <param name="newValue">The string to replace all occurrences of <paramref name="oldValue"/></param>
            <param name="comparisonType">One of the enumeration values that specifies the rules for the search</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="this"/> or <paramref name="oldValue"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="oldValue"/> is the empty string (<c>""</c>) or <paramref name="comparisonType"/> is not a valid <see cref="T:System.StringComparison"/> value</exception>
            <returns>
            A string that is equivalent to <paramref name="this"/> string except that all instances of <paramref name="oldValue"/> are replaced with <paramref name="newValue"/>. 
            If <paramref name="oldValue"/> is not found in <paramref name="this"/> string, the method returns <paramref name="this"/> string unchanged. 
            </returns>
            <remarks>
            If <paramref name="newValue"/> is <c>null</c>, all occurrences of <paramref name="oldValue"/> are removed.
            The <paramref name="comparisonType"/> parameter specifies to search for the value parameter using the current or invariant culture, 
            using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.
            </remarks>
        </member>
        <member name="M:Engage.Util.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Replace named placeholders in a format string with values.
            </summary>
            <param name="format">
            The format string.
            Placeholder names are like <c>string.Format</c>, except instead of integer keys "{0}",
            "{value}"
            "{value.ValueNameMember}"
            "{value.Member1.MemberOfMember1}"
            "{value.ValueNameMember:format}", where "format" is like <c>string.Format</c>.
            "value" is a name of a member of the "values" parameter.
            Unmatched and invalid placeholders are left as-is.
            </param>
            <param name="values">The values.</param>
            <returns>The format string with values substituted.</returns>
        </member>
        <member name="M:Engage.Util.StringExtensions.FormatWith(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Replace named placeholders in a format string with values.
            </summary>
            <param name="format">
            The format string.
            Placeholder names are like <c>string.Format</c>, except instead of integer keys "{0}",
            "{value}"
            "{value.ValueNameMember}"
            "{value.Member1.MemberOfMember1}"
            "{value.ValueNameMember:format}", where "format" is like <c>string.Format</c>.
            "value" is a name of a member of the "values" parameter.
            Unmatched and invalid placeholders are left as-is.
            </param>
            <param name="values">The values.</param>
            <param name="formatCulture"><see cref="T:System.Globalization.CultureInfo"/> to use for formatting.</param>
            <returns>The format string with values substituted.</returns>
        </member>
        <member name="T:Engage.Util.EngageSession">
            <summary>
            This class is a concrete implementation of the EngageSessionBase class.
            </summary>
        </member>
        <member name="T:Engage.Util.EngageSessionBase">
            <summary>
            This abstract class provides a set of methods to manage the static
            <CODE>GlobalSession</CODE>
             object provided by the subclasses;
            Some implementation is provided, the others must be implemented by the
            subclasses. Mainly be because the 
            <CODE>GlobalSession</CODE>
             object
            is a Singleton and must be provided by the subclasses in order to have
            multiple instances.
            Also, synchronization must be implemented by the subclass, on it's
            Class object
            @author Mark Gorla - Emerging Technologies Group
            @version $Revision: 9 $
            </summary>
        </member>
        <member name="T:Engage.Attributes.AttributeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.BinaryAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.DefaultEntityAttribute">
            <summary>
            Summary description for DefaultEntityAttribute.
            </summary>
        </member>
        <member name="M:Engage.Attributes.BinaryAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.BinaryAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type ID.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Util.ICommand">
            <summary>
            Summary description for ICommand.
            </summary>
        </member>
        <member name="T:Engage.Attributes.DateAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.DateAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.DateAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.DateAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Util.DateTimeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Util.DateTimeAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="required"></param>
            <param name="objectTypeID"></param>
        </member>
        <member name="M:Engage.Util.DateTimeAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Util.DefinitionRequirement">
            <summary>
            Summary description for EngageAffiliationType.
            </summary>
        </member>
        <member name="T:Engage.Util.DeleteObjectCommand">
            <summary>
            Summary description for DeleteObjectCommand.
            </summary>
        </member>
        <member name="T:Engage.Attributes.EmailAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.EmailAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.EmailAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.EmailAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Affiliations.EngageAffiliationType">
            <summary>
            Summary description for EngageAffiliationType.
            </summary>
        </member>
        <member name="T:Engage.Attributes.Attribute">
            <summary>
            Summary description for Attribute.
            </summary>
        </member>
        <member name="T:Engage.Attributes.AttributeType">
            <summary>
            Summary description for AttributeType.
            </summary>
        </member>
        <member name="T:Engage.Lookups.BinaryType">
            <summary>
            Summary description for LookupType.
            </summary>
        </member>
        <member name="T:Engage.Util.EnumerableExtensions">
            <summary>Extensions to <see cref="T:System.Collections.Generic.IEnumerable`1"/> collections</summary>
            <summary>Extensions to <see cref="T:System.Collections.Generic.IEnumerable`1"/> collections: value ranges generation.</summary>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.AsSequence``1(``0)">
            <summary>Returns the given <paramref name="item"/> as an enumerable sequence.</summary>
            <typeparam name="TSource">The type of the element.</typeparam>
            <param name="item">The single item in the sequence.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance that contains only <paramref name="item"/></returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.IsSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Determines whether the specified sequence holds a single element.</summary>
            <remarks>Implementation based on JaredPar at <see href="http://stackoverflow.com/a/6059730"/></remarks>
            <typeparam name="TSource">The type of the elements in <paramref name="sequence"/></typeparam>
            <param name="sequence">The sequence.</param>
            <returns><c>true</c> if the specified sequence is made up of exactly one element; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.IsMany``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Determines whether the specified sequence holds more than one element.</summary>
            <typeparam name="TSource">The type of the elements in <paramref name="sequence"/></typeparam>
            <param name="sequence">The sequence.</param>
            <returns><c>true</c> if the specified sequence is made up of many elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds the given <paramref name="value"/> to the end of the specified <paramref name="sequence"/>.</summary>
            <remarks>Implementation from JaredPar at <see href="http://stackoverflow.com/a/1210311"/></remarks>
            <typeparam name="TSource">The type of the elements in <paramref name="sequence"/></typeparam>
            <param name="sequence">The sequence to which <paramref name="value"/> should be added.</param>
            <param name="value">The value to add to the <paramref name="sequence"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance that contains <paramref name="sequence"/> with <paramref name="value"/> added to the end</returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds the given <paramref name="value"/> to the beginning of the specified <paramref name="sequence"/>.</summary>
            <remarks>Implementation from JaredPar at <see href="http://stackoverflow.com/a/1210311"/></remarks>
            <typeparam name="TSource">The type of the elements in <paramref name="sequence"/></typeparam>
            <param name="sequence">The sequence to which <paramref name="value"/> should be added.</param>
            <param name="value">The value to add to the <paramref name="sequence"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance that contains <paramref name="sequence"/> with <paramref name="value"/> added to the end</returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.Mode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Get the most common value occurring in a sequence.</summary>
            <param name="values">The nonempty sequence of values to tally.</param>
            <returns>A value which appears the maximum number of times.</returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.Interleave``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Interleaves the contents of several <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences i.e. take one element from each in turn.</summary>
            <param name="sources">The sequences to interleave.</param>
            <typeparam name="TSource">type of the items in the input sequences</typeparam>
            <returns>A sequence of <typeparamref name="TSource"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> is <c>null</c> or has a <c>null</c> sequence</exception>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.Transpose``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Interleave the contents of several sequences and group them.
            If all source sequences have equal size, the result will resemble a matrix transposition.
            </summary>
            <param name="sources">The sequences to transpose.</param>
            <typeparam name="TSource">Type of the items in the input sequences</typeparam>
            <returns>A sequence of sequences of <typeparamref name="TSource"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="sources"/> is <c>null</c> or has a <c>null</c> sequence</exception>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.InterleaveImpl``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Interleaves the contents of several <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences i.e. take one element from each in turn.</summary>
            <param name="sources">The sequences to interleave.</param>
            <typeparam name="TSource">Type of the items in the input sequences</typeparam>
            <returns>A sequence of <typeparamref name="TSource"/></returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.TransposeImpl``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Interleave the contents of several sequences and group them.
            If all source sequences have equal size, the result will resemble a matrix transposition.
            </summary>
            <param name="sources">The sequences to transpose.</param>
            <typeparam name="TSource">Type of the items in the input sequences</typeparam>
            <returns>A sequence of sequences of <typeparamref name="TSource"/></returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.GetTransposedRow``1(System.Collections.Generic.ICollection{System.Collections.Generic.IEnumerator{``0}})">
            <summary>
            Take one <typeparamref name="TSource"/> from each given enumerator in order.
            Remove any exhausted enumerators from the list.
            </summary>
            <param name="enumerators">The enumerators.</param>
            <typeparam name="TSource">Type of the items enumerators yield.</typeparam>
            <returns>A sequence of <typeparamref name="TSource"/></returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.RangeReversed(System.Int32,System.Int32)">
            <summary>Generate a sequence of integer values in order from largest to smallest.</summary>
            <param name="countDownTo">The final, minimum value which will be yielded.</param>
            <param name="count">The number of values to yield.</param>
            <returns>A monotonically decreasing sequence of <c>int</c>.</returns>
            <remarks>
            This method gives basically the same result as:
                Enumerable.Range(countDownTo, count).Reverse()
            but it avoids generating and storing the values as Enumerable.Reverse would.
            </remarks>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.RangeInclusive(System.Char,System.Char)">
            <summary>
            Generates a sequence of characters within a specified range including the given endpoints.
            If final is numerically less than first, the sequence will be in decreasing order from first to final.
            </summary>
            <param name="first">The first char in the sequence.</param>
            <param name="final">The final char in the sequence.</param>
            <returns>A sequence of char</returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.RangeInclusive(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integers within a specified range including the given endpoints.
            If final is less than first, the sequence will be in decreasing order from first to final.
            </summary>
            <param name="first">The first value in the sequence.</param>
            <param name="final">The final value in the sequence.</param>
            <returns>A sequence of <c>int</c></returns>
        </member>
        <member name="M:Engage.Util.EnumerableExtensions.RangeExclusive(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integers from starting value to ending value, not including ending value.
            If end is less than start, the sequence will be in decreasing order from start.
            </summary>
            <param name="start">The first value in the sequence.</param>
            <param name="end">The exclusive end of the sequence.</param>
            <returns>A sequence of <c>int</c></returns>
        </member>
        <member name="T:Engage.GenericComparer`1">
            <summary>
            A comparer that takes a string and sorts by a field of that name on the compared objects.
            If the field is not <see cref="T:System.IComparable"/>, but is <see cref="T:System.Collections.Generic.IEnumerable`1"/>, 
            it will attempt to sort by the first value in the list (assuming that the list isn't empty
             and the type of enumerated type is <see cref="T:System.IComparable"/>.
            from <see href="http://www.gridviewguy.com/ArticleDetails.aspx?articleID=203"/>
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="F:Engage.GenericComparer`1.sortExpression">
            <summary>
            Name of the field by which the items are to be sorted
            </summary>
        </member>
        <member name="M:Engage.GenericComparer`1.#ctor(System.String,System.Web.UI.WebControls.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.GenericComparer`1"/> class.
            </summary>
            <param name="sortExpression">The name of the field by which the items are to be sorted.</param>
            <param name="sortDirection">The direction in which to sort items.</param>
        </member>
        <member name="M:Engage.GenericComparer`1.Compare(`0,`0)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="P:Engage.GenericComparer`1.SortDirection">
            <summary>
            Gets or sets the direction in which to sort items.
            </summary>
            <value>The direction in which to sort items.</value>
        </member>
        <member name="T:Engage.Attribute">
            <summary>
            This class represents an attribute.  The <see cref="T:Engage.AttributeDefinition"/> is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:Engage.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="M:Engage.AttributeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.AttributeCollection"/> class.
            </summary>
        </member>
        <member name="M:Engage.AttributeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Engage.AttributeCollection.System#Collections#Generic#IEnumerable{Engage#AttributeDefinition}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Engage.AttributeCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Engage.AttributeDefinition"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:Engage.AttributeDefinition.SetType(System.String)">
            <exception cref="T:Engage.SgmlException">Attribute type is not supported</exception>
        </member>
        <member name="M:Engage.AttributeDefinition.SetPresence(System.String)">
            <exception cref="T:Engage.SgmlException">Attrivute value is not supported</exception>
        </member>
        <member name="T:Engage.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="M:Engage.ContentModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ContentModel"/> class.
            </summary>
        </member>
        <member name="M:Engage.ContentModel.SetDeclaredContent(System.String)">
            <exception cref="T:Engage.SgmlException">Declared content type is not supported</exception>
        </member>
        <member name="M:Engage.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Engage.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <exception cref="T:Engage.SgmlException">Invalid name character</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String,System.Char)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String,System.Int32)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Error(System.String,System.String)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.Entity.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Engage.Group.AddConnector(System.Char)">
            <exception cref="T:Engage.SgmlException">Missing token before connector</exception>
            <exception cref="T:Engage.SgmlException">Connector is inconsistent with group</exception>
        </member>
        <member name="T:Engage.HtmlConverter">
            <summary>
            from http://weblogs.asp.net/jezell/archive/2003/10/24/33376.aspx
            </summary>
        </member>
        <member name="F:Engage.HtmlConverter.XhtmlNamespace">
            <summary>
            The namespace URL for XHTML
            </summary>
        </member>
        <member name="F:Engage.HtmlConverter.XhtmlSchema">
            <summary>
            The XHTML schema, used to validate the document
            </summary>
        </member>
        <member name="M:Engage.HtmlConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Engage.HtmlConverter"/> class.
            </summary>
            <exception cref="T:System.InvalidOperationException">Could not load XHTML schema from assembly</exception>
        </member>
        <member name="M:Engage.HtmlConverter.CreateValidXmlDocument(System.String)">
            <summary>
            Adds a root &lt;html&gt; element to the given <paramref name="html"/> string, if it doesn't already have it
            </summary>
            <param name="html">The HTML from which to create a valid document.</param>
            <returns>An valid <see cref="T:System.Xml.XPath.IXPathNavigable"/> instance of the given <paramref name="html"/></returns>
        </member>
        <member name="M:Engage.HtmlConverter.ValidateAndCloseTags(System.String)">
            <summary>
            Validates the given <paramref name="html"/> string, ensuring that all opened tags are closed.
            </summary>
            <param name="html">The HTML to validate and close.</param>
            <returns><paramref name="html"/> with any invalidities removed</returns>
        </member>
        <member name="M:Engage.HtmlConverter.ToXhtml(System.String)">
            <summary>
            Converts the given <paramref name="html"/> string into a valid XHTML document.
            </summary>
            <param name="html">The HTML to convert into a navigable document.</param>
            <returns>The given <paramref name="html"/> as an XHTML document</returns>
        </member>
        <member name="M:Engage.HtmlConverter.IsValidAttribute(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Determines whether the given <paramref name="attribute"/> is valid for the given <paramref name="parentElement"/>.
            </summary>
            <param name="parentElement">The parent element of <paramref name="attribute"/>.</param>
            <param name="attribute">The attribute to validate.</param>
            <returns>
            <c>true</c> if the given <paramref name="attribute"/> is valid for the given <paramref name="parentElement"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.HtmlConverter.IsValidElement(System.Xml.XmlNode)">
            <summary>
            Determines whether the given element is valid for XHTML documents.
            </summary>
            <param name="element">The element to validate.</param>
            <returns>
            <c>true</c> if the given element is valid for XHTML documents; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.HtmlConverter.ProcessNode(System.Xml.XmlNode)">
            <summary>
            Walks over the node and removes all invalid elements and attributes.
            </summary>
            <param name="parent">The node to process.</param>
        </member>
        <member name="T:Engage.HtmlStream">
            <summary>
            This class decodes an HTML/XML stream correctly.
            </summary>
        </member>
        <member name="T:Engage.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="P:Engage.HWStack.Item(System.Int32)">
            <summary>
            Gets or sets the item at the requested <paramref name="index"/> or <c>null</c> if <paramref name="index"/> is out of bounds
            </summary>
            <value>The item at the requested <paramref name="index"/> or <c>null</c> if <paramref name="index"/> is out of bounds</value>
        </member>
        <member name="T:Engage.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:Engage.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="M:Engage.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.String,System.Xml.XmlNameTable)">
            <exception cref="T:Engage.SgmlException"><c>SgmlException</c>.</exception>
        </member>
        <member name="M:Engage.SgmlDtd.ParseIncludeSection">
            <exception cref="T:System.NotImplementedException">Include Section</exception>
        </member>
        <member name="M:Engage.SgmlDtd.ScanName(System.String)">
            <exception cref="T:System.NotSupportedException">External parameter entity resolution</exception>
        </member>
        <member name="M:Engage.SgmlException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.SgmlException"/> class.
            </summary>
        </member>
        <member name="T:Engage.SgmlReader">
            <summary>
            SgmlReader is an <see cref="T:System.Xml.XmlReader"/> API over any SGML document (including built in 
            support for HTML).  
            </summary>
            <remarks>
            An XmlReader implementation for loading SGML (including HTML) converting it
            to well formed XML, by adding missing quotes, empty attribute values, ignoring
            duplicate attributes, case folding on tag names, adding missing closing tags
            based on SGML DTD information, and so on.
            </remarks>
        </member>
        <member name="F:Engage.SgmlReader.attributePosition">
            <summary>
            which attribute are we positioned on in the collection.
            </summary>
        </member>
        <member name="F:Engage.SgmlReader.node">
            <summary>
            current node (except for attributes)
            </summary>
        </member>
        <member name="M:Engage.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="M:Engage.SgmlReader.GetAttribute(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>i</c> is out of range.</exception>
        </member>
        <member name="M:Engage.SgmlReader.MoveToAttribute(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><c>i</c> is out of range.</exception>
        </member>
        <member name="M:Engage.SgmlReader.ResolveEntity">
            <exception cref="T:System.InvalidOperationException">Not on an entity reference.</exception>
        </member>
        <member name="M:Engage.SgmlReader.ReadAttributeValue">
            <exception cref="T:System.InvalidOperationException">Not on an attribute.</exception>
        </member>
        <member name="M:Engage.SgmlReader.OpenInput">
            <exception cref="T:System.InvalidOperationException">You must specify input either via Href or InputStream properties</exception>
        </member>
        <member name="P:Engage.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.StripDocType">
            <summary>
            Gets or sets a value indicating whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:Engage.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="T:Engage.State">
            <summary>
            This <c>enum</c> is used to track the current state of the <see cref="T:Engage.SgmlReader"/>
            </summary>
        </member>
        <member name="M:Engage.Ucs4DecoderBigEngian.GetFullChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <exception cref="T:Engage.SgmlException">Invalid character in encoding</exception>
        </member>
        <member name="M:Engage.Ucs4DecoderLittleEndian.GetFullChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <exception cref="T:Engage.SgmlException">Invalid character in encoding</exception>
        </member>
        <member name="T:Engage.Util.Interpolator">
            <summary>
            A 2-dimensional linear interpolator. Capture a function of 'y' over 'x'.
            TODO generic in dimensionality
            TODO higher degrees of interpolation and configurable extrapolation
            </summary>
        </member>
        <member name="M:Engage.Util.Interpolator.Sample(System.Double)">
            <summary>
            Interpolate from known values.
            </summary>
            <param name="x">The independent variable.</param>
            <returns>Interpolated value for x or exact data point if present</returns>
            <exception cref="T:System.InvalidOperationException">no data points are set</exception>
        </member>
        <member name="P:Engage.Util.Interpolator.Item(System.Double)">
            <summary>
            On assignment, add a data point.
            On read, interpolate from data points.
            </summary>
            <param name="x">The value of the independent variable.</param>
            <returns>An interpolated value.</returns>
        </member>
        <member name="T:Engage.Util.KeyEqualityComparer`2">
            <summary>
            Defines an implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> which selects a key from the object based on a passed in delegate.
            Use <see cref="T:Engage.Util.StrictKeyEqualityComparer`2"/> if <typeparamref name="TKey"/> implements <see cref="T:System.IEquatable`1"/>
            </summary>
            <typeparam name="T">The type of the object being compared</typeparam>
            <typeparam name="TKey">The type of the key by which <typeparamref name="T"/> should be compared.</typeparam>
            <remarks>from http://stackoverflow.com/questions/98033/wrap-a-delegate-in-an-iequalitycomparer/3719802#3719802</remarks>
        </member>
        <member name="F:Engage.Util.KeyEqualityComparer`2.KeyExtractor">
            <summary>
            The delegate to call on an object to get its key
            </summary>
        </member>
        <member name="M:Engage.Util.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Util.KeyEqualityComparer`2"/> class.
            </summary>
            <param name="keyExtractor">A function that returns the key by which the object should be compared.</param>
        </member>
        <member name="M:Engage.Util.KeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Util.KeyEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The object for which a hash coade is to be returned.</param>
            <returns>
            A hash code for the specified object. 
            </returns>
        </member>
        <member name="T:Engage.Logging.EventNotifier">
            <summary>
            Summary description for EventNotifier.
            </summary>
        </member>
        <member name="T:Engage.Logging.EventNotificationSectionHandler">
            <summary>
            Summary description for EventNotificationSectionHandler.
            </summary>
        </member>
        <member name="T:Engage.Logging.FileNotifier">
            <summary>
            Summary description for FileNotifier.
            </summary>
        </member>
        <member name="T:Engage.Logging.FowardOnlyEventNotifier">
            <summary>
            Summary description for FowardOnlyEventNotifier.
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ItemPagingState">
            <summary>
            Represents the state of the paging of a list of items
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ItemPagingState.currentPage">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ItemPagingState.CurrentPage"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ItemPagingState.totalItems">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ItemPagingState.TotalItems"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ItemPagingState.itemsPerPage">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ItemPagingState.ItemsPerPage"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> class.
            </summary>
            <param name="currentPage">The current page (1-based).</param>
            <param name="totalItems">The total number of items.</param>
            <param name="itemsPerPage">The number of items per page.</param>
            <exception cref="T:System.ArgumentException"><paramref name="totalItems"/> must be a non-negative number</exception>
            <exception cref="T:System.ArgumentException"><paramref name="itemsPerPage"/> must be a positive number</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.Next">
            <summary>
            Creates a <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> for the next page, otherwise this page.
            </summary>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> set to the next page, if there is one, otherwise this page.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.Previous">
            <summary>
            Creates a <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> for the previous page, otherwise this page.
            </summary>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> set to the previous page, if there is one, otherwise this page.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ItemPagingState.SetPage(System.Int32)">
            <summary>
            Creates a <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> for the given page.
            </summary>
            <param name="currentPage">The page to be set as current for the new instance.</param>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.ItemPagingState"/> set to the given page</returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.CurrentPage">
            <summary>
            Gets the current page (1-based).
            </summary>
            <value>The current page.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.TotalItems">
            <summary>
            Gets the total number of items.
            </summary>
            <value>The total number of items.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.ItemsPerPage">
            <summary>
            Gets the number of items per page.
            </summary>
            <value>The number of items per page.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ItemPagingState.TotalPages">
            <summary>
            Gets the total number of pages.
            </summary>
            <value>The total number of pages.</value>
        </member>
        <member name="T:Engage.Pair`2">
            <summary>
            A generic structure holding two related values.
            </summary>
            <typeparam name="TFirst">The type of the first value.</typeparam>
            <typeparam name="TSecond">The type of the second value.</typeparam>
        </member>
        <member name="F:Engage.Pair`2.first">
            <summary>
            Backing field for <see cref="P:Engage.Pair`2.First"/>
            </summary>
        </member>
        <member name="F:Engage.Pair`2.second">
            <summary>
            Backing field for <see cref="P:Engage.Pair`2.Second"/>
            </summary>
        </member>
        <member name="M:Engage.Pair`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Pair`2"/> struct.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Engage.Pair`2.op_Equality(Engage.Pair{`0,`1},Engage.Pair{`0,`1})">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="thisPair">This pair.</param>
            <param name="otherPair">The other pair.</param>
            <returns><c>true</c> if <paramref name="thisPair"/> == <paramref name="otherPair"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Pair`2.op_Inequality(Engage.Pair{`0,`1},Engage.Pair{`0,`1})">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="thisPair">This pair.</param>
            <param name="otherPair">The other pair.</param>
            <returns><c>true</c> if <paramref name="thisPair"/> != <paramref name="otherPair"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Pair`2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Engage.Pair`2.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Engage.Pair`2.First">
            <summary>
            Gets or sets the first value.
            </summary>
            <value>The first value.</value>
        </member>
        <member name="P:Engage.Pair`2.Second">
            <summary>
            Gets or sets the second value.
            </summary>
            <value>The second value.</value>
        </member>
        <member name="T:Engage.Util.RandomExtensions">
            <summary>
            extensions to the random number generator
            </summary>
        </member>
        <member name="M:Engage.Util.RandomExtensions.NextNormal(System.Random)">
            <summary>
            Sample a normal distribution.
            </summary>
            <param name="rng">The base Random.</param>
            <returns>A random number from a normal distribution having mean 0 and standard deviation 1.</returns>
        </member>
        <member name="M:Engage.Util.RandomExtensions.NextPair(System.Random,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Generate a unique pair of numbers each from [0,max)
            </summary>
            <param name="rng">The base Random.</param>
            <param name="max">Generated values will be less than max.</param>
            <param name="a">First number.</param>
            <param name="b">Second number.</param>
        </member>
        <member name="M:Engage.Util.RandomExtensions.NextPairOrdered(System.Random,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Generate a unique pair of numbers each from [0,max)
            </summary>
            <param name="rng">The base Random.</param>
            <param name="max">Generated values will be less than max.</param>
            <param name="a">Lesser number.</param>
            <param name="b">Greater number.</param>
        </member>
        <member name="M:Engage.Util.RandomExtensions.NextMultiUnique(System.Random,System.Int32,System.Int32)">
            <summary>
            Generate count distinct random numbers in the range [0,max)
            </summary>
            <param name="rng">The base Random.</param>
            <param name="max">Generated values will be less than max.</param>
            <param name="count">quantity of random numbers to generate</param>
            <returns>sorted list of random numbers</returns>
        </member>
        <member name="M:Engage.Util.RandomExtensions.Sample``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Choose one item at random.
            </summary>
            <param name="rng">The base Random.</param>
            <param name="pop">Items to choose from.</param>
            <typeparam name="T">item type</typeparam>
            <returns>one item</returns>
        </member>
        <member name="M:Engage.Util.RandomExtensions.Sample``1(System.Random,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Choose several items at random, possibly with duplicates and omissions.
            </summary>
            <param name="rng">The base Random.</param>
            <param name="pop">Items to choose from.</param>
            <param name="count">Number of items to choose.</param>
            <typeparam name="T">item type</typeparam>
            <returns>chosen items</returns>
        </member>
        <member name="M:Engage.Util.RandomExtensions.SampleUnique``1(System.Random,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Choose several distinct items at random.
            If sample size exceeds pop size, oversample evenly.
            </summary>
            <param name="rng">The base Random.</param>
            <param name="pop">Items to choose from.</param>
            <param name="count">Number of items to choose.</param>
            <typeparam name="T">item type</typeparam>
            <returns>chosen items</returns>
        </member>
        <member name="M:Engage.Util.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
            Shuffle items in place.
            </summary>
            <param name="rng">The base Random.</param>
            <param name="items">The items.</param>
            <typeparam name="T">item type</typeparam>
        </member>
        <member name="M:Engage.Util.RandomExtensions.CopyAndShuffle``1(System.Random,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Shuffle items into a new collection.
            </summary>
            <param name="rng">The base Random.</param>
            <param name="items">The items.</param>
            <returns>A list of the same items in a random permutation.</returns>
            <typeparam name="T">item type</typeparam>
        </member>
        <member name="M:Engage.Util.RandomExtensions.Split``1(System.Random,System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Split items into several random sections.
            Some sections may be empty.
            </summary>
            <param name="rng">The base Random.</param>
            <param name="items">The items.</param>
            <param name="subsets">Number of sections to split into.</param>
            <typeparam name="T">item type</typeparam>
            <returns>Disjoint sections of items in order.</returns>
        </member>
        <member name="M:Engage.Util.RandomExtensions.GenerateWords(System.Random,System.Int32,System.String,System.String)">
            <summary>
            Generate an endless sequence of random strings of a specified length using specified character classes.
            </summary>
            <param name="rng">The base <see cref="T:System.Random"/> instance.</param>
            <param name="length">The length of each string.</param>
            <param name="characterClasses">
            The types of character to include.
            A lower case letter will include all lower case letters. Likewise for upper case and digits.
            Note that representing a class multiple times in this parameter will increase occurrence of that class.
            For example <c>"aaaaaa0"</c> will produce words with almost no digits.
            </param>
            <param name="exclusions">String containing specific characters which should not be used.</param>
            <returns>Infinite sequence of strings.</returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="length"/> is less than 1
            -- OR --
                one of the characters in <paramref name="characterClasses"/> is not a letter or digit
            -- OR --
                the <paramref name="exclusions"/> excluded all characters
            </exception>
        </member>
        <member name="M:Engage.Util.RandomExtensions.GenerateWordsImpl(System.Random,System.Int32,System.Collections.Generic.IList{System.Char})">
            <summary>
            Generate an endless sequence of random strings of a specified length using specified characters.
            </summary>
            <param name="rng">The base <see cref="T:System.Random"/> instance.</param>
            <param name="length">The length of each string.</param>
            <param name="characters">The character to include.</param>
            <returns>Infinite sequence of strings.</returns>
        </member>
        <member name="T:Engage.Util.RuntimeClass">
            <summary>
            Summary description for RuntimeClass.
            </summary>
        </member>
        <member name="T:Engage.Util.ClassType">
            <summary>
            Summary description for ClassType.
            </summary>
        </member>
        <member name="T:Engage.Entities.EntityType">
            <summary>
            Summary description for EntityType.
            </summary>
        </member>
        <member name="T:Engage.Util.ExportCSVCommand">
            <summary>
            Summary description for ExportCSVCommand.
            </summary>
        </member>
        <member name="T:Engage.Attributes.FileAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.FileAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.FileAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type ID.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Attributes.HyperLinkAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.HyperLinkAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.HyperLinkAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.HyperLinkAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Attributes.ImageAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.ImageAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.ImageAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type ID.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Lookups.InvalidLookupValueException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.IResult">
            <summary>
            Represent the individual results that may return from a call to Run on a given Job.
            </summary>
        </member>
        <member name="T:Engage.Util.ItemNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.LargeTextAttribute">
            <summary>
            Use this class for storing text larger than the 850 character limit on EntityAttribute
            This data is not searchable nor versioned using the normal mechanisms
            </summary>
        </member>
        <member name="M:Engage.Attributes.LargeTextAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.LargeTextAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="T:Engage.Util.ListViewTextSort">
            <summary>
            Provides text sorting (case sensitive)
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewTextSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewTextSort.Compare(System.Object,System.Object)">
            <summary>
            Implementation of IComparer.Compare
            </summary>
            <param name="lhs">First object to compare</param>
            <param name="rhs">Second object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="M:Engage.Util.ListViewTextSort.OnCompare(System.String,System.String)">
            <summary>
            Overridden to do type-specific comparision.
            </summary>
            <param name="lhs">First object to compare</param>
            <param name="rhs">Second object to compare</param>
            <returns>Less that zero if lhs is less than rhs. Greater than zero if lhs greater that rhs. Zero if they are equal</returns>
        </member>
        <member name="T:Engage.Util.ListViewTextCaseInsensitiveSort">
            <summary>
            Provides text sorting (case insensitive)
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewTextCaseInsensitiveSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewTextCaseInsensitiveSort.OnCompare(System.String,System.String)">
            <summary>
            Case-insensitive compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewDateSort">
            <summary>
            Provides date sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewDateSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewDateSort.OnCompare(System.String,System.String)">
            <summary>
            Date compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewIntegerSort">
            <summary>
            Provides integer sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewIntegerSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewIntegerSort.OnCompare(System.String,System.String)">
            <summary>
            Integer compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewFloatSort">
            <summary>
            Provides floating-point sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewFloatSort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewFloatSort.OnCompare(System.String,System.String)">
            <summary>
            Floating-point compare
            </summary>
        </member>
        <member name="T:Engage.Util.ListViewSortManager">
            <summary>
            Provides sorting of ListView columns 
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewSortManager.#ctor(System.Windows.Forms.ListView,System.Type[])">
            <summary>
            
            </summary>
            <param name="list">ListView that this manager will provide sorting to</param>
            <param name="comparers">Array of Types of comparers (One for each column)</param>
        </member>
        <member name="M:Engage.Util.ListViewSortManager.Sort(System.Int32)">
            <summary>
            Sorts the columns
            </summary>
            <param name="c">Column to be sorted</param>
        </member>
        <member name="T:Engage.Util.ListViewCurrencySort">
            <summary>
            Provides currency sorting
            </summary>
        </member>
        <member name="M:Engage.Util.ListViewCurrencySort.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="column">Column to be sorted</param>
            <param name="ascending">true, if ascending order, false otherwise</param>
        </member>
        <member name="M:Engage.Util.ListViewCurrencySort.OnCompare(System.String,System.String)">
            <summary>
            Currency compare
            </summary>
        </member>
        <member name="T:Engage.Attributes.LookupAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.LookupAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.IsAttributeValueValid(System.String)">
            <summary>
            Determines whether [is attribute value valid] [the specified s].
            </summary>
            <param name="s">The s.</param>
            <returns>
            	<c>true</c> if [is attribute value valid] [the specified s]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.GetLookupItems">
            <summary>
            Returns all the valid values, plus an empty value, for
            LookupValues for this LookupAttribute's LookupTypeID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.GetLookupTypes">
            <summary>
            Returns all the Lookup types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.ReloadLookups">
            <summary>
            Reloads the lookups.
            </summary>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.GetLookupValues(System.Int32)">
            <summary>
            Returns all the LookupValues for the given lookupTypeId
            </summary>
            <param name="lookupTypeId">The lookup type ID.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Attributes.LookupAttribute.ReloadLookupValues">
            <summary>
            Reloads the lookup values.
            </summary>
        </member>
        <member name="P:Engage.Attributes.LookupAttribute.AttributeValue">
            <summary>
            Gets or sets the attribute value.
            </summary>
            <value>The attribute value.</value>
        </member>
        <member name="P:Engage.Attributes.LookupAttribute.MaxLength">
            <summary>
            Gets the length of the max.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:Engage.Attributes.LookupAttribute.LookupCachingStrategyClass">
            <summary>
            Gets or sets the lookup caching strategy class.
            </summary>
            <value>The lookup caching strategy class.</value>
        </member>
        <member name="T:Engage.Affiliations.MissingAffiliationException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.MsConnectionString">
            <summary>
            Summary description for ConnectionString.
            
            user id=sa;password=secret;database=coremktg;data source=etg05;
            </summary>
        </member>
        <member name="T:Engage.Util.NullEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.NullEntityAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.NumericAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.NumericAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.NumericAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.NumericAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Affiliations.ParentTypeNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Attributes.PhoneNumberAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.PhoneNumberAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.PhoneNumberAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.PhoneNumberAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Util.QueryStringBuilder">
            <summary>
            Summary description for QueryStringBuilder.
            </summary>
        </member>
        <member name="T:Engage.Attributes.RequiredAttributeMissingException">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Util.SaveMode">
            <summary>
            Summary description for SaveMode.
            </summary>
        </member>
        <member name="T:Engage.Util.SortableList">
            <summary>
            The SortableList allows to maintain a list sorted as long as needed.
            If no IComparer interface has been provided at construction, then the list expects the Objects to implement IComparer.
            If the list is not sorted it behaves like an ordinary list.
            When sorted, the list's "Add" method will put new objects at the right place.
            As well the "Contains" and "IndexOf" methods will perform a binary search.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor">
            <summary>
            Default constructor.
            Since no IComparer is provided here, added objects must implement the IComparer interface.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor(System.Int32)">
            <summary>
            Constructor.
            Since no IComparer is provided, added objects must implement the IComparer interface.
            </summary>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor(System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
        </member>
        <member name="M:Engage.Util.SortableList.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:Engage.Util.SortableList.Add(System.Object)">
            <summary>
            IList implementation.
            If the <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be added at the end of the list.
            </summary>
            <param name="O">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.Contains(System.Object)">
            <summary>
            IList implementation.
            Search for a specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:Engage.Util.SortableList.Equals(System.Object)">entity.Equals</see> implementation is used.
            </summary>
            <param name="O">The object to look for</param>
            <returns>true if the object is in the list, otherwise false.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object)">
            <summary>
            IList implementation.
            Returns the index of the specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:Engage.Util.SortableList.Equals(System.Object)">entity.Equals</see> implementation of objects is used.
            </summary>
            <param name="O">The object to locate.</param>
            <returns>
            If the object has been found, a positive integer corresponding to its position.
            If the objects has not been found, a negative integer which is the bitwise complement of the index of the next element.
            </returns>
        </member>
        <member name="M:Engage.Util.SortableList.Clear">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.Insert(System.Int32,System.Object)">
            <summary>
            IList implementation.
            Inserts an objects at a specified index.
            Cannot be used if the list has its KeepSorted property set to true.
            </summary>
            <param name="Index">The index before which the object must be added.</param>
            <param name="O">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:Engage.Util.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.Remove(System.Object)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Value">The object whose value must be removed if found in the list.</param>
        </member>
        <member name="M:Engage.Util.SortableList.RemoveAt(System.Int32)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Index">Index of object to remove.</param>
        </member>
        <member name="M:Engage.Util.SortableList.CopyTo(System.Array,System.Int32)">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Engage.Util.SortableList.GetEnumerator">
            <summary>
            IList.IEnumerable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Enumerator on the list.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.Clone">
            <summary>
            ICloneable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object,System.Int32)">
            <summary>
            Idem IndexOf(object), but starting at a specified position in the list
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object,Engage.Util.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOf(System.Object,System.Int32,Engage.Util.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a start index and a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.SortableList.ToString">
            <summary>
            entity.ToString() override.
            Build a string to represent the list.
            </summary>
            <returns>The string refecting the list.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.Equals(System.Object)">
            <summary>
            entity.Equals() override.
            </summary>
            <returns>true if object is equal to this, otherwise false.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.GetHashCode">
            <summary>
            entity.GetHashCode() override.
            </summary>
            <returns>Hash code for this.</returns>
        </member>
        <member name="M:Engage.Util.SortableList.Sort">
            <summary>
            Sorts the elements in the list using <see cref="M:System.Collections.ArrayList.Sort">ArrayList.Sort</see>.
            Does nothing if the list is already sorted.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.AddRange(System.Collections.ICollection)">
            <summary>
            If the <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be appended to the list.
            </summary>
            <param name="C">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts a collection of objects at a specified index.
            Should not be used if the list is the KeepSorted property is set to true.
            </summary>
            <param name="Index">The index before which the objects must be added.</param>
            <param name="C">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use objects's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:Engage.Util.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:Engage.Util.SortableList.LimitNbOccurrences(System.Object,System.Int32)">
            <summary>
            Limits the number of occurrences of a specified value.
            Same values are equals according to the Equals() method of objects in the list.
            The first occurrences encountered are kept.
            </summary>
            <param name="Value">Value whose occurrences number must be limited.</param>
            <param name="NbValuesToKeep">Number of occurrences to keep</param>
        </member>
        <member name="M:Engage.Util.SortableList.RemoveDuplicates">
            <summary>
            Removes all duplicates in the list.
            Each value encountered will have only one representant.
            </summary>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOfMin">
            <summary>
            Returns the object of the list whose value is minimum
            </summary>
            <returns>The minimum object in the list</returns>
        </member>
        <member name="M:Engage.Util.SortableList.IndexOfMax">
            <summary>
            Returns the object of the list whose value is maximum
            </summary>
            <returns>The maximum object in the list</returns>
        </member>
        <member name="P:Engage.Util.SortableList.IsSorted">
            <summary>
            'Get only' property that indicates if the list is sorted.
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.KeepSorted">
            <summary>
            Get : Indicates if the list must be kept sorted from now on.
            Set : Tells the list if it must stay sorted or not. Impossible to set to true if the list is not sorted.
            <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see>==true implies that <see cref="P:Engage.Util.SortableList.IsSorted">IsSorted</see>==true
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot be set to true if the list is not sorted yet.</exception>
        </member>
        <member name="P:Engage.Util.SortableList.AddDuplicates">
            <summary>
            If set to true, it will not be possible to add an object to the list if its value is already in the list.
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.Item(System.Int32)">
            <summary>
            IList implementation.
            Gets - or sets - object's value at a specified index.
            The set operation is impossible if the <see cref="P:Engage.Util.SortableList.KeepSorted">KeepSorted</see> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">[] operator cannot be used to set a value if KeepSorted property is set to true.</exception>
        </member>
        <member name="P:Engage.Util.SortableList.IsFixedSize">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.IsReadOnly">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.Count">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.IsSynchronized">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.SyncRoot">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Engage.Util.SortableList.Capacity">
            <summary>
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="T:Engage.Util.SortableList.Equality">
            <summary>
            Defines an equality for two objects
            </summary>
        </member>
        <member name="T:Engage.Util.StrictKeyEqualityComparer`2">
            <summary>
            Defines an implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> which selects a key from the object based on a passed in delegate.
            Use <see cref="T:Engage.Util.KeyEqualityComparer`2"/> if <typeparamref name="TKey"/> doesn't implement <see cref="T:System.IEquatable`1"/>
            </summary>
            <typeparam name="T">The type of the object being compared</typeparam>
            <typeparam name="TKey">The type of the key by which <typeparamref name="T"/> should be compared.</typeparam>
            <remarks>from <see href="http://stackoverflow.com/questions/98033/wrap-a-delegate-in-an-iequalitycomparer/3719802#3719802"/></remarks>
        </member>
        <member name="M:Engage.Util.StrictKeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Util.StrictKeyEqualityComparer`2"/> class.
            </summary>
            <param name="keyExtractor">A function that returns the key by which the object should be compared.</param>
        </member>
        <member name="M:Engage.Util.StrictKeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns><c>true</c> if the specified objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Engage.Util.TextBoxTraceListener">
            <summary>
            Summary description for DebugTracer.
            </summary>
        </member>
        <member name="T:Engage.Attributes.TimeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.TimeAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.TimeAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.TimeAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.ThreadSafeDictionary`2">
            <summary>
            An <see cref="T:System.Collections.Generic.IDictionary`2"/> that is thread safe (uses a lock when altering the collection).
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="F:Engage.ThreadSafeDictionary`2.dictionary">
            <summary>
            The backing <see cref="T:System.Collections.Generic.Dictionary`2"/> which implements all of the common functionality of this <see cref="T:Engage.ThreadSafeDictionary`2"/>.
            </summary>
        </member>
        <member name="F:Engage.ThreadSafeDictionary`2.syncRoot">
            <summary>
            An <see cref="T:System.Object"/> to lock on when performing operations that aren't otherwise thread-safe
            </summary>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type. 
            </summary>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type. 
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Engage.ThreadSafeDictionary`2"/> can contain.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. 
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. 
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Engage.ThreadSafeDictionary`2"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the default equality comparer for the key type. 
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Engage.ThreadSafeDictionary`2"/>.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.ThreadSafeDictionary`2"/> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. 
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Engage.ThreadSafeDictionary`2"/>.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is null.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="M:Engage.ThreadSafeDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <exception cref="T:System.NotImplementedException"><c>NotImplementedException</c>.</exception>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Engage.ThreadSafeDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key is not found.</exception>
        </member>
        <member name="T:Engage.Util.TimeCycle">
            <summary>
            This class represents a time period
            </summary>
        </member>
        <member name="M:Engage.Util.TimeCycle.#ctor">
            <summary>
            Creates a <code>TimeCycle</code> that is always active
            </summary>
        </member>
        <member name="M:Engage.Util.TimeCycle.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a <code>TimeCycle</code> that is active between the startHour and stopHour
            </summary>
            <param name="startHour">Hour that this <code>TimeCycle</code> becomes active (24 hour time)</param>
            <param name="stopHour">Hour that this <code>TimeCycle</code> becomes inactive (24 hour time)</param>
        </member>
        <member name="M:Engage.Util.TimeCycle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <code>TimeCycle</code> that is active between the startHour/startMinute and stopHour/stopMinute
            </summary>
            <param name="startHour">Hour that this <code>TimeCycle</code> becomes active (24 hour time)</param>
            <param name="startMinute">Minute that this <code>TimeCycle</code> becomes active for the startHour</param>
            <param name="stopHour">Hour that this <code>TimeCycle</code> becomes inactive (24 hour time)</param>
            <param name="stopMinute">Minute that this <code>TimeCycle</code> becomes inactive for the stopHour</param>
        </member>
        <member name="M:Engage.Util.TimeCycle.GetSleepTime">
            <summary>
            This method calculates the number of milliseconds to sleep if during an inactive
            period. If during an active period, 0 is returned.
            </summary>
            <returns>The number of milliseconds to sleep</returns>
        </member>
        <member name="M:Engage.Util.TimeCycle.GetActiveCycleStartTime">
            <summary>
            Returns a <code>string</code> representing the startTime of this <code>TimeCycle</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.TimeCycle.GetActiveCycleStopTime">
            <summary>
            Returns a <code>string</code> representing the stopTime of this <code>TimeCycle</code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.TimeCycle.Update">
            <summary>
            Private method that gets the current time and based on the start and stop times adjusts
            the times to test if this <code>TimeCycle</code> is active.
            </summary>
        </member>
        <member name="M:Engage.Util.TimeCycle.ToString">
            <summary>
            Returns a <code>string</code> representation of the <code>TimeCycle</code> object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engage.Util.TimeCycle.Active">
            <summary>
            This method returns a <code>bool</code> to indicate if this <code>TimeCycle</code>
            is currently active.
            </summary>
        </member>
        <member name="P:Engage.Util.TimeCycle.SleepDayEnabled">
            <summary>
            Returns a <code>bool</code> indicating the the SleepDay function is enabled
            </summary>
        </member>
        <member name="P:Engage.Util.TimeCycle.SleepDay">
            <summary>
            Returns the <code>DayOfWeek Enum</code> that this <code>TimeCycle</code> sleeps, if enabled
            </summary>
        </member>
        <member name="T:Engage.TimeZoneInfo">
            <summary>
            Represents a time zone and provides access to all system time zones.
            </summary>
            <remarks>
            Author: Arman Ghazanchyan
            Created date: 09/04/2007
            Last updated: 09/17/2007
            From: http://www.codeproject.com/KB/vb/TimeZoneInfo.aspx
            </remarks>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="F:Engage.TimeZoneInfo.displayName">
            <summary>
            Backing field for <see cref="P:Engage.TimeZoneInfo.DisplayName"/>.
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.id">
            <summary>
            Backing field for <see cref="P:Engage.TimeZoneInfo.Id"/>.
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.tzi">
            <summary>
            Backing <see cref="T:Engage.TimeZoneInfo.TimeZoneInformation"/> for this instance.
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.TimeZoneInfo"/> class.
            </summary>
            <param name="standardName">A time zone standard name.</param>
        </member>
        <member name="M:Engage.TimeZoneInfo.#ctor">
            <summary>
            Prevents a default instance of the TimeZoneInfo class from being created.
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetTimeZones">
            <summary>
            Gets an array of all time zones on the system.
            </summary>
            <returns>An array of all time zones on the system.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.Sort(System.Collections.Generic.List{Engage.TimeZoneInfo})">
            <summary>
            Sorts the elements in a list(Of TimeZoneInfo) 
            object based on standard UTC offset or display name.
            </summary>
            <param name="timeZones">A time zone list to sort.</param>
        </member>
        <member name="M:Engage.TimeZoneInfo.Sort(Engage.TimeZoneInfo[])">
            <summary>
            Sorts the elements in an entire one-dimensional TimeZoneInfo 
            array based on standard UTC offset or display name.
            </summary>
            <param name="timeZones">A time zone array to sort.</param>
        </member>
        <member name="M:Engage.TimeZoneInfo.FromStandardName(System.String)">
            <summary>
            Gets a TimeZoneInfo.Object from standard name.
            </summary>
            <param name="standardName">A time zone standard name.</param>
            <returns>A TimeZoneInfo instance filled with the information about the time zone with the given name</returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.FromId(System.String)">
            <summary>
            Gets a TimeZoneInfo.Object from Id.
            </summary>
            <param name="id">A time zone id that corresponds
            to the windows registry time zone key.</param>
            <returns>A TimeZoneInfo instance filled with the information about the time zone with the Id</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.ArgumentException">Unknown time zone.</exception>
            <exception cref="T:System.ArgumentNullException"><c>id</c> is null.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetDaylightChanges(System.Int32)">
            <summary>
            Gets the daylight saving time for a particular year.
            </summary>
            <param name="year">The year to which the daylight
            saving time period applies.</param>
            <returns>The daylight saving time for a particular year</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.InvalidOperationException">Unknown time zone.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.IsDaylightSavingTime">
            <summary>
            Returns a value indicating whether this time
            zone is within a daylight saving time period.
            </summary>
            <returns>
            <c>true</c> if this time zone is within a daylight saving time period; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.Refresh">
            <summary>
            Refreshes the information of the time zone object.
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.ToString">
            <summary>
            Returns a System.String that represents the current TimeZoneInfo object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object
            is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare
            with the current System.Object.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.Equals(Engage.TimeZoneInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.Compare(Engage.TimeZoneInfo,Engage.TimeZoneInfo)">
            <summary>
            Compares two specified TimeZoneInfo.Objects
            based on standard UTC offset or display name.
            </summary>
            <param name="x">The first TimeZoneInfo.Object.</param>
            <param name="y">The second TimeZoneInfo.Object.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Engage.TimeZoneInfo.CreateDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates and returns a date and time object.
            </summary>
            <param name="year">The year of the date.</param>
            <param name="month">The month of the date.</param>
            <param name="day">The week day in the month.</param>
            <param name="dayOfWeek">The day of the week.</param>
            <param name="hour">The hour of the date.</param>
            <param name="minute">The minute of the date.</param>
            <param name="second">The seconds of the date.</param>
            <param name="milliseconds">The milliseconds of the date.</param>
            <returns>A date and time object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Day</c> is out of range.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>DayOfWeek</c> is out of range.</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetStartDate(Engage.TimeZoneInfo.TimeZoneInformation,System.Int32)">
            <summary>
            Gets the starting daylight saving date and time for specified time zone.
            </summary>
            <param name="timeZoneInfo">The time fone info.</param>
            <param name="year">The year whose daylight saving time information is to be retrieved.</param>
            <returns>The starting daylight saving date and time for specified time zone</returns>
            <exception cref="T:System.ArgumentException">timeZoneInfo.DaylightDate.Month must not be 0</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.GetEndDate(Engage.TimeZoneInfo.TimeZoneInformation,System.Int32)">
            <summary>
            Gets the end date of the daylight saving time for specified time zone.
            </summary>
            <param name="timeZoneInfo">The time zone info.</param>
            <param name="year">The year whose daylight saving time information is to be retrieved.</param>
            <returns>The end date of the daylight saving time for specified time zone</returns>
            <exception cref="T:System.ArgumentException">timeZoneInfo.StandardDate.Month must not be 0</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.SetValues">
            <summary>
            Sets the time zone object's information.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.InvalidOperationException">Unknown time zone.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="M:Engage.TimeZoneInfo.SetValues(System.String)">
            <summary>
            Sets the time zone object's information.
            </summary>
            <param name="standardName">A time zone standard name.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Cannot find the windows registry key (Time Zone).</exception>
            <exception cref="T:System.ArgumentException">Unknown time zone.</exception>
            <exception cref="T:System.ArgumentNullException"><c>StandardName</c> is null.</exception>
            <exception cref="T:System.Security.Permissions.SecurityPermission">The user does not have permissions required to access the Time Zones registry key.</exception>
            <permission cref="T:System.Security.Permissions.RegistryPermission">for the ability to read the specified registry key. Associated enumeration: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/></permission>
        </member>
        <member name="P:Engage.TimeZoneInfo.CurrentTimeZone">
            <summary>
            Gets the current time zone for this computer system.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.DisplayName">
            <summary>
            Gets the display name of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.DaylightName">
            <summary>
            Gets the daylight saving name of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.StandardName">
            <summary>
            Gets the standard name of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.CurrentTime">
            <summary>
            Gets the current date and time of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.CurrentUtcOffset">
            <summary>
            Gets the current UTC (Coordinated Universal Time) offset of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.StandardUtcOffset">
            <summary>
            Gets the standard UTC (Coordinated Universal Time) offset of the time zone.
            </summary>
        </member>
        <member name="P:Engage.TimeZoneInfo.Id">
            <summary>
            Gets the id of the time zone.
            </summary>
        </member>
        <member name="T:Engage.TimeZoneInfo.SYSTEMTIME">
            <summary>
            A time structure
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Year">
            <summary>
            The year of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Month">
            <summary>
            The month of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.DayOfWeek">
            <summary>
            The day of the week of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Day">
            <summary>
            The day of the month of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Hour">
            <summary>
            The hour of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Minute">
            <summary>
            The minute of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Second">
            <summary>
            The second of this instance
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.SYSTEMTIME.Milliseconds">
            <summary>
            The millisecond of this instance
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.SYSTEMTIME.SetInfo(System.Byte[])">
            <summary>
            Sets the member values of the time structure.
            </summary>
            <param name="info">A byte array that contains the information of a time.</param>
            <exception cref="T:System.ArgumentException">Information size is incorrect</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.SYSTEMTIME.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object
            is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare
            with the current System.Object.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="T:Engage.TimeZoneInfo.TimeZoneInformation">
            <summary>
            A structure representing time zone information
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.Bias">
            <summary>
            The difference from UTC for this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardName">
            <summary>
            The name of this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardDate">
            <summary>
            The standard date for this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardBias">
            <summary>
            The difference from UTC of <see cref="F:Engage.TimeZoneInfo.TimeZoneInformation.StandardDate"/>
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightName">
            <summary>
            The name of the time zone in Daylight Saving Time
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightDate">
            <summary>
            The daylight saving date for this time zone
            </summary>
        </member>
        <member name="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightBias">
            <summary>
            The difference from UTC of <see cref="F:Engage.TimeZoneInfo.TimeZoneInformation.DaylightDate"/>
            </summary>
        </member>
        <member name="M:Engage.TimeZoneInfo.TimeZoneInformation.SetBytes(System.Byte[])">
            <summary>
            Sets the member values of bias, StandardBias, 
            DaylightBias, StandardDate, DaylightDate of the structure.
            </summary>
            <param name="info">A byte array that contains the 
            information of the Tzi windows registry key.</param>
            <exception cref="T:System.ArgumentException">Information size is incorrect</exception>
        </member>
        <member name="M:Engage.TimeZoneInfo.TimeZoneInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object
            is equal to the current System.Object.
            </summary>
            <param name="obj">The System.Object to compare
            with the current System.Object.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="T:Engage.Util.UnorderedIntPair">
            <summary>An immutable pair of integers with no preserved ordering.</summary>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.UnorderedIntPair"/> class.</summary>
            <param name="a">A value.</param>
            <param name="b">Another value.</param>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.#ctor">
            <summary>Prevents a default instance of the <see cref="T:Engage.Util.UnorderedIntPair"/> class from being created.</summary>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.Besides(System.Int32)">
            <summary>Get the "other" value from this pair.</summary>
            <param name="x">The value _not_ to get.</param>
            <returns>The value paired with the given value.</returns>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.Contains(System.Int32)">
            <summary>Test whether a value belongs to this pair.</summary>
            <param name="x">The value.</param>
            <returns><c>true</c> if the given value is in this pair.</returns>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.Intersects(Engage.Util.UnorderedIntPair)">
            <summary>Determine whether this and another pair share one or both values.</summary>
            <param name="other">The other pair.</param>
            <returns><c>true</c> if the two pairs share at least one value.</returns>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.Intersects(System.Collections.Generic.HashSet{System.Int32})">
            <summary>Determine whether this and a set share any values.</summary>
            <param name="set">The set of values to check against.</param>
            <returns><c>true</c> if either of this pair's values are in the set.</returns>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.Equals(Engage.Util.UnorderedIntPair)">
            <summary>Determine whether this and another pair are equal.</summary>
            <param name="other">The other pair.</param>
            <returns><c>true</c> if <c>this</c> is identical to other.</returns>
        </member>
        <member name="M:Engage.Util.UnorderedIntPair.GetHashCode">
            <summary>Generate a hash code.</summary>
            <returns>A value likely to be unique to this pair of integers.</returns>
        </member>
        <member name="P:Engage.Util.UnorderedIntPair.LesserValue">
            <summary>Gets the lesser of the two values.</summary>
        </member>
        <member name="P:Engage.Util.UnorderedIntPair.GreaterValue">
            <summary>Gets the greater of the two values.</summary>
        </member>
        <member name="P:Engage.Util.UnorderedIntPair.ValueDifference">
            <summary>Gets the positive difference between the two values.</summary>
        </member>
        <member name="P:Engage.Util.UnorderedIntPair.Values">
            <summary>Gets the two values as an enumerable sequence.</summary>
        </member>
        <member name="T:Engage.Util.IntPairSet">
            <summary>Keep track of the number of pairings of numbers.</summary>
        </member>
        <member name="F:Engage.Util.IntPairSet.tallies">
            <summary>
            The pairing tallies, keyed by lesser value of pair:
            tallies[lesser][greater] = number of such pairings in the set
            </summary>
            <remarks>
            This structure will be pruned as needed.
            There should never be any empty child dictionaries.
            </remarks>
        </member>
        <member name="F:Engage.Util.IntPairSet.flatTallies">
            <summary>
            The tallies, keyed by all distinct pair members.
            flatTallies[x] = number of pairs in the set which include x
            </summary>
            <remarks>
            This structure will be pruned as needed.
            Its key collection may be taken as the union of all pairs in the set.
            </remarks>
        </member>
        <member name="M:Engage.Util.IntPairSet.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.IntPairSet"/> class.</summary>
        </member>
        <member name="M:Engage.Util.IntPairSet.#ctor(Engage.Util.UnorderedIntPair)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.IntPairSet"/> class.</summary>
            <param name="single">A single pair to populate the set with.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.#ctor(Engage.Util.IntPairSet)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.IntPairSet"/> class.</summary>
            <param name="src">The set to copy.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.#ctor(System.Collections.Generic.IEnumerable{Engage.Util.UnorderedIntPair})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Util.IntPairSet"/> class.</summary>
            <param name="pairs">The pairs to load initially.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.Add(Engage.Util.UnorderedIntPair)">
            <summary>Add a pairing to the set.</summary>
            <param name="pair">The pair to add.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.Except(System.Collections.Generic.ICollection{System.Int32})">
            <summary>Create a new pair set which duplicates this one except for certain values.</summary>
            <param name="values">The values to forbid appearing in the copy.</param>
            <returns>A new, possibly smaller <see cref="T:Engage.Util.IntPairSet"/>.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.Remove(Engage.Util.UnorderedIntPair)">
            <summary>Remove a pair from the set.</summary>
            <param name="pair">The pair to remove.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.RemoveAll(System.Int32)">
            <summary>Remove any and all pairings including a certain value.</summary>
            <param name="x">The value to find in pairings.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.RemoveAllCombinations(System.Collections.Generic.ICollection{System.Int32})">
            <summary>Remove all pairs from the set which have both values in a given set of values.</summary>
            <param name="values">The values to test pairs against.</param>
        </member>
        <member name="M:Engage.Util.IntPairSet.ValueMapped(Engage.Util.BijectiveMap)">
            <summary>Transform this set forward through a one-to-one mapping of values.</summary>
            <param name="valueMap">The value translation map.</param>
            <returns>A copy of this set with all pair members translated.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.Any">
            <summary>Determine whether any pairs are in the set.</summary>
            <returns><c>true</c> if there is at least one pair.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.Count">
            <summary>Get the total number of pairings in the set.</summary>
            <returns>The number of pairings.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.Count(Engage.Util.UnorderedIntPair)">
            <summary>Get the quantity of a pair in the set.</summary>
            <param name="pair">The pair.</param>
            <returns>The number of such pairs in the set.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.CountIncluding(System.Int32)">
            <summary>Get the count of all pairs which include a certain value.</summary>
            <param name="x">The value to have appeared in each pair.</param>
            <returns>The number of all pairs where x is included.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.ValuesWithCount(System.Int32)">
            <summary>Get any and all single values which occur a given number of times.</summary>
            <param name="count">The count to match.</param>
            <returns>A sequence of values.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.MaskedCounts(Engage.Util.IntPairSet)">
            <summary>Get the counts of certain pairs in this set which also appear in another set.</summary>
            <param name="mask">Only provide counts for pairs also appearing in this set.</param>
            <returns>A sequence of tallies of certain pairs in this set.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.Intersects(Engage.Util.UnorderedIntPair)">
            <summary>Determine whether this and a pair share any values.</summary>
            <param name="pair">The pair to check against.</param>
            <returns><c>true</c> if either of the pair's values are in this set.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.Includes(System.Int32)">
            <summary>Determine whether a certain value is in any pair in the set.</summary>
            <param name="x">The value to search for.</param>
            <returns><c>true</c> if at least one pair includes the value.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.PartnersOf(System.Int32)">
            <summary>Get all values which have at least one pairing with a certain value.</summary>
            <param name="x">The value to get partners for.</param>
            <returns>A sequence of all values paired with x.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.GetAllPartners">
            <summary>Get a list of all values paired with each value.</summary>
            <returns>A mapping of each value to a list of its paired values.</returns>
        </member>
        <member name="M:Engage.Util.IntPairSet.GetInsertPairingList(System.Int32)">
            <summary>
            For a given "lesser" value, get the existing set of its partners;
            create one if necessary.
            </summary>
            <param name="lesserValue">The value.</param>
            <returns>The mappings of the value's pairings to tallies.</returns>
        </member>
        <member name="P:Engage.Util.IntPairSet.Superset">
            <summary>Gets all the distinct values among all pairs.</summary>
        </member>
        <member name="P:Engage.Util.IntPairSet.Pairs">
            <summary>Gets all the pairs including duplicates.</summary>
        </member>
        <member name="P:Engage.Util.IntPairSet.MaxValueDifference">
            <summary>Gets the maximum difference in values among all pairs in the set.</summary>
        </member>
        <member name="P:Engage.Util.IntPairSet.MinValueOccurrence">
            <summary>Gets the number of occurrences of the rarest single value(s).</summary>
        </member>
        <member name="P:Engage.Util.IntPairSet.MaxValueOccurrence">
            <summary>Gets the number of occurrences of the most numerous single value(s).</summary>
        </member>
        <member name="M:Engage.Util.Utility.IsValidDomain(System.String)">
            <summary>
            This validates the domain portion of a URL to exists. i.e. www.google.com.
            </summary>
            <param name="domainName"></param>
            <returns></returns>
            <remarks>Do not include http:// as part of domain name. This will return false.</remarks>
        </member>
        <member name="M:Engage.Util.Utility.Encrypt(System.String)">
            <summary>
            Encrypts the passed string
            </summary>
            <param name="s">The string you want encrypted</param>
            <returns>An Encrypted String</returns>
        </member>
        <member name="M:Engage.Util.Utility.Decrypt(System.String)">
            <summary>
            Decrypts the passed string
            </summary>
            <param name="d">The string you want decrypted</param>
            <returns>A decrypted String</returns>
        </member>
        <member name="M:Engage.Util.Utility.GetHTMLFromUrl(System.String)">
            <summary>
            This method will return the HTML from a URL to a web page.  This works
            for html pages, .aspx pages, and asp pages, (and probaby any other server side page that renders html content..)
            </summary>
            <param name="url"></param>
            <returns>string - the html</returns>
        </member>
        <member name="M:Engage.Util.Utility.ChangeRole(System.Int32,Engage.Entities.IEntityContainer,Engage.Entities.IEntityContainer,System.Int32,Engage.Authentication.User,Engage.Util.EngageSessionBase)">
            <summary>
            This method is used to change the role type for "Role" objects. It uses the AssignRequiredAffiliations
            method to get a list of parents in the tree to remove and reassign using the new object typeid.
            </summary>
            <param name="moduleTypeID"></param>
            <param name="parent"></param>
            <param name="role"></param>
            <param name="newRoleTypeID"></param>
            <param name="user"></param>
            <param name="sessionBase"></param>
            <example>ChangeRole(72, account, physician, 123, sessionBase)</example>
        </member>
        <member name="M:Engage.Util.Utility.MergeResultsLogicalAnd(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="source">An ArrayList of IDictionary objects</param>
            <returns>An IDictionary object containing the results of logically AND'ing the keys </returns>
        </member>
        <member name="M:Engage.Util.Utility.MergeResultsLogicalOr(System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="source">An ArrayList of IDictionary objects</param>
            <returns>An IDictionary object containing the results of logically OR'ing the keys </returns>
        </member>
        <member name="M:Engage.Util.Utility.RemoveHtmlMarkup(System.String,System.Boolean)">
            <summary>
            Removes entites and tags from <paramref name="s"/>
            </summary>
            <param name="s"></param>
            <param name="retainSpaces"></param>
            <returns></returns>
        </member>
        <member name="M:Engage.Util.Utility.RemoveHtmlEntities(System.String,System.Boolean)">
            <summary>
            Removes any HTML entities (<c>&amp;nbsp;</c> <c>&amp;lt;</c> etc)
            </summary>
            <param name="s">string from which to remove HTML entities</param>
            <param name="retainSpaces">leave spaces as spaces or remove</param>
            <returns>string with any HTML entities removed</returns>
        </member>
        <member name="M:Engage.Util.Utility.RemoveHtmlTags(System.String,System.Boolean)">
            <summary>
            Removes Html Tags ("<c>&lt;....&gt;</c>")
            </summary>
            <param name="s">String to remove HTML entities</param>
            <param name="retainSpaces">leave spaces as spaces or remove</param>
            <returns>string with any Html tags removed</returns>
        </member>
        <member name="T:Engage.Attributes.ZipCodeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Engage.Attributes.ZipCodeAttribute.#ctor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Attributes.ZipCodeAttribute"/> class.
            </summary>
            <param name="required">if set to <c>true</c> [required].</param>
            <param name="objectTypeId">The object type id.</param>
            <param name="lookupTypeId">The lookup type id.</param>
        </member>
        <member name="M:Engage.Attributes.ZipCodeAttribute.IsValid">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Engage.Utility">
            <summary>A collection of static utility methods and fields that are generally useful.</summary>
        </member>
        <member name="F:Engage.Utility.EmailRegEx">
            <summary>A regular expression which will match an email address</summary>
            <remarks>
            Because this needs to work in JavaScript and .NET, we can't just set <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>, we have to manually include both cases for each letter
            <para>Basic Explanation: Any valid characters, @ symbol, any valid characters, . (period), then either two letters or one of the other 25 top-level-domains</para>
            <para>
             Beginning of line or string
             Any character in this class: [a-zA-Z0-9._%\-+'], one or more repetitions
             @
             Match expression but don't capture it. [[a-zA-Z0-9\-]+\.], one or more repetitions
                 [a-zA-Z0-9\-]+\.
                     Any character in this class: [a-zA-Z0-9\-], one or more repetitions
                     Literal .
             Match expression but don't capture it. [[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Ii][Ll]|[Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt]]
                 Select from 26 alternatives
                     Any character in this class: [a-zA-Z], exactly 2 repetitions
                     [Aa][Ee][Rr][Oo]
                         Any character in this class: [Aa]
                         Any character in this class: [Ee]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Aa][Rr][Pp][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Rr]
                         Any character in this class: [Pp]
                         Any character in this class: [Aa]
                     [Aa][Ss][Ii][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Ss]
                         Any character in this class: [Ii]
                         Any character in this class: [Aa]
                     [Bb][Ii][Zz]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                         Any character in this class: [Zz]
                     [Cc][Aa][Tt]
                         Any character in this class: [Cc]
                         Any character in this class: [Aa]
                         Any character in this class: [Tt]
                     [Cc][Oo][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Mm]
                     [Cc][Oo][Oo][Pp]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Pp]
                     [Ee][dD][Uu]
                         Any character in this class: [Ee]
                         Any character in this class: [dD]
                         Any character in this class: [Uu]
                     [Gg][Oo][Vv]
                         Any character in this class: [Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Vv]
                     [Ii][Nn][Ff][Oo]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Ff]
                         Any character in this class: [Oo]
                     [Ii][Nn][Tt]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Tt]
                     [Jj][Oo][Bb][Ss]
                         Any character in this class: [Jj]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ss]
                     [Mm][Ii][Ll]
                         Any character in this class: [Mm]
                         Any character in this class: [Ii]
                         Any character in this class: [Ll]
                     [Mm][Oo][Bb][Ii]
                         Any character in this class: [Mm]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                     [Mm][Uu][Ss][Ee][Uu][Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Uu]
                         Any character in this class: [Ss]
                         Any character in this class: [Ee]
                         Any character in this class: [Uu]
                         Any character in this class: [Mm]
                     [Nn][Aa][Mm][Ee]
                         Any character in this class: [Nn]
                         Any character in this class: [Aa]
                         Any character in this class: [Mm]
                         Any character in this class: [Ee]
                     [Nn][Ee][Tt]
                         Any character in this class: [Nn]
                         Any character in this class: [Ee]
                         Any character in this class: [Tt]
                     [Oo][Rr][Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Rr]
                         Any character in this class: [Gg]
                     [Pp][Rr][Oo]
                         Any character in this class: [Pp]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Rr][Oo][Oo][Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Tt]
                     [Tt][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Tt][Rr][Aa][Vv][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Aa]
                         Any character in this class: [Vv]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Cc][Yy][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Yy]
                         Any character in this class: [Mm]
                     [Gg][Ee][Oo]
                         Any character in this class: [Gg]
                         Any character in this class: [Ee]
                         Any character in this class: [Oo]
                     [Pp][Oo][Ss][Tt]
                         Any character in this class: [Pp]
                         Any character in this class: [Oo]
                         Any character in this class: [Ss]
                         Any character in this class: [Tt]
             End of line or string</para>
            </remarks>
        </member>
        <member name="F:Engage.Utility.EmailsRegEx">
            <summary>A regular expression which will match a comma-delimited list of email addresses</summary>
            <remarks>
            Because this needs to work in JavaScript and .NET, we can't just set <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>, we have to manually include both cases for each letter
            <para>
            Basic Explanation: Any valid characters, @ symbol, any valid characters, . (period), then either two letters or one of the other 25 top-level-domains.
            Then, any number of times, an optional additional comma, whitespace, and the same pattern as above (that is, another email address)
            </para>
            <para>
             Beginning of line or string
             Any character in this class: [a-zA-Z0-9._%\-+'], one or more repetitions
             @
             Match expression but don't capture it. [[a-zA-Z0-9\-]+\.], one or more repetitions
                 [a-zA-Z0-9\-]+\.
                     Any character in this class: [a-zA-Z0-9\-], one or more repetitions
                     Literal .
             Match expression but don't capture it. [[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Ii][Ll]|[Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt]]
                 Select from 26 alternatives
                     Any character in this class: [a-zA-Z], exactly 2 repetitions
                     [Aa][Ee][Rr][Oo]
                         Any character in this class: [Aa]
                         Any character in this class: [Ee]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Aa][Rr][Pp][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Rr]
                         Any character in this class: [Pp]
                         Any character in this class: [Aa]
                     [Aa][Ss][Ii][Aa]
                         Any character in this class: [Aa]
                         Any character in this class: [Ss]
                         Any character in this class: [Ii]
                         Any character in this class: [Aa]
                     [Bb][Ii][Zz]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                         Any character in this class: [Zz]
                     [Cc][Aa][Tt]
                         Any character in this class: [Cc]
                         Any character in this class: [Aa]
                         Any character in this class: [Tt]
                     [Cc][Oo][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Mm]
                     [Cc][Oo][Oo][Pp]
                         Any character in this class: [Cc]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Pp]
                     [Ee][dD][Uu]
                         Any character in this class: [Ee]
                         Any character in this class: [dD]
                         Any character in this class: [Uu]
                     [Gg][Oo][Vv]
                         Any character in this class: [Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Vv]
                     [Ii][Nn][Ff][Oo]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Ff]
                         Any character in this class: [Oo]
                     [Ii][Nn][Tt]
                         Any character in this class: [Ii]
                         Any character in this class: [Nn]
                         Any character in this class: [Tt]
                     [Jj][Oo][Bb][Ss]
                         Any character in this class: [Jj]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ss]
                     [Mm][Ii][Ll]
                         Any character in this class: [Mm]
                         Any character in this class: [Ii]
                         Any character in this class: [Ll]
                     [Mm][Oo][Bb][Ii]
                         Any character in this class: [Mm]
                         Any character in this class: [Oo]
                         Any character in this class: [Bb]
                         Any character in this class: [Ii]
                     [Mm][Uu][Ss][Ee][Uu][Mm]
                         Any character in this class: [Mm]
                         Any character in this class: [Uu]
                         Any character in this class: [Ss]
                         Any character in this class: [Ee]
                         Any character in this class: [Uu]
                         Any character in this class: [Mm]
                     [Nn][Aa][Mm][Ee]
                         Any character in this class: [Nn]
                         Any character in this class: [Aa]
                         Any character in this class: [Mm]
                         Any character in this class: [Ee]
                     [Nn][Ee][Tt]
                         Any character in this class: [Nn]
                         Any character in this class: [Ee]
                         Any character in this class: [Tt]
                     [Oo][Rr][Gg]
                         Any character in this class: [Oo]
                         Any character in this class: [Rr]
                         Any character in this class: [Gg]
                     [Pp][Rr][Oo]
                         Any character in this class: [Pp]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                     [Rr][Oo][Oo][Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Oo]
                         Any character in this class: [Oo]
                         Any character in this class: [Tt]
                     [Tt][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Tt][Rr][Aa][Vv][Ee][Ll]
                         Any character in this class: [Tt]
                         Any character in this class: [Rr]
                         Any character in this class: [Aa]
                         Any character in this class: [Vv]
                         Any character in this class: [Ee]
                         Any character in this class: [Ll]
                     [Cc][Yy][Mm]
                         Any character in this class: [Cc]
                         Any character in this class: [Yy]
                         Any character in this class: [Mm]
                     [Gg][Ee][Oo]
                         Any character in this class: [Gg]
                         Any character in this class: [Ee]
                         Any character in this class: [Oo]
                     [Pp][Oo][Ss][Tt]
                         Any character in this class: [Pp]
                         Any character in this class: [Oo]
                         Any character in this class: [Ss]
                         Any character in this class: [Tt]
             Match expression but don't capture it. [,\s?[a-zA-Z0-9._%\-+']+@(?:[a-zA-Z0-9\-]+\.)+(?:[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Ii][Ll]|[Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt])], any number of repetitions
                 ,\s?[a-zA-Z0-9._%\-+']+@(?:[a-zA-Z0-9\-]+\.)+(?:[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Ii][Ll]|[Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt])
                     ,
                     Whitespace, zero or one repetitions
                     Any character in this class: [a-zA-Z0-9._%\-+'], one or more repetitions
                     @
                     Match expression but don't capture it. [[a-zA-Z0-9\-]+\.], one or more repetitions
                         [a-zA-Z0-9\-]+\.
                             Any character in this class: [a-zA-Z0-9\-], one or more repetitions
                             Literal .
                     Match expression but don't capture it. [[a-zA-Z]{2}|[Aa][Ee][Rr][Oo]|[Aa][Rr][Pp][Aa]|[Aa][Ss][Ii][Aa]|[Bb][Ii][Zz]|[Cc][Aa][Tt]|[Cc][Oo][Mm]|[Cc][Oo][Oo][Pp]|[Ee][dD][Uu]|[Gg][Oo][Vv]|[Ii][Nn][Ff][Oo]|[Ii][Nn][Tt]|[Jj][Oo][Bb][Ss]|[Mm][Ii][Ll]|[Mm][Oo][Bb][Ii]|[Mm][Uu][Ss][Ee][Uu][Mm]|[Nn][Aa][Mm][Ee]|[Nn][Ee][Tt]|[Oo][Rr][Gg]|[Pp][Rr][Oo]|[Rr][Oo][Oo][Tt]|[Tt][Ee][Ll]|[Tt][Rr][Aa][Vv][Ee][Ll]|[Cc][Yy][Mm]|[Gg][Ee][Oo]|[Pp][Oo][Ss][Tt]]
                         Select from 26 alternatives
                             Any character in this class: [a-zA-Z], exactly 2 repetitions
                             [Aa][Ee][Rr][Oo]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Oo]
                             [Aa][Rr][Pp][Aa]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Pp]
                                 Any character in this class: [Aa]
                             [Aa][Ss][Ii][Aa]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Ss]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Aa]
                             [Bb][Ii][Zz]
                                 Any character in this class: [Bb]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Zz]
                             [Cc][Aa][Tt]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Tt]
                             [Cc][Oo][Mm]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Mm]
                             [Cc][Oo][Oo][Pp]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Pp]
                             [Ee][dD][Uu]
                                 Any character in this class: [Ee]
                                 Any character in this class: [dD]
                                 Any character in this class: [Uu]
                             [Gg][Oo][Vv]
                                 Any character in this class: [Gg]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Vv]
                             [Ii][Nn][Ff][Oo]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Ff]
                                 Any character in this class: [Oo]
                             [Ii][Nn][Tt]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Tt]
                             [Jj][Oo][Bb][Ss]
                                 Any character in this class: [Jj]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Bb]
                                 Any character in this class: [Ss]
                             [Mm][Ii][Ll]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Ii]
                                 Any character in this class: [Ll]
                             [Mm][Oo][Bb][Ii]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Bb]
                                 Any character in this class: [Ii]
                             [Mm][Uu][Ss][Ee][Uu][Mm]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Uu]
                                 Any character in this class: [Ss]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Uu]
                                 Any character in this class: [Mm]
                             [Nn][Aa][Mm][Ee]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Mm]
                                 Any character in this class: [Ee]
                             [Nn][Ee][Tt]
                                 Any character in this class: [Nn]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Tt]
                             [Oo][Rr][Gg]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Gg]
                             [Pp][Rr][Oo]
                                 Any character in this class: [Pp]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Oo]
                             [Rr][Oo][Oo][Tt]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Tt]
                             [Tt][Ee][Ll]
                                 Any character in this class: [Tt]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Ll]
                             [Tt][Rr][Aa][Vv][Ee][Ll]
                                 Any character in this class: [Tt]
                                 Any character in this class: [Rr]
                                 Any character in this class: [Aa]
                                 Any character in this class: [Vv]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Ll]
                             [Cc][Yy][Mm]
                                 Any character in this class: [Cc]
                                 Any character in this class: [Yy]
                                 Any character in this class: [Mm]
                             [Gg][Ee][Oo]
                                 Any character in this class: [Gg]
                                 Any character in this class: [Ee]
                                 Any character in this class: [Oo]
                             [Pp][Oo][Ss][Tt]
                                 Any character in this class: [Pp]
                                 Any character in this class: [Oo]
                                 Any character in this class: [Ss]
                                 Any character in this class: [Tt]
             End of line or string</para>
            </remarks>
        </member>
        <member name="F:Engage.Utility.PhoneRegularExpressionPattern">
            <summary>A regular expression which will match a US phone number with (required) area code</summary>
            <remarks>
            <para>
            Basic explanation: Optional whitespace, open parenthesis, whitespace, then three numbers, 
            then optional whitespace, closed parenthesis, whitespace, any of the following - \ / . *, and whitespace, then three numbers,
            then optional whitespace, any of the following - \ / . * and whitespace, then four numbers,
            then optional whitespace
            </para>
             ^\s*\(?\s*
                 Beginning of line or string
                 Whitespace, any number of repetitions
                 Literal (, zero or one repetitions
                 Whitespace, any number of repetitions
             [AreaCode]: A named capture group. [\d{3}]
                 Any digit, exactly 3 repetitions
             \s*\)?\s*-?\\?/?\.?\*?\s*
                 Whitespace, any number of repetitions
                 Literal ), zero or one repetitions
                 Whitespace, any number of repetitions
                 -, zero or one repetitions
                 Literal \, zero or one repetitions
                 /, zero or one repetitions
                 Literal ., zero or one repetitions
                 Literal *, zero or one repetitions
                 Whitespace, any number of repetitions
             [FirstThree]: A named capture group. [\d{3}]
                 Any digit, exactly 3 repetitions
             \s*-?\\?/?\.?\*?\s*
                 Whitespace, any number of repetitions
                 -, zero or one repetitions
                 Literal \, zero or one repetitions
                 /, zero or one repetitions
                 Literal ., zero or one repetitions
                 Literal *, zero or one repetitions
                 Whitespace, any number of repetitions
             [SecondFour]: A named capture group. [\d{4}]
                 Any digit, exactly 4 repetitions
             \s*$
                 Whitespace, any number of repetitions
                 End of line or string
            </remarks>
        </member>
        <member name="F:Engage.Utility.NullString">
            <summary>The SQL representation of null</summary>
        </member>
        <member name="F:Engage.Utility.Nbsp">
            <summary>The HTML representation of a non-breaking space</summary>
        </member>
        <member name="F:Engage.Utility.DefaultConnectionStringName">
            <summary>The name of the connection string used by default in our products (and DotNetNuke).</summary>
        </member>
        <member name="F:Engage.Utility.InvalidCssCharactersRegex">
            <summary>A regular expression which captures any characters that are invalid for a CSS class</summary>
        </member>
        <member name="F:Engage.Utility.XmlTagRegex">
            <summary>A regular expression to match an XML tag (i.e. <c>&lt;thing&gt;</c> or <c>&lt;/widget&gt;</c>)</summary>
            <remarks>
            <c>&lt;</c>
            Any character that is NOT in this class: <c>[>]</c>, any number of repetitions
            <c>&gt;</c>
            </remarks>
        </member>
        <member name="F:Engage.Utility.XmlEntityRegex">
            <summary>A regular expression to match an XML entity (i.e. <c>&amp;amp;</c> or <c>&amp;#456;</c>)</summary>
            <remarks>
            <c>&amp;</c>
            Any character that is NOT in this class: <c>[;],</c> any number of repetitions
            <c>;</c>
            </remarks>
        </member>
        <member name="M:Engage.Utility.AddQuotes(System.String)">
            <summary>Escapes quotes in a SQL string.</summary>
            <param name="value">The string value to escape.</param>
            <returns><paramref name="value" /> with quotes escaped for SQL</returns>
        </member>
        <member name="M:Engage.Utility.HasValue(System.String)">
            <summary>Determines whether the specified <paramref name="value" /> is null, empty, or only whitespace.</summary>
            <param name="value">The value to test.</param>
            <returns><c>true</c> if the specified value is not null, empty, or only whitespace; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Utility.EncodeForImageSrc(System.String)">
            <summary>
            When setting the <see cref="P:System.Web.UI.WebControls.Image.ImageUrl"/> of <see cref="T:System.Web.UI.WebControls.Image"/> control, spaces are incorrectly encoded.
            Use this method to correctly encode the full image path before setting the <see cref="P:System.Web.UI.WebControls.Image.ImageUrl"/> property.
            </summary>
            <remarks>A possible workaround from Microsoft: 
                <blockquote>Thanks for reporting this issue. It is actually the combination of 3 issues in ASP.NET and IIS: 
                    <ol>
                        <li> By default, IIS does not allow URLs to contain "+" characters, whether encoded or not (http://blogs.iis.net/thomad/archive/2007/12/17/iis7-rejecting-urls-containing.aspx). To allow this character, set in web.config. </li>
                        <li> The ASP.NET method HttpServerUtility.UrlEncode() does not escape the "%" character. This is by design, since we don't want to double-escape percent characters. That is, we want to allow things like HttpServerUtillity.UrlEncode("http://www.foo.com/foo%20bar.aspx"). However, System.Uri.EscapeUriString() does escape the "%" character, so you should use this method when you want to escape the "%" character. </li>
                        <li> Neither HttpServerUtility.UrlEncode() nor System.Uri.EscapeUriString() escape the "#" character. This is by design, since the "#" character separates the fragment from the rest of the URL. Since these APIs just take an arbitrary string, they cannot know whether you want to escape the "#" character or not, and they decided to not escape it (which is the most common case). The workaround is to manually escape the "#" character if needed. </li>
                    </ol>
                So the complete workaround for this bug is to allow the "+" character in IIS, use System.Uri.EscapeUriString() instead of HttpServerUtility.UrlEncode(), and manually escape the "#" character.
                </blockquote>
            </remarks>
            <param name="filePath">The file path.</param>
            <returns>The file path correctly encoded for the image tag's src attribute.</returns>
        </member>
        <member name="M:Engage.Utility.ValidateEmailAddress(System.String)">
            <summary>Validates the given email address.</summary>
            <param name="emailAddress">The email address to validate.</param>
            <returns>Whether the specified email address is in a valid format.</returns>
        </member>
        <member name="M:Engage.Utility.ValidateEmailAddress(System.String,System.Boolean)">
            <summary>Validates an email address, or multiple comma-delimited email addresses.</summary>
            <param name="emailAddress">The email address or addresses to validate.</param>
            <param name="commaDelimited">if set to <c>true</c>, <paramref name="emailAddress" /> could be multiple, comma-delimited email addresses,
            otherwise it must be a single email address.</param>
            <returns>Whether the specified email address or addresses are in a valid format.</returns>
        </member>
        <member name="M:Engage.Utility.ValidatePhoneNumber(System.String)">
            <summary>Validates a phone number against <see cref="F:Engage.Utility.PhoneRegularExpressionPattern"/>.</summary>
            <param name="phoneNumber">The phone number to validate.</param>
            <returns>Whether the specified phone number is in a valid format.</returns>
        </member>
        <member name="M:Engage.Utility.IsInteger(System.String)">
            <summary>Determines whether the specified <see cref="T:System.String"/> is an integer value.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</summary>
            <param name="value">The string to check.</param>
            <returns><c>true</c> if the specified <see cref="T:System.String"/> is an integer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Utility.IsInteger(System.String,System.IFormatProvider)">
            <summary>Determines whether the specified <see cref="T:System.String"/> is an integer value.</summary>
            <param name="value">The string to check.</param>
            <param name="culture">The culture to use when trying to parse the integer.</param>
            <returns><c>true</c> if the specified <see cref="T:System.String"/> is an integer; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Utility.IsBoolean(System.String)">
            <summary>Determines whether the specified <see cref="T:System.String"/> is a boolean value.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</summary>
            <param name="value">The string to check.</param>
            <returns><c>true</c> if the specified <see cref="T:System.String"/> is a boolean; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Utility.SplitTextList(System.String)">
            <summary>Splits text into a list, allowing whitespace, comma, and semicolon as delimiters.</summary>
            <param name="textList">The text list.</param>
            <returns>An array containing the non-empty entries of the <paramref name="textList"/>.</returns>
        </member>
        <member name="M:Engage.Utility.ParseIntegerList(System.String)">
            <summary>Parses a <see cref="T:System.String"/> into a <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</summary>
            <param name="integerText">A <see cref="T:System.String"/> which is a list of integers.</param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of the values in <paramref name="integerText"/> parsed as <see cref="T:System.Int32"/>s.</returns>
            <exception cref="T:System.FormatException">If any value is not an integer</exception>
        </member>
        <member name="M:Engage.Utility.ParseIntegerList(System.String,System.IFormatProvider)">
            <summary>Parses a <see cref="T:System.String"/> into a <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>.</summary>
            <param name="integerText">A <see cref="T:System.String"/> which is a list of integers.</param>
            <param name="culture">The culture to use when parsing each entry in <paramref name="integerText"/></param>
            <returns>A <see cref="T:System.Collections.Generic.IList`1"/> of the values in <paramref name="integerText"/> parsed as <see cref="T:System.Int32"/>s.</returns>
            <exception cref="T:System.FormatException">If any value is not an integer</exception>
        </member>
        <member name="M:Engage.Utility.ParseIntegerList(System.String[])">
            <summary>Parses a <see cref="T:System.String"/> array into a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Int32"/>.  Uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</summary>
            <param name="splitIntegers">A <see cref="T:System.String"/> array of integer values.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the values in <paramref name="splitIntegers"/> parsed as <see cref="T:System.Int32"/>s.</returns>
            <exception cref="T:System.FormatException">If any value is not an integer</exception>
        </member>
        <member name="M:Engage.Utility.ParseIntegerList(System.String[],System.IFormatProvider)">
            <summary>Parses a <see cref="T:System.String"/> array into a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Int32"/>.</summary>
            <param name="splitIntegers">A <see cref="T:System.String"/> array of integer values.</param>
            <param name="culture">The culture to use when parsing each <see cref="T:System.String"/> in <paramref name="splitIntegers"/></param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of the values in <paramref name="splitIntegers"/> parsed as <see cref="T:System.Int32"/>s.</returns>
            <exception cref="T:System.FormatException">If any value is not an integer</exception>
        </member>
        <member name="M:Engage.Utility.ParseNullableDateTime(System.String)">
            <summary>Parses a string, converting to a <see cref="T:System.DateTime"/> if possible using <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>, otherwise returning <c>null</c>.</summary>
            <param name="dateValue">The string to parse.</param>
            <returns><paramref name="dateValue"/> as a DateTime, if possible, otherwise <c>null</c></returns>
        </member>
        <member name="M:Engage.Utility.ParseNullableDateTime(System.String,System.IFormatProvider)">
            <summary>Parses a string, converting to a <see cref="T:System.DateTime"/> if possible, otherwise returning <c>null</c>.</summary>
            <param name="dateValue">The date value.</param>
            <param name="culture">The culture to use when parsing the <see cref="T:System.DateTime"/>.</param>
            <returns><paramref name="dateValue"/> as a DateTime, if possible, otherwise <c>null</c></returns>
        </member>
        <member name="M:Engage.Utility.TryParseGuid(System.String,System.Guid@)">
            <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid"/> structure.</summary>
            <param name="input">The GUID to convert.</param>
            <param name="result">The structure that will contain the parsed result.</param>
            <returns><c>true</c> if the parse operation was successful; otherwise, <c>false</c>.</returns>
            <remarks>This method returns <c>false</c> if <paramref name="input"/> is <c>null</c> or not in a recognized format, and does not return an exception.
            Documentation based on http://msdn.microsoft.com/en-us/library/system.guid.tryparse%28VS.100%29.aspx</remarks>
        </member>
        <member name="M:Engage.Utility.GetRandomSeed">
            <summary>Gets a random number to use as a seed.</summary>
            <returns>A random number seed</returns>
        </member>
        <member name="M:Engage.Utility.GetRandomNumberGenerator">
            <summary>Gets a random number generator.</summary>
            <returns>A new, properly initialized instance of the <see cref="T:System.Random"/> class.</returns>
        </member>
        <member name="M:Engage.Utility.EqualsIgnoreCase(System.String,System.String)">
            <summary>Compares two <see cref="T:System.String"/>s for equality, using the Invariant Culture and ignoring case.</summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns><c>true</c> if <paramref name="value1"/> is the same as <paramref name="value2"/> (without regard to case); otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Utility.EqualsIgnoreCase(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>Compares two <see cref="T:System.String"/>s for equality, using given <paramref name="culture"/> and ignoring case.</summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <param name="culture">The culture to use in determining case insensitivity.</param>
            <returns><c>true</c> if <paramref name="value1"/> is the same as <paramref name="value2"/> (without regard to case); otherwise <c>false</c></returns>
        </member>
        <member name="M:Engage.Utility.Serialize(System.Object)">
            <summary>Serializes the specified value as binary data into a byte array.</summary>
            <param name="value">The value to be serialized.</param>
            <returns>A byte array representing the value in binary formatting</returns>
        </member>
        <member name="M:Engage.Utility.DeSerialize(System.Byte[])">
            <summary>Deserializes the data into an object.</summary>
            <param name="data">The data to deserialize.</param>
            <returns>An object represented in binary formatting in the given byte array</returns>
        </member>
        <member name="M:Engage.Utility.ContainsCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>Determines whether the specified control's CssClass property contains the given CSS class.</summary>
            <param name="control">The control to check.</param>
            <param name="className">Name of the CSS class.</param>
            <returns><c>true</c> if the specified control contains the given CSS class; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.ContainsCssClass(System.String,System.String)">
            <summary>Determines whether the specified control's CssClass property contains the given CSS class.</summary>
            <param name="cssClass">The control to check.</param>
            <param name="className">Name of the CSS class.</param>
            <returns><c>true</c> if the specified control contains the given CSS class; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="cssClass"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.AddCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>Adds the given CSS class to the specified control's CssClass property if not already present.</summary>
            <param name="control">The control.</param>
            <param name="className">Name of the CSS class to add.</param>
        </member>
        <member name="M:Engage.Utility.AddCssClass(System.String,System.String)">
            <summary>Adds the given CSS class to the specified control's CssClass property if not already present.</summary>
            <param name="cssClass">The control.</param>
            <param name="className">Name of the CSS class to add.</param>
            <returns>The specified control's CssClass property with the <paramref name="className" /> appended.</returns>
        </member>
        <member name="M:Engage.Utility.RemoveCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>Removes the given CSS class from the specified control's CssClass property, if it is present.</summary>
            <param name="control">The control.</param>
            <param name="className">Name of the CSS class to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.RemoveCssClass(System.String,System.String)">
            <summary>Removes the given CSS class from the specified control's CssClass property, if it is present.</summary>
            <param name="cssClass">The control.</param>
            <param name="className">Name of the CSS class to remove.</param>
            <returns>The specified control's CssClass property without <paramref name="className"/> in the list.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="cssClass"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="className"/> is null.</exception>
        </member>
        <member name="M:Engage.Utility.ToggleCssClass(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>Toggles a CSS class in the specified control's CssClass property; i.e. removes it if it is present, and adds it if it is missing.</summary>
            <param name="control">The control.</param>
            <param name="className">Name of the CSS class to toggle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="control"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.ToggleCssClass(System.String,System.String)">
            <summary>Toggles a CSS class in the specified control's CssClass property; i.e. removes it if it is present, and adds it if it is missing.</summary>
            <param name="cssClass">The control.</param>
            <param name="className">Name of the CSS class to toggle.</param>
            <returns>The specified control's CssClass property without <paramref name="className" /> in the list if it was present, or with <paramref name="className" /> if it was not already in the list.</returns>
        </member>
        <member name="M:Engage.Utility.RegisterServerValidationMessageScript(System.Web.UI.TemplateControl)">
            <summary>Registers a script to display error messages from server-side validation as the specified <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> loads from a postback.</summary>
            <param name="ctrl">The <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> which is being posted back.</param>
            <remarks>Must be called in the PreRender if used to validate against the Text property of DNNTextEditor controls, otherwise Text will not be populated.
            Must set the ErrorMessage manually if using a resourcekey, otherwise the resourcekey will not have overridden the ErrorMessage property.</remarks>
        </member>
        <member name="M:Engage.Utility.RegisterServerValidationMessageScript(System.Web.UI.TemplateControl,System.String)">
            <summary>Registers a script to display error messages from server-side validation as the specified <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> loads from a postback.</summary>
            <param name="ctrl">The <see cref="T:System.Web.UI.UserControl"/> or <see cref="T:System.Web.UI.Page"/> which is being posted back.</param>
            <param name="validationGroup">The validation group against which to validate.</param>
            <remarks>Must be called in the PreRender if used to validate against the Text property of DNNTextEditor controls, otherwise Text will not be populated.
            Must set the ErrorMessage manually if using a resourcekey, otherwise the resourcekey will not have overridden the ErrorMessage property.</remarks>
        </member>
        <member name="M:Engage.Utility.ControlsAll(System.Web.UI.Control)">
            <summary>Find all child controls recursively.</summary>
            <param name="control">The root control, not included in returned values.</param>
            <returns>Enumerable of <see cref="T:System.Web.UI.Control"/>s</returns>
        </member>
        <member name="M:Engage.Utility.FindControlRecursive(System.Web.UI.Control,System.String)">
            <summary>Finds the first <see cref="T:System.Web.UI.Control"/> with the given <paramref name="id"/>.
            Searches through all levels of the</summary>
            <param name="root">The outermost containing <see cref="T:System.Web.UI.Control"/> in which to search.</param>
            <param name="id">The ID of the <see cref="T:System.Web.UI.Control"/> being sought, set in <see cref="P:System.Web.UI.Control.ID"/></param>
            <returns>The first <see cref="T:System.Web.UI.Control"/> with the given <paramref name="id"/> that is contained by <paramref name="root"/>.</returns>
            <remarks>from http://www.codinghorror.com/blog/archives/000307.html</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.FindParentControl``1(System.Web.UI.Control)">
            <summary>Traverses the control hierarchy the given control <paramref name="child" /> to find a parent control with the given type <typeparamref name="T" />,
            or <c>null</c> if none exists.</summary>
            <typeparam name="T">The type of parent for which to search</typeparam>
            <param name="child">The child control for whose parent to search.</param>
            <returns>A parent of <paramref name="child" /> with type <typeparamref name="T" />, or <c>null</c> if none exists.</returns>
        </member>
        <member name="M:Engage.Utility.GetHtmlFromUrl(System.String)">
            <summary>Gets the response from the given URL as a string.</summary>
            <param name="url">The URL to get the response from.</param>
            <returns>The response from the given URL</returns>
            <exception cref="T:System.Net.WebException">Unable to read HTML from the specified URL</exception>
        </member>
        <member name="M:Engage.Utility.ConvertToSlug(System.String)">
            <summary>Converts the given value to be "slug-appropriate," i.e. removes diacritics from letters,
            replaces non-alphanumeric chatracters with <c>-</c> (without allowing multiple <c>-</c> in a row).</summary>
            <param name="value">The value to convert.</param>
            <returns>The value after going through the conversion process</returns>
        </member>
        <member name="M:Engage.Utility.RemoveDiacritics(System.String)">
            <summary>Removes the diacritics from the given string.</summary>
            <param name="value">The value from which to strip diacritics.</param>
            <returns><paramref name="value"/> without any diacritics</returns>
            <remarks>Based on http://blogs.msdn.com/b/michkap/archive/2007/05/14/2629747.aspx</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.RemoveMarkup(System.String,System.Boolean)">
            <summary>Removes entities and tags from <paramref name="value"/></summary>
            <param name="value">The value from which to remove markup</param>
            <param name="retainSpaces">Whether to replace with a space or an empty <see cref="T:System.String"/></param>
            <returns><paramref name="value"/> with any markup removed</returns>
        </member>
        <member name="M:Engage.Utility.RemoveXmlEntities(System.String,System.Boolean)">
            <summary>Removes any XML/HTML entities (<c>&amp;nbsp;</c>, <c>&amp;lt;</c>, etc.)</summary>
            <param name="value">Value from which to remove entities</param>
            <param name="retainSpaces">Whether to replace entities with spaces or just remove</param>
            <returns><paramref name="value"/> with any entities removed</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Engage.Utility.RemoveXmlTags(System.String,System.Boolean)">
            <summary>Removes XML/HTML tags (<c>&lt;....&gt;</c>)</summary>
            <param name="value">Value from which to remove tags</param>
            <param name="retainSpaces">Whether to replace entities with spaces or just remove</param>
            <returns><paramref name="value"/> with any tags removed</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
        </member>
        <member name="M:Engage.Utility.MakeUrlAbsolute(System.Uri,System.String)">
            <summary>Transforms the given <paramref name="url"/> into an absolute URL.</summary>
            <param name="baseUrl">The URL on which to base the absolute URL (probably <see cref="P:System.Web.HttpRequest.Url"/>).</param>
            <param name="url">The URL to transform.</param>
            <returns>An absolute URL</returns>
        </member>
        <member name="M:Engage.Utility.MakeUrlAbsolute(System.Web.UI.Page,System.String)">
            <summary>Transforms the given <paramref name="url"/> into an absolute URL.</summary>
            <param name="page">The page of the current request.</param>
            <param name="url">The URL to transform.</param>
            <returns>An absolute URL</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.MakeUrlAbsolute(System.Web.UI.Page,System.Uri,System.String)">
            <summary>Transforms the given <paramref name="url"/> into an absolute URL.</summary>
            <param name="page">The page of the current request.</param>
            <param name="baseUrl">The URL on which to base the absolute URL (probably <see cref="P:System.Web.HttpRequest.Url"/>).</param>
            <param name="url">The URL to transform.</param>
            <returns>An absolute URL</returns>
            <exception cref="T:System.ArgumentNullException">page;A page parameter must be supplied when calling MakeUrlAbsolute with a ~/ rooted path</exception>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32[])">
            <summary>Combines the given hash codes into a single unique hash value.</summary>
            <param name="hashes">The hash values to combine.</param>
            <returns>A hash code comprised of the given <paramref name="hashes"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hashes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.GetEntryHash(System.Object)">
            <summary>Gets the entry hash for an object.</summary>
            <param name="entry">The entry.</param>
            <returns>An object's entry hash</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object[])">
            <summary>Combines the hash codes of the given objects into a single unique hash value.</summary>
            <param name="objects">The objects whose has values to combine.</param>
            <returns>A hash code comprised of the given <paramref name="objects"/>' hash codes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="objects"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32)">
            <summary>Combines the given hash codes into a single unique hash value.</summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <returns>A hash code comprised of the given hashes</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32,System.Int32)">
            <summary>Combines the given hash codes into a single unique hash value.</summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <returns>A hash code comprised of the given hashes</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Combines the given hash codes into a single unique hash value.</summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <param name="hash4">The fourth hash code.</param>
            <returns>A hash code comprised of the given hashes</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Combines the given hash codes into a single unique hash value.</summary>
            <param name="hash1">The first hash code.</param>
            <param name="hash2">The second hash code.</param>
            <param name="hash3">The third hash code.</param>
            <param name="hash4">The fourth hash code.</param>
            <param name="hash5">The fifth hash code.</param>
            <returns>A hash code comprised of the given hashes</returns>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object)">
            <summary>Combines the hash codes of the given objects into a single unique hash value.</summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <returns>A hash code comprised of the given objects' hash codes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj1"/> or <paramref name="obj2"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object,System.Object)">
            <summary>Combines the hash codes of the given objects into a single unique hash value.</summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="obj3">The third hash code.</param>
            <returns>A hash code comprised of the given objects' hash codes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj1"/>, <paramref name="obj2"/>, or <paramref name="obj3"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object,System.Object,System.Object)">
            <summary>Combines the hash codes of the given objects into a single unique hash value.</summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="obj3">The third hash code.</param>
            <param name="obj4">The fourth hash code.</param>
            <returns>A hash code comprised of the given objects' hash codes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj1"/>, <paramref name="obj2"/>, <paramref name="obj3"/>, or <paramref name="obj4"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.CombineHashCodes(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>Combines the hash codes of the given objects into a single unique hash value.</summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="obj3">The third hash code.</param>
            <param name="obj4">The fourth hash code.</param>
            <param name="obj5">The fifth hash code.</param>
            <returns>A hash code comprised of the given objects' hash codes</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj1"/>, <paramref name="obj2"/>, <paramref name="obj3"/>, <paramref name="obj4"/>, or <paramref name="obj5"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Engage.Utility.CreateSqlParam``1(System.Data.SqlDbType,System.String,System.Nullable{``0})">
            <summary>Creates a SQL parameter of the given <paramref name="parameterType"/>.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <typeparam name="T">The type of the (value-type) parameter value</typeparam>
            <param name="parameterType">SQL column type of the parameter.</param>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateSqlParam``1(System.Data.SqlDbType,System.String,``0)">
            <summary>Creates a SQL parameter of the given <paramref name="parameterType"/>.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <typeparam name="T">The type of the (reference-type) parameter value</typeparam>
            <param name="parameterType">SQL column type of the parameter.</param>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateTextParam(System.String,System.String)">
            <summary>Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NText"/>) SQL parameter, without size bounds.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateVarcharParam(System.String,System.String)">
            <summary>Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NVarChar"/>) SQL parameter, without size bounds.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateVarcharParam(System.String,System.String,System.Int32)">
            <summary>Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NVarChar"/>) SQL parameter, setting and checking the bounds of the value within the parameter.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <param name="size">The size of the field in the database.</param>
            <returns>A SqlParameter with the correct value, type, and capacity.</returns>
        </member>
        <member name="M:Engage.Utility.CreateCharParam(System.String,System.String)">
            <summary>Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NChar"/>) SQL parameter, without size bounds.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value, and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateCharParam(System.String,System.String,System.Int32)">
            <summary>Creates a <see cref="T:System.String"/> (<see cref="F:System.Data.SqlDbType.NChar"/>) SQL parameter, setting and checking the bounds of the value within the parameter.
            Sets the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c>.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <param name="size">The size of the field in the database.</param>
            <returns>A SqlParameter with the correct value, type, and capacity.</returns>
        </member>
        <member name="M:Engage.Utility.CreateGuidParam(System.String,System.Nullable{System.Guid})">
            <summary>Creates a <see cref="T:System.Guid"/> (<see cref="F:System.Data.SqlDbType.UniqueIdentifier"/>) SQL parameter,
            setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <see cref="F:System.Guid.Empty"/>
            or <see cref="T:System.Nullable`1"/> without a value.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDateTimeParam(System.String,System.Nullable{System.DateTime})">
            <summary>Creates a <see cref="T:System.DateTime"/> (<see cref="F:System.Data.SqlDbType.DateTime"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is its initial value,
            <see cref="F:System.DateTime.MinValue"/>, <see cref="F:System.DateTime.MaxValue"/>, or <see cref="T:System.Nullable`1"/> without a value.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDateTimeParam(System.String,System.String)">
            <summary>Creates a <see cref="T:System.DateTime"/> (<see cref="F:System.Data.SqlDbType.DateTime"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <c>null</c> or empty.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:Engage.Utility.CreateIntegerParam(System.String,System.Nullable{System.Int32})">
            <summary>Creates an <see cref="T:System.Int32"/> (<see cref="F:System.Data.SqlDbType.Int"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is
            <see cref="F:System.Int32.MaxValue"/>, <see cref="F:System.Int32.MinValue"/>, or <see cref="T:System.Nullable`1"/> without a value.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDecimalParam(System.String,System.Nullable{System.Decimal})">
            <summary>Creates a <see cref="T:System.Decimal"/> (<see cref="F:System.Data.SqlDbType.Decimal"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is
            <see cref="F:System.Decimal.MaxValue"/>, <see cref="F:System.Decimal.MinValue"/>, or <see cref="T:System.Nullable`1"/> without a value.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A SqlParameter with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateBitParam(System.String,System.Nullable{System.Boolean})">
            <summary>Creates a <see cref="T:System.Boolean"/> (<see cref="F:System.Data.SqlDbType.Bit"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/>
            if <paramref name="value"/> is <see cref="T:System.Nullable`1"/> without a value.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlParameter"/> with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateDoubleParam(System.String,System.Nullable{System.Double})">
            <summary>Creates a <see cref="T:System.Double"/> (<see cref="F:System.Data.SqlDbType.Float"/> SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is <see cref="F:System.Double.MaxValue"/>,
            <see cref="F:System.Double.MinValue"/>, or <see cref="T:System.Nullable`1"/> without a value.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlParameter"/> with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.CreateImageParam(System.String,System.Byte[])">
            <summary>Creates a <see cref="T:System.Byte"/>[] (<see cref="F:System.Data.SqlDbType.Image"/>) SQL parameter, setting the value to <see cref="T:System.DBNull"/> if <paramref name="value"/> is null, or an empty array.</summary>
            <param name="parameterName">Name of the parameter in the SQL Stored Procedure.</param>
            <param name="value">The value of the parameter.</param>
            <returns>A <see cref="T:System.Data.SqlClient.SqlParameter"/> with the correct value and type.</returns>
        </member>
        <member name="M:Engage.Utility.GetConnection(System.String)">
            <summary>
            Gets a connection to the database specified in the given <paramref name="connectionStringName"/>.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <returns>A connection to the database</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The <paramref name="connectionStringName"/> key was not found in the config file</exception>
        </member>
        <member name="M:Engage.Utility.GetConnection">
            <summary>
            Gets a connection to the database specified in <see cref="F:Engage.Utility.DefaultConnectionStringName"/>
            </summary>
            <returns>A connection to the database</returns>
        </member>
        <member name="M:Engage.Utility.GetDataReader(System.String)">
            <summary>
            Executes the SQL string against the default database connection, and builds an <see cref="T:System.Data.IDataReader"/> with the <see cref="F:System.Data.CommandBehavior.CloseConnection"/>.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> of the results from the SQL execution</returns>
            <exception cref="T:System.ApplicationException">An error happens while executing the SQL</exception>
        </member>
        <member name="M:Engage.Utility.ExecuteNonQuery(System.String)">
            <summary>
            Executes the SQL statement against the default database connection, and returns the number of rows affected
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>The number of rows affected by the execution of the SQL script</returns>
            <exception cref="T:System.ApplicationException">An error happens while executing the SQL</exception>
        </member>
        <member name="M:Engage.Utility.GetDataTable(System.String)">
            <summary>
            Executes the SQL string against the default database connection, and builds a <see cref="T:System.Data.DataTable"/>.  Sets <see cref="P:System.Data.DataTable.Locale"/> to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> of the results from the SQL execution</returns>
        </member>
        <member name="M:Engage.Utility.GetDataTable(System.String,System.Globalization.CultureInfo)">
            <summary>
            Executes the SQL string against the default database connection, and builds a <see cref="T:System.Data.DataTable"/>.
            </summary>
            <param name="sql">The SQL to execute.</param>
            <param name="culture">The culture of the <see cref="T:System.Data.DataTable"/> returned.</param>
            <returns>
            A <see cref="T:System.Data.DataTable"/> of the results from the SQL execution
            </returns>
            <exception cref="T:System.ApplicationException">An error happens while executing the SQL</exception>
        </member>
        <member name="M:Engage.Utility.GetSqlCommand">
            <summary>
            Gets a <see cref="T:System.Data.SqlClient.SqlCommand"/> for the default database connection.
            </summary>
            <returns>A <see cref="T:System.Data.SqlClient.SqlCommand"/> for the default database connection</returns>
        </member>
        <member name="P:Engage.Utility.IsLoggedIn">
            <summary>Gets a value indicating whether the current web user is logged in to the current website, or <c>false</c> if this is called outside of a website request.</summary>
            <value><c>true</c> if this is called in a web request and the current user is logged in; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Engage.Util.XmlExtensions">
            <summary>Extension methods for dealing with <see cref="T:System.Xml.Linq.XElement"/>, <see cref="T:System.Xml.XmlNode"/> and related types</summary>
        </member>
        <member name="M:Engage.Util.XmlExtensions.AsXElement(System.Xml.XmlNode)">
            <summary>Converts an <see cref="T:System.Xml.XmlNode"/> to an <see cref="T:System.Xml.Linq.XElement"/></summary>
            <param name="node">The node to convert</param>
            <returns>A new <see cref="T:System.Xml.Linq.XElement"/> instance</returns>
            <remarks>based on <see href="http://blogs.msdn.com/b/ericwhite/archive/2010/03/05/convert-xdocument-to-xmldocument-and-convert-xmldocument-to-xdocument.aspx"/></remarks>
        </member>
        <member name="M:Engage.Util.XmlExtensions.AsXmlNode(System.Xml.Linq.XElement)">
            <summary>Converts an <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Xml.XmlNode"/></summary>
            <param name="element">The element to convert</param>
            <returns>A new <see cref="T:System.Xml.XmlNode"/> instance</returns>
            <remarks>based on <see href="http://blogs.msdn.com/b/ericwhite/archive/2010/03/05/convert-xdocument-to-xmldocument-and-convert-xmldocument-to-xdocument.aspx"/></remarks>
        </member>
        <member name="M:Engage.Util.XmlExtensions.AsXmlElement(System.Xml.Linq.XElement)">
            <summary>Converts an <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Xml.XmlElement"/></summary>
            <param name="element">The element to convert</param>
            <returns>A new <see cref="T:System.Xml.XmlElement"/> instance</returns>
            <remarks>based on <see href="http://blogs.msdn.com/b/ericwhite/archive/2010/03/05/convert-xdocument-to-xmldocument-and-convert-xmldocument-to-xdocument.aspx"/></remarks>
        </member>
        <member name="M:Engage.Util.XmlExtensions.AsXDocument(System.Xml.XmlDocument)">
            <summary>Converts an <see cref="T:System.Xml.XmlDocument"/> to an <see cref="T:System.Xml.Linq.XDocument"/></summary>
            <param name="document">The document to convert</param>
            <returns>A new <see cref="T:System.Xml.Linq.XDocument"/> instance</returns>
            <remarks>based on <see href="http://blogs.msdn.com/b/ericwhite/archive/2010/03/05/convert-xdocument-to-xmldocument-and-convert-xmldocument-to-xdocument.aspx"/></remarks>
        </member>
        <member name="M:Engage.Util.XmlExtensions.AsXmlDocument(System.Xml.Linq.XDocument)">
            <summary>Converts an <see cref="T:System.Xml.Linq.XDocument"/> to an <see cref="T:System.Xml.XmlDocument"/></summary>
            <param name="document">The document to convert</param>
            <returns>A new <see cref="T:System.Xml.XmlDocument"/> instance</returns>
            <remarks>based on <see href="http://blogs.msdn.com/b/ericwhite/archive/2010/03/05/convert-xdocument-to-xmldocument-and-convert-xmldocument-to-xdocument.aspx"/></remarks>
        </member>
        <member name="T:Engage.Versions.NullVersionManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:Engage.Versions.ObjectViewerCtl">
            <summary>
            Summary description for ObjectViewerCtl.
            </summary>
        </member>
        <member name="F:Engage.Versions.ObjectViewerCtl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Engage.Versions.ObjectViewerCtl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Versions.ObjectViewerCtl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Engage.Versions.Version">
            <summary>
            Summary description for Version.
            </summary>
        </member>
        <member name="T:Engage.Versions.VersionView">
            <summary>
            Summary description for SystemAttributesView.
            </summary>
        </member>
        <member name="F:Engage.Versions.VersionView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Engage.Versions.VersionView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Engage.Versions.VersionView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
