#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Engage.Survey.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="campus_dnn")]
	public partial class SurveyModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnswer(Answer instance);
    partial void UpdateAnswer(Answer instance);
    partial void DeleteAnswer(Answer instance);
    partial void InsertSurvey(Survey instance);
    partial void UpdateSurvey(Survey instance);
    partial void DeleteSurvey(Survey instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    #endregion
		
		public SurveyModelDataContext() : 
				base(global::Engage.Survey.Entities.Properties.Settings.Default.campus_dnnConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SurveyModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SurveyModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SurveyModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SurveyModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Answer> Answers
		{
			get
			{
				return this.GetTable<Answer>();
			}
		}
		
		public System.Data.Linq.Table<Survey> Surveys
		{
			get
			{
				return this.GetTable<Survey>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
	}
	
	[Table(Name="dbo.EngageSurvey_Answer")]
	public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AnswerId;
		
		private int _QuestionId;
		
		private string _Text;
		
		private bool _IsCorrect;
		
		private int _RevisingUser;
		
		private System.DateTime _RevisionDate;
		
		private int _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnswerIdChanging(int value);
    partial void OnAnswerIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnIsCorrectChanging(bool value);
    partial void OnIsCorrectChanged();
    partial void OnRevisingUserChanging(int value);
    partial void OnRevisingUserChanged();
    partial void OnRevisionDateChanging(System.DateTime value);
    partial void OnRevisionDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public Answer()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[Column(Storage="_AnswerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AnswerId
		{
			get
			{
				return this._AnswerId;
			}
			set
			{
				if ((this._AnswerId != value))
				{
					this.OnAnswerIdChanging(value);
					this.SendPropertyChanging();
					this._AnswerId = value;
					this.SendPropertyChanged("AnswerId");
					this.OnAnswerIdChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_IsCorrect", DbType="Bit NOT NULL")]
		public bool IsCorrect
		{
			get
			{
				return this._IsCorrect;
			}
			set
			{
				if ((this._IsCorrect != value))
				{
					this.OnIsCorrectChanging(value);
					this.SendPropertyChanging();
					this._IsCorrect = value;
					this.SendPropertyChanged("IsCorrect");
					this.OnIsCorrectChanged();
				}
			}
		}
		
		[Column(Storage="_RevisingUser", DbType="Int NOT NULL")]
		public int RevisingUser
		{
			get
			{
				return this._RevisingUser;
			}
			set
			{
				if ((this._RevisingUser != value))
				{
					this.OnRevisingUserChanging(value);
					this.SendPropertyChanging();
					this._RevisingUser = value;
					this.SendPropertyChanged("RevisingUser");
					this.OnRevisingUserChanged();
				}
			}
		}
		
		[Column(Storage="_RevisionDate", DbType="DateTime NOT NULL")]
		public System.DateTime RevisionDate
		{
			get
			{
				return this._RevisionDate;
			}
			set
			{
				if ((this._RevisionDate != value))
				{
					this.OnRevisionDateChanging(value);
					this.SendPropertyChanging();
					this._RevisionDate = value;
					this.SendPropertyChanged("RevisionDate");
					this.OnRevisionDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Association(Name="EngageSurvey_Question_Answer", Storage="_Question", ThisKey="QuestionId", OtherKey="QuestionId", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Answers.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Answers.Add(this);
						this._QuestionId = value.QuestionId;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EngageSurvey_Survey")]
	public partial class Survey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SurveyId;
		
		private string _Text;
		
		private string _FinalMessageOption;
		
		private string _FinalMessage;
		
		private string _FinalUrl;
		
		private bool _ShowText;
		
		private string _QuestionFormatOption;
		
		private string _AnswerFormatOption;
		
		private string _TitleOption;
		
		private string _LogoURL;
		
		private int _RevisingUser;
		
		private System.DateTime _RevisionDate;
		
		private int _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private EntitySet<Section> _Sections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSurveyIdChanging(int value);
    partial void OnSurveyIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnFinalMessageOptionChanging(string value);
    partial void OnFinalMessageOptionChanged();
    partial void OnFinalMessageChanging(string value);
    partial void OnFinalMessageChanged();
    partial void OnFinalUrlChanging(string value);
    partial void OnFinalUrlChanged();
    partial void OnShowTextChanging(bool value);
    partial void OnShowTextChanged();
    partial void OnQuestionFormatOptionChanging(string value);
    partial void OnQuestionFormatOptionChanged();
    partial void OnAnswerFormatOptionChanging(string value);
    partial void OnAnswerFormatOptionChanged();
    partial void OnTitleOptionChanging(string value);
    partial void OnTitleOptionChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    partial void OnRevisingUserChanging(int value);
    partial void OnRevisingUserChanged();
    partial void OnRevisionDateChanging(System.DateTime value);
    partial void OnRevisionDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public Survey()
		{
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			OnCreated();
		}
		
		[Column(Storage="_SurveyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SurveyId
		{
			get
			{
				return this._SurveyId;
			}
			set
			{
				if ((this._SurveyId != value))
				{
					this.OnSurveyIdChanging(value);
					this.SendPropertyChanging();
					this._SurveyId = value;
					this.SendPropertyChanged("SurveyId");
					this.OnSurveyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_FinalMessageOption", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FinalMessageOption
		{
			get
			{
				return this._FinalMessageOption;
			}
			set
			{
				if ((this._FinalMessageOption != value))
				{
					this.OnFinalMessageOptionChanging(value);
					this.SendPropertyChanging();
					this._FinalMessageOption = value;
					this.SendPropertyChanged("FinalMessageOption");
					this.OnFinalMessageOptionChanged();
				}
			}
		}
		
		[Column(Storage="_FinalMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FinalMessage
		{
			get
			{
				return this._FinalMessage;
			}
			set
			{
				if ((this._FinalMessage != value))
				{
					this.OnFinalMessageChanging(value);
					this.SendPropertyChanging();
					this._FinalMessage = value;
					this.SendPropertyChanged("FinalMessage");
					this.OnFinalMessageChanged();
				}
			}
		}
		
		[Column(Storage="_FinalUrl", DbType="NVarChar(256)")]
		public string FinalUrl
		{
			get
			{
				return this._FinalUrl;
			}
			set
			{
				if ((this._FinalUrl != value))
				{
					this.OnFinalUrlChanging(value);
					this.SendPropertyChanging();
					this._FinalUrl = value;
					this.SendPropertyChanged("FinalUrl");
					this.OnFinalUrlChanged();
				}
			}
		}
		
		[Column(Storage="_ShowText", DbType="Bit NOT NULL")]
		public bool ShowText
		{
			get
			{
				return this._ShowText;
			}
			set
			{
				if ((this._ShowText != value))
				{
					this.OnShowTextChanging(value);
					this.SendPropertyChanging();
					this._ShowText = value;
					this.SendPropertyChanged("ShowText");
					this.OnShowTextChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionFormatOption", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string QuestionFormatOption
		{
			get
			{
				return this._QuestionFormatOption;
			}
			set
			{
				if ((this._QuestionFormatOption != value))
				{
					this.OnQuestionFormatOptionChanging(value);
					this.SendPropertyChanging();
					this._QuestionFormatOption = value;
					this.SendPropertyChanged("QuestionFormatOption");
					this.OnQuestionFormatOptionChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerFormatOption", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string AnswerFormatOption
		{
			get
			{
				return this._AnswerFormatOption;
			}
			set
			{
				if ((this._AnswerFormatOption != value))
				{
					this.OnAnswerFormatOptionChanging(value);
					this.SendPropertyChanging();
					this._AnswerFormatOption = value;
					this.SendPropertyChanged("AnswerFormatOption");
					this.OnAnswerFormatOptionChanged();
				}
			}
		}
		
		[Column(Storage="_TitleOption", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string TitleOption
		{
			get
			{
				return this._TitleOption;
			}
			set
			{
				if ((this._TitleOption != value))
				{
					this.OnTitleOptionChanging(value);
					this.SendPropertyChanging();
					this._TitleOption = value;
					this.SendPropertyChanged("TitleOption");
					this.OnTitleOptionChanged();
				}
			}
		}
		
		[Column(Storage="_LogoURL", DbType="NVarChar(256)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[Column(Storage="_RevisingUser", DbType="Int NOT NULL")]
		public int RevisingUser
		{
			get
			{
				return this._RevisingUser;
			}
			set
			{
				if ((this._RevisingUser != value))
				{
					this.OnRevisingUserChanging(value);
					this.SendPropertyChanging();
					this._RevisingUser = value;
					this.SendPropertyChanged("RevisingUser");
					this.OnRevisingUserChanged();
				}
			}
		}
		
		[Column(Storage="_RevisionDate", DbType="DateTime NOT NULL")]
		public System.DateTime RevisionDate
		{
			get
			{
				return this._RevisionDate;
			}
			set
			{
				if ((this._RevisionDate != value))
				{
					this.OnRevisionDateChanging(value);
					this.SendPropertyChanging();
					this._RevisionDate = value;
					this.SendPropertyChanged("RevisionDate");
					this.OnRevisionDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Association(Name="Survey_Section", Storage="_Sections", ThisKey="SurveyId", OtherKey="SurveyId")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Survey = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Survey = null;
		}
	}
	
	[Table(Name="dbo.EngageSurvey_Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionId;
		
		private int _SurveyId;
		
		private string _Text;
		
		private bool _ShowText;
		
		private int _RelativeOrder;
		
		private int _RevisingUser;
		
		private System.DateTime _RevisionDate;
		
		private int _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private EntitySet<Question> _Questions;
		
		private EntityRef<Survey> _Survey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnSurveyIdChanging(int value);
    partial void OnSurveyIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnShowTextChanging(bool value);
    partial void OnShowTextChanged();
    partial void OnRelativeOrderChanging(int value);
    partial void OnRelativeOrderChanged();
    partial void OnRevisingUserChanging(int value);
    partial void OnRevisingUserChanged();
    partial void OnRevisionDateChanging(System.DateTime value);
    partial void OnRevisionDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public Section()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._Survey = default(EntityRef<Survey>);
			OnCreated();
		}
		
		[Column(Storage="_SectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SurveyId", DbType="Int NOT NULL")]
		public int SurveyId
		{
			get
			{
				return this._SurveyId;
			}
			set
			{
				if ((this._SurveyId != value))
				{
					if (this._Survey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurveyIdChanging(value);
					this.SendPropertyChanging();
					this._SurveyId = value;
					this.SendPropertyChanged("SurveyId");
					this.OnSurveyIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_ShowText", DbType="Bit NOT NULL")]
		public bool ShowText
		{
			get
			{
				return this._ShowText;
			}
			set
			{
				if ((this._ShowText != value))
				{
					this.OnShowTextChanging(value);
					this.SendPropertyChanging();
					this._ShowText = value;
					this.SendPropertyChanged("ShowText");
					this.OnShowTextChanged();
				}
			}
		}
		
		[Column(Storage="_RelativeOrder", DbType="Int NOT NULL")]
		public int RelativeOrder
		{
			get
			{
				return this._RelativeOrder;
			}
			set
			{
				if ((this._RelativeOrder != value))
				{
					this.OnRelativeOrderChanging(value);
					this.SendPropertyChanging();
					this._RelativeOrder = value;
					this.SendPropertyChanged("RelativeOrder");
					this.OnRelativeOrderChanged();
				}
			}
		}
		
		[Column(Storage="_RevisingUser", DbType="Int NOT NULL")]
		public int RevisingUser
		{
			get
			{
				return this._RevisingUser;
			}
			set
			{
				if ((this._RevisingUser != value))
				{
					this.OnRevisingUserChanging(value);
					this.SendPropertyChanging();
					this._RevisingUser = value;
					this.SendPropertyChanged("RevisingUser");
					this.OnRevisingUserChanged();
				}
			}
		}
		
		[Column(Storage="_RevisionDate", DbType="DateTime NOT NULL")]
		public System.DateTime RevisionDate
		{
			get
			{
				return this._RevisionDate;
			}
			set
			{
				if ((this._RevisionDate != value))
				{
					this.OnRevisionDateChanging(value);
					this.SendPropertyChanging();
					this._RevisionDate = value;
					this.SendPropertyChanged("RevisionDate");
					this.OnRevisionDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Association(Name="Section_EngageSurvey_Question", Storage="_Questions", ThisKey="SectionId", OtherKey="SectionId")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[Association(Name="Survey_Section", Storage="_Survey", ThisKey="SurveyId", OtherKey="SurveyId", IsForeignKey=true)]
		public Survey Survey
		{
			get
			{
				return this._Survey.Entity;
			}
			set
			{
				Survey previousValue = this._Survey.Entity;
				if (((previousValue != value) 
							|| (this._Survey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Survey.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Survey.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._SurveyId = value.SurveyId;
					}
					else
					{
						this._SurveyId = default(int);
					}
					this.SendPropertyChanged("Survey");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[Table(Name="dbo.EngageSurvey_Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _QuestionId;
		
		private int _SectionId;
		
		private string _Text;
		
		private bool _ShowText;
		
		private bool _IsRequired;
		
		private string _RequiredMessage;
		
		private int _RelativeOrder;
		
		private int _SelectionLimit;
		
		private string _ControlType;
		
		private int _RevisingUser;
		
		private System.DateTime _RevisionDate;
		
		private int _CreatedBy;
		
		private System.DateTime _CreationDate;
		
		private EntitySet<Answer> _Answers;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnShowTextChanging(bool value);
    partial void OnShowTextChanged();
    partial void OnIsRequiredChanging(bool value);
    partial void OnIsRequiredChanged();
    partial void OnRequiredMessageChanging(string value);
    partial void OnRequiredMessageChanged();
    partial void OnRelativeOrderChanging(int value);
    partial void OnRelativeOrderChanged();
    partial void OnSelectionLimitChanging(int value);
    partial void OnSelectionLimitChanged();
    partial void OnControlTypeChanging(string value);
    partial void OnControlTypeChanged();
    partial void OnRevisingUserChanging(int value);
    partial void OnRevisingUserChanged();
    partial void OnRevisionDateChanging(System.DateTime value);
    partial void OnRevisionDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public Question()
		{
			this._Answers = new EntitySet<Answer>(new Action<Answer>(this.attach_Answers), new Action<Answer>(this.detach_Answers));
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[Column(Storage="_QuestionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[Column(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_ShowText", DbType="Bit NOT NULL")]
		public bool ShowText
		{
			get
			{
				return this._ShowText;
			}
			set
			{
				if ((this._ShowText != value))
				{
					this.OnShowTextChanging(value);
					this.SendPropertyChanging();
					this._ShowText = value;
					this.SendPropertyChanged("ShowText");
					this.OnShowTextChanged();
				}
			}
		}
		
		[Column(Storage="_IsRequired", DbType="Bit NOT NULL")]
		public bool IsRequired
		{
			get
			{
				return this._IsRequired;
			}
			set
			{
				if ((this._IsRequired != value))
				{
					this.OnIsRequiredChanging(value);
					this.SendPropertyChanging();
					this._IsRequired = value;
					this.SendPropertyChanged("IsRequired");
					this.OnIsRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_RequiredMessage", DbType="NChar(256)")]
		public string RequiredMessage
		{
			get
			{
				return this._RequiredMessage;
			}
			set
			{
				if ((this._RequiredMessage != value))
				{
					this.OnRequiredMessageChanging(value);
					this.SendPropertyChanging();
					this._RequiredMessage = value;
					this.SendPropertyChanged("RequiredMessage");
					this.OnRequiredMessageChanged();
				}
			}
		}
		
		[Column(Storage="_RelativeOrder", DbType="Int NOT NULL")]
		public int RelativeOrder
		{
			get
			{
				return this._RelativeOrder;
			}
			set
			{
				if ((this._RelativeOrder != value))
				{
					this.OnRelativeOrderChanging(value);
					this.SendPropertyChanging();
					this._RelativeOrder = value;
					this.SendPropertyChanged("RelativeOrder");
					this.OnRelativeOrderChanged();
				}
			}
		}
		
		[Column(Storage="_SelectionLimit", DbType="Int NOT NULL")]
		public int SelectionLimit
		{
			get
			{
				return this._SelectionLimit;
			}
			set
			{
				if ((this._SelectionLimit != value))
				{
					this.OnSelectionLimitChanging(value);
					this.SendPropertyChanging();
					this._SelectionLimit = value;
					this.SendPropertyChanged("SelectionLimit");
					this.OnSelectionLimitChanged();
				}
			}
		}
		
		[Column(Storage="_ControlType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ControlType
		{
			get
			{
				return this._ControlType;
			}
			set
			{
				if ((this._ControlType != value))
				{
					this.OnControlTypeChanging(value);
					this.SendPropertyChanging();
					this._ControlType = value;
					this.SendPropertyChanged("ControlType");
					this.OnControlTypeChanged();
				}
			}
		}
		
		[Column(Storage="_RevisingUser", DbType="Int NOT NULL")]
		public int RevisingUser
		{
			get
			{
				return this._RevisingUser;
			}
			set
			{
				if ((this._RevisingUser != value))
				{
					this.OnRevisingUserChanging(value);
					this.SendPropertyChanging();
					this._RevisingUser = value;
					this.SendPropertyChanged("RevisingUser");
					this.OnRevisingUserChanged();
				}
			}
		}
		
		[Column(Storage="_RevisionDate", DbType="DateTime NOT NULL")]
		public System.DateTime RevisionDate
		{
			get
			{
				return this._RevisionDate;
			}
			set
			{
				if ((this._RevisionDate != value))
				{
					this.OnRevisionDateChanging(value);
					this.SendPropertyChanging();
					this._RevisionDate = value;
					this.SendPropertyChanged("RevisionDate");
					this.OnRevisionDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Association(Name="EngageSurvey_Question_Answer", Storage="_Answers", ThisKey="QuestionId", OtherKey="QuestionId")]
		public EntitySet<Answer> Answers
		{
			get
			{
				return this._Answers;
			}
			set
			{
				this._Answers.Assign(value);
			}
		}
		
		[Association(Name="Section_EngageSurvey_Question", Storage="_Section", ThisKey="SectionId", OtherKey="SectionId", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._SectionId = value.SectionId;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Answers(Answer entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
}
#pragma warning restore 1591
