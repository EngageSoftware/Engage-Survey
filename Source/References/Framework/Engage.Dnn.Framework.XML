<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Engage.Dnn.Framework</name>
    </assembly>
    <members>
        <member name="T:Engage.Dnn.Framework.Commerce.ICommerceItem">
            <summary>
            Marker for classes that are supported by Engage: Commerce
            </summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.CommerceItemId">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id of the sellable item.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.ProductGUID">
            <summary>
            Gets or sets the product GUID. This is used to uniquely identify a product since the id isn't good enough.
            </summary>
            <value>The product GUID.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.Name">
            <summary>
            Gets or sets the name or title that is used to generally refer to the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.BriefDescription">
            <summary>
            Gets the description of the item.
            </summary>
            <value>The description of the item.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.ModelNumber">
            <summary>
            Gets or sets the product number
            </summary>
            <value>The number or code.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.CreatedDate">
            <summary>
            Gets the created date of the item.
            </summary>
            <value>The created date.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Commerce.ICommerceItem.ThumbnailImageUrl">
            <summary>
            Gets the thumbnail image for a given item.
            </summary>
            <value>The thumbnail.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.Commerce.ICommerceRepository">
            <summary>
            Represents the ways to get products
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Commerce.ICommerceRepository.GetProducts(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the paged list of sellable items.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="totalCount">The total number of class members.</param>
            <returns>A sequence of class members</returns>
        </member>
        <member name="T:Engage.Dnn.Framework.Commerce.ICommerceTokenProcessor">
            <summary>
            Interface marker
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Commerce.ICommerceTokenProcessor.ProcessCommerceTags(System.Web.UI.Control,Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.Int32,System.Int32)">
            <summary>
            Processes the commerce tags.
            </summary>
            <param name="container">The container.</param>
            <param name="tag">The tag to parse.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <param name="tabId">The tab id.</param>
            <param name="moduleId">The module id.</param>
            <returns>
            True if the tag can be parsed by the commerce implementation.
            </returns>
        </member>
        <member name="T:Engage.Dnn.Framework.Common.LookupPair">
            <summary>
            Can be used as name and value pairs for list control objects.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Common.LookupPair.displayMember">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Common.LookupPair.DisplayMember"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Common.LookupPair.valueMember">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Common.LookupPair.ValueMember"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Common.LookupPair.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Common.LookupPair"/> class.
            </summary>
            <param name="displayMember">The display member.</param>
            <param name="valueMember">The value member.</param>
        </member>
        <member name="P:Engage.Dnn.Framework.Common.LookupPair.DisplayMember">
            <summary>
            Gets or sets the display member.
            </summary>
            <value>The display member.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Common.LookupPair.ValueMember">
            <summary>
            Gets or sets the value member.
            </summary>
            <value>The value member.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.FakeModuleControlBase">
            <summary>
            An <see cref="T:Engage.Dnn.Framework.IModuleControlBase"/> implementation for use when not in the context of an actual control
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.IModuleControlBase">
            <summary>
            The common functionality of all module controls (i.e. both <see cref="T:Engage.Dnn.Framework.SettingsBase"/> and <see cref="T:Engage.Dnn.Framework.ModuleBase"/>) in Engage modules.
            </summary>
        </member>
        <member name="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName">
            <summary>
            Gets the name of this module's desktop module record in DNN.
            </summary>
            <value>The name of this module's desktop module record in DNN.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.IModuleControlBase.ModuleConfiguration">
            <summary>
            Gets the module configuration.
            </summary>
            <value>The module configuration.</value>
        </member>
        <member name="M:Engage.Dnn.Framework.FakeModuleControlBase.#ctor(System.String,DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.FakeModuleControlBase"/> class.
            </summary>
            <param name="desktopModuleName">Settings prefix.</param>
            <param name="moduleConfiguration">Module configuration.</param>
        </member>
        <member name="P:Engage.Dnn.Framework.FakeModuleControlBase.DesktopModuleName">
            <summary>
            Gets the name of the module's desktop module record in DNN.
            </summary>
            <value>The name of the module's desktop module record in DNN.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.FakeModuleControlBase.ModuleConfiguration">
            <summary>
            Gets the module configuration.
            </summary>
            <value>The module configuration.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.ITemplatedModuleView`1">
            <summary>Represents the actions that can be taken through the view</summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Engage.Dnn.Framework.ITemplatedModuleView`1.ProcessTag(System.Web.UI.Control,Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>
            This method is used to process tags that aren't already handled by the ProcessCommonTags in this project or handled higher up
            in the Engage.Dnn.Framework. See documentation for types of tokens already handled by the Framework.
            </summary>
            <param name="container">The container to place the control.</param>
            <param name="tag">The tag to parse.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>A <c>true</c> if the tag was handled by this process.</returns>
        </member>
        <member name="T:Engage.Licensing.LicenseProviderBase">
            <summary>
            The base for license providers
            </summary>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.LicenseProviderBase"/> class.
            </summary>
            <param name="productLicenseKey">The product key for the module/product.</param>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.DisplayInvalidLicenseMessage(Engage.Dnn.Framework.ModuleBase)">
            <summary>
            Displays a message indicating that the license for this module has been determined to be invalid.
            </summary>
            <param name="control">The control on which to show the message.</param>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.ValidateLicense(Engage.Dnn.Framework.ModuleBase)">
            <summary>
            Determines whether this instance represents a valid license.
            </summary>
            <param name="control">The control requesting license validation.</param>
            <returns>
            <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.GetInvalidLicenseMessage">
            <summary>
            Gets the message to display when the license evaluates as invalid.
            </summary>
            <returns>The heading, message, and message type to display</returns>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.IsValid(Engage.Dnn.Framework.ModuleBase)">
            <summary>
            Determines whether this instance represents a valid license.
            </summary>
            <param name="control">The control requesting license validation.</param>
            <returns>
            <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Engage.Licensing.LicenseProviderBase.ProductLicenseKey">
            <summary>
            Gets the license key for this module/product.
            </summary>
            <value>The product license key.</value>
        </member>
        <member name="T:Engage.Licensing.LicenseProviderBase.LicenseMessage">
            <summary>The parts of a message to display</summary>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.LicenseMessage.#ctor(System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.LicenseProviderBase.LicenseMessage"/> struct.
            </summary>
            <param name="heading">The heading of the message.</param>
            <param name="message">The text of the message itself.</param>
            <param name="messageType">The type of message.</param>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.LicenseMessage.op_Equality(Engage.Licensing.LicenseProviderBase.LicenseMessage,Engage.Licensing.LicenseProviderBase.LicenseMessage)">
            <summary>
            Implements the <c>==</c> operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>Whether <paramref name="left"/> equals <paramref name="right"/>.</returns>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.LicenseMessage.op_Inequality(Engage.Licensing.LicenseProviderBase.LicenseMessage,Engage.Licensing.LicenseProviderBase.LicenseMessage)">
            <summary>
            Implements the <c>!=</c> operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>Whether <paramref name="left"/> is unequal to <paramref name="right"/>.</returns>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.LicenseMessage.Equals(Engage.Licensing.LicenseProviderBase.LicenseMessage)">
            <summary>Determines whether the specified <see cref="T:Engage.Licensing.LicenseProviderBase.LicenseMessage"/> is equal to this instance.</summary>
            <param name="other">The <see cref="T:Engage.Licensing.LicenseProviderBase.LicenseMessage"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:Engage.Licensing.LicenseProviderBase.LicenseMessage"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.LicenseMessage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.LicenseProviderBase.LicenseMessage.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Engage.Licensing.LicenseProviderBase.LicenseMessage.Heading">
            <summary>
            Gets the heading of the message.
            </summary>
            <value>The heading of the message.</value>
        </member>
        <member name="P:Engage.Licensing.LicenseProviderBase.LicenseMessage.Message">
            <summary>
            Gets the message text.
            </summary>
            <value>The text of the message itself.</value>
        </member>
        <member name="P:Engage.Licensing.LicenseProviderBase.LicenseMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
            <value>The type of message.</value>
        </member>
        <member name="T:Engage.Licensing.RemoteAuthenticationLicenseProviderBase">
            <summary>
            The base for a license provider that connects to a remote web service to authenticate the license
            </summary>
        </member>
        <member name="F:Engage.Licensing.RemoteAuthenticationLicenseProviderBase.EngageLicensingAuthorizationKey">
            <summary>
            <see cref="T:System.Guid"/> used to authenticate with the Engage licensing server.
            </summary>
        </member>
        <member name="F:Engage.Licensing.RemoteAuthenticationLicenseProviderBase.LicenseDictionary">
            <summary>
            The licenses retrieved from the server for each module
            </summary>
        </member>
        <member name="M:Engage.Licensing.RemoteAuthenticationLicenseProviderBase.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.RemoteAuthenticationLicenseProviderBase"/> class.
            </summary>
            <param name="moduleLicenseKey">The license key for the module for which this license provider is to be used</param>
        </member>
        <member name="M:Engage.Licensing.RemoteAuthenticationLicenseProviderBase.HasValidLicense(Engage.Dnn.Framework.ModuleBase,System.Guid,System.String)">
            <summary>
            Determines whether the site has a valid license for this module.
            </summary>
            <param name="control">The control being validated.</param>
            <param name="siteGuid">The site's GUID.</param>
            <param name="siteName">The portal's name.</param>
            <returns>
            <c>true</c> if the site has a valid license for this module; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.RemoteAuthenticationLicenseProviderBase.IsValid(Engage.Dnn.Framework.ModuleBase)">
            <summary>
            Determines whether this instance represents a valid license.
            </summary>
            <param name="control">The control requesting license validation.</param>
            <returns>
            <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.RemoteAuthenticationLicenseProviderBase.GetLicense(Engage.Dnn.Framework.ModuleBase,System.Boolean)">
            <summary>
            Gets a license for an instance of a DNN module, when given a context and whether the denial of a license throws an exception.
            </summary>
            <param name="control">A control that is requesting the license.</param>
            <param name="allowExceptions"><c>true</c> if a <see cref="T:System.ComponentModel.LicenseException"/> should be thrown when the component cannot be granted a license; otherwise, <c>false</c>.</param>
            <returns>
            A valid <see cref="T:System.ComponentModel.License"/>.
            </returns>
            <exception cref="T:System.ComponentModel.LicenseException">This module is not licensed. Not need to call this service.</exception>
        </member>
        <member name="T:Engage.Licensing.SingleServerLicenseProvider">
            <summary>Determines whether a given module is correctly licensed for a specific server.</summary>
        </member>
        <member name="F:Engage.Licensing.SingleServerLicenseProvider.MaximumSpanSinceSuccessfulValidation">
            <summary>The span of time for which the module can go un-validated</summary>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.SingleServerLicenseProvider"/> class.
            </summary>
            <param name="moduleLicenseKey">The license key for the module for which this license provider is to be used</param>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.GetInvalidLicenseMessage">
            <summary>
            Gets the message to display when the license evaluates as invalid.
            </summary>
            <returns>
            The heading, message, and message type to display
            </returns>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.HasValidLicense(Engage.Dnn.Framework.ModuleBase,System.Guid,System.String)">
            <summary>
            Determines whether the site has a valid license for this module.
            </summary>
            <param name="control">The control being validated.</param>
            <param name="siteGuid">The site's GUID.</param>
            <param name="siteName">The portal's name.</param>
            <returns>
            <c>true</c> if the site has a valid license for this module; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ComponentModel.LicenseException">License file was not found</exception>
            <exception cref="T:System.ComponentModel.LicenseException">Unable to validate license for more than three days</exception>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.GetLicenseFilePath(Engage.Dnn.Framework.ModuleBase)">
            <summary>
            Gets the full physical path to the license file.
            </summary>
            <param name="control">The control being validated.</param>
            <returns>The full physical path to the license file.</returns>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.HandleWebServiceException(Engage.Dnn.Framework.ModuleBase,System.String,System.Exception)">
            <summary>
            Handles exceptions from the web service call.
            </summary>
            <param name="control">The control being validated.</param>
            <param name="licenseFilePath">The full physical path to the license file.</param>
            <param name="exc">The exception to log.</param>
            <returns>Whether to count this as a valid license</returns>
            <exception cref="T:System.ComponentModel.LicenseException">Unable to validate license for more than three days</exception>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.HasLicenseFile(System.String)">
            <summary>
            Determines whether the license file exists.
            </summary>
            <param name="licenseFilePath">The full physical path to the license file.</param>
            <returns>
            <c>true</c> if the license file exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.IsLicenseFileOutOfDate(System.String)">
            <summary>
            Determines whether the license file has been updated within the <see cref="F:Engage.Licensing.SingleServerLicenseProvider.MaximumSpanSinceSuccessfulValidation"/>.
            </summary>
            <param name="licenseFilePath">The full physical path to the license file.</param>
            <returns>
            <c>true</c> if the license file has been updated within the <see cref="F:Engage.Licensing.SingleServerLicenseProvider.MaximumSpanSinceSuccessfulValidation"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.SingleServerLicenseProvider.UpdateLicenseFile(System.String,System.DateTime)">
            <summary>
            Updates the content of the license file with the given date.
            </summary>
            <param name="licenseFilePath">The full physical path to the license file.</param>
            <param name="date">The date to which the license should be updated.</param>
        </member>
        <member name="T:Engage.Dnn.Framework.Setting`1">
            <summary>Functionality for setting and retrieving settings</summary>
            <typeparam name="T">The type of the values this setting can hold</typeparam>
        </member>
        <member name="F:Engage.Dnn.Framework.Setting`1.ModuleController">
            <summary>The controller to use when getting and saving module and tab-module settings</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Setting`1.TabController">
            <summary>The controller to use when getting and saving tab settings</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.#ctor(System.String,Engage.Dnn.Framework.SettingScope,`0)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Setting`1"/> class.</summary>
            <param name="settingName">Name of the setting key.</param>
            <param name="scope">The scope of the setting.</param>
            <param name="defaultValue">The default value for this setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set``1(Engage.Dnn.Framework.IModuleControlBase,System.Nullable{``0})">
            <summary>
            Sets this setting for the specified <paramref name="moduleControl"/> to the specified <paramref name="value"/>.
            Properly converts <paramref name="value"/> to its <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> <see cref="T:System.String"/> representation for storage in the database.
            </summary>
            <typeparam name="TValue">Type of the given <paramref name="value"/></typeparam>
            <param name="moduleControl">A module control to which this setting applies.</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set``1(Engage.Dnn.Framework.IModuleControlBase,``0)">
            <summary>
            Sets this setting for the specified <paramref name="moduleControl"/> to the specified <paramref name="value"/>.
            Properly converts <paramref name="value"/> to its <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> <see cref="T:System.String"/> representation for storage in the database.
            </summary>
            <typeparam name="TValue">Type of the given <paramref name="value"/></typeparam>
            <param name="moduleControl">A module control to which this setting applies.</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},``0)">
            <summary>
            Sets this setting to the specified <paramref name="value"/>.
            Properly converts <paramref name="value"/> to its <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> <see cref="T:System.String"/> representation for storage in the database.
            </summary>
            <typeparam name="TValue">Type of the given <paramref name="value"/></typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},``0)">
            <summary>
            Sets this setting to the specified <paramref name="value"/>.
            Properly converts <paramref name="value"/> to its <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> <see cref="T:System.String"/> representation for storage in the database.
            </summary>
            <typeparam name="TValue">Type of the given <paramref name="value"/></typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set``1(System.String,DotNetNuke.Entities.Modules.ModuleInfo,``0)">
            <summary>
            Sets this setting for the specified <paramref name="moduleConfiguration"/> to the specified <paramref name="value"/>.
            Properly converts <paramref name="value"/> to its <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> <see cref="T:System.String"/> representation for storage in the database.
            </summary>
            <typeparam name="TValue">Type of the given <paramref name="value"/></typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="value">The new value of the setting.</param>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set(Engage.Dnn.Framework.IModuleControlBase,System.String)">
            <summary>Sets this setting for the specified <paramref name="moduleControl"/> to the specified <paramref name="value"/>.</summary>
            <param name="moduleControl">A module control to which this setting applies.</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Sets this setting to the specified <paramref name="value"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Sets this setting to the specified <paramref name="value"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.Set(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.String)">
            <summary>Sets this setting for the specified <paramref name="moduleConfiguration"/> to the specified <paramref name="value"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="value">The new value of the setting.</param>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsStringFor(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>Gets the value of this setting for the given <paramref name="moduleControl"/> as a <see cref="T:System.String"/>.</summary>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns>The value of this setting for the given <paramref name="moduleControl"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsStringFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Gets the value of this setting as a <see cref="T:System.String"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>The value of this setting</returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsStringFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Gets the value of this setting as a <see cref="T:System.String"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>The value of this setting</returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsStringFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.String)">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.String"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>The value of this setting for the given <paramref name="moduleConfiguration"/></returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.IsSettingDefinedFor(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>Determines whether this setting has a value for the given <paramref name="moduleControl"/>.</summary>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns><c>true</c> if the setting defined; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.IsSettingDefinedFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Determines whether this setting has a value.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <returns><c>true</c> if the setting defined; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.IsSettingDefinedFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Determines whether this setting has a value.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <returns><c>true</c> if the setting defined; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.IsSettingDefinedFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>Determines whether this setting has a value for the given <paramref name="moduleConfiguration"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <returns><c>true</c> if the setting defined; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>
            Gets the value of this setting for the given <paramref name="moduleControl"/> as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>, 
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the setting hasn't been set or isn't an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleControl"/>
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>,
            or <c>null</c> if <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> is not a <typeparamref name="TEnum"/>.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},``0)">
            <summary>Gets the value of this setting as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},``0)">
            <summary>Gets the value of this setting as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{``0})">
            <summary>Gets the value of this setting as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{``0})">
            <summary>Gets the value of this setting as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(System.String,DotNetNuke.Entities.Modules.ModuleInfo,``0)">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> must be an <see cref="T:System.Enum"/> type</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsEnumFor``1(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Nullable{``0})">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as an <see cref="T:System.Enum"/> of <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TEnum">The type of the <see cref="T:System.Enum"/> to which the value should be converted.</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TEnum"/>
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> must be an <see cref="T:System.Enum"/> type</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>
            Gets the value of this setting for the given <paramref name="moduleControl"/> as an <see cref="T:System.Int32"/>, 
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the setting hasn't been set or isn't an <see cref="T:System.Int32"/>.
            </summary>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleControl"/>
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>,
            or <c>null</c> if <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> is not an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>Gets the value of this setting as an <see cref="T:System.Int32"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>Gets the value of this setting as an <see cref="T:System.Int32"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Gets the value of this setting as an <see cref="T:System.Int32"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Gets the value of this setting as an <see cref="T:System.Int32"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Int32)">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as an <see cref="T:System.Int32"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsInt32For(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Nullable{System.Int32})">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as an <see cref="T:System.Int32"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to an <see cref="T:System.Int32"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>
            Gets the value of this setting for the given <paramref name="moduleControl"/> as a <see cref="T:System.Decimal"/>, 
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the setting hasn't been set or isn't an <see cref="T:System.Decimal"/>.
            </summary>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleControl"/>
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>,
            or <c>null</c> if <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> is not a <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Decimal)">
            <summary>Gets the value of this setting as a <see cref="T:System.Decimal"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Decimal)">
            <summary>Gets the value of this setting as a <see cref="T:System.Decimal"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>Gets the value of this setting as a <see cref="T:System.Decimal"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>Gets the value of this setting as a <see cref="T:System.Decimal"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Decimal)">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.Decimal"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDecimalFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Nullable{System.Decimal})">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.Decimal"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Decimal"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>
            Gets the value of this setting for the given <paramref name="moduleControl"/> as a <see cref="T:System.Boolean"/>, 
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the setting hasn't been set or isn't an <see cref="T:System.Boolean"/>.
            </summary>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleControl"/>
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>,
            or <c>null</c> if <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> is not a <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Gets the value of this setting as a <see cref="T:System.Boolean"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>Gets the value of this setting as a <see cref="T:System.Boolean"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>Gets the value of this setting as a <see cref="T:System.Boolean"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>Gets the value of this setting as a <see cref="T:System.Boolean"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Boolean)">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.Boolean"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsBooleanFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Nullable{System.Boolean})">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.Boolean"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.Boolean"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(Engage.Dnn.Framework.IModuleControlBase)">
            <summary>
            Gets the value of this setting for the given <paramref name="moduleControl"/> as a <see cref="T:System.DateTime"/>, 
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the setting hasn't been set or isn't an <see cref="T:System.DateTime"/>.
            </summary>
            <param name="moduleControl">A module control instance to which this setting applies.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleControl"/>
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>,
            or <c>null</c> if <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> is not a <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.DateTime)">
            <summary>Gets the value of this setting as a <see cref="T:System.DateTime"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.DateTime)">
            <summary>Gets the value of this setting as a <see cref="T:System.DateTime"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>Gets the value of this setting as a <see cref="T:System.DateTime"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>Gets the value of this setting as a <see cref="T:System.DateTime"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="portalId">The ID of the portal to which this setting applies (or <c>null</c> if it doesn't apply to a specific portal).</param>
            <param name="tabId">The ID of the tab to which this setting applies (or <c>null</c> if it doesn't apply to a specific tab).</param>
            <param name="moduleId">The ID of the module to which this setting applies (or <c>null</c> if it doesn't apply to a specific module).</param>
            <param name="tabModuleId">The ID of the tab-module to which this setting applied (or <c>null</c> if it doesn't apply to a specific tab-module).</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>
            </returns>
            <exception cref="T:System.InvalidOperationException">This instance's <see cref="P:Engage.Dnn.Framework.Setting`1.Scope"/> property was not set to a valid <see cref="T:Engage.Dnn.Framework.SettingScope"/> value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.DateTime)">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.DateTime"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueAsDateTimeFor(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Nullable{System.DateTime})">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <see cref="T:System.DateTime"/>.</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <see cref="T:System.DateTime"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.CreateModuleConfiguration(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>Creates a module configuration with the given values.</summary>
            <param name="portalId">The portal ID.</param>
            <param name="tabId">The tab ID.</param>
            <param name="moduleId">The module ID.</param>
            <param name="tabModuleId">The tab module ID.</param>
            <returns>A <see cref="T:DotNetNuke.Entities.Modules.ModuleInfo"/> instance with those values set</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetStringSetting(System.Collections.IDictionary,System.String,System.String)">
            <summary>Gets the given setting as a <see cref="T:System.String"/>, or <paramref name="defaultValue"/> if the setting is not set.</summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The setting or default as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.ConvertToString(`0)">
            <summary>
            Converts the given <paramref name="value"/> to a <see cref="T:System.String"/>, 
            using <see cref="M:System.IConvertible.ToString(System.IFormatProvider)"/> to convert it to its <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> representation 
            if <paramref name="value"/> is an <see cref="T:System.IConvertible"/>.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An invariant <see cref="T:System.String"/> representation of <paramref name="value"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.FormatSettingNameForSiteSetting(System.String)">
            <summary>Formats this instance's <see cref="P:Engage.Dnn.Framework.Setting`1.SettingName"/> for use as a site-wide setting (appending a reference to the module it applies to, in order to avoid settings collisions).</summary>
            <param name="settingNamePrefix">The prefix to use for the setting name (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <returns>The formatted setting name, ready to be used as a site-wise setting key.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Setting`1.GetValueCore``1(System.String,DotNetNuke.Entities.Modules.ModuleInfo,System.Nullable{``0},Engage.Dnn.Framework.Setting{`0}.ValueConverter{``0})">
            <summary>Gets the value of this setting for the given <paramref name="moduleConfiguration"/> as a <typeparamref name="TConvert"/>.</summary>
            <typeparam name="TConvert">The type to which the value should be converted</typeparam>
            <param name="settingNamePrefix">The prefix to use for the setting name when it's not associated with a specific module instance (<see cref="P:Engage.Dnn.Framework.IModuleControlBase.DesktopModuleName"/> is used by default in the overloads that don't specify this parameter).</param>
            <param name="moduleConfiguration">The module configuration for a module instance to which this setting applies.</param>
            <param name="defaultValue">The default value to return if the setting has not been set yet.</param>
            <param name="convertValue">
            A method which converts the <see cref="T:System.String"/> representation of the value into a <typeparamref name="TConvert"/>, 
            returning <c>null</c> if the conversion was unsuccessful.
            </param>
            <returns>
            The value of this setting for the given <paramref name="moduleConfiguration"/>
            or <paramref name="defaultValue"/> if the value does not exist yet or cannot be converted to a <typeparamref name="TConvert"/>
            </returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Setting`1.SettingName">
            <summary>Gets the name of the key used to store and retrieve this setting.</summary>
            <value>The name of the setting's key.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Setting`1.Scope">
            <summary>Gets the scope of this setting.</summary>
            <value>The setting's scope.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Setting`1.DefaultValue">
            <summary>Gets the default value.</summary>
            <value>The default value.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.Setting`1.ValueConverter`1">
            <summary>Represents a method that converts a string into a value-type, or returns <c>null</c> if the string cannot be converted.</summary>
            <typeparam name="TConvert">The type into which the value is being converted</typeparam>
            <param name="valueAsString">A <see cref="T:System.String"/> representation of the value to be converted</param>
            <returns>
            The value contained in the <paramref name="valueAsString"/> parameter as a <typeparamref name="TConvert"/>, 
            or <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> if <paramref name="valueAsString"/> cannot be converted into a <typeparamref name="TConvert"/>,
            or <c>null</c> is <see cref="P:Engage.Dnn.Framework.Setting`1.DefaultValue"/> is not a <typeparamref name="TConvert"/>.
            </returns>
        </member>
        <member name="T:Engage.Dnn.Framework.SettingsBase">
            <summary>
            The base class for all settings controls in Engage DotNetNuke modules.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.BuildLinkUrl(System.Int32,System.String)">
            <summary>
            Builds a URL for this TabId, using the given queryString parameters.
            </summary>
            <param name="moduleId">The module id of the module for which the control key is being used.</param>
            <param name="controlKey">The control key to determine which control to load.</param>
            <returns>
            A URL to the current TabId, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.BuildLinkUrl(System.Int32,System.String,System.String[])">
            <summary>
            Builds a URL for this TabId, using the given queryString parameters.
            </summary>
            <param name="moduleId">The module id of the module for which the control key is being used.</param>
            <param name="controlKey">The control key to determine which control to load.</param>
            <param name="queryStringParameters">Any other queryString parameters.</param>
            <returns>
            A URL to the current TabId, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.BuildLinkUrl(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Builds a URL for the given <paramref name="tabId"/>, using the given queryString parameters.
            </summary>
            <param name="tabId">The tab id of the page to navigate to.</param>
            <param name="moduleId">The module id of the module for which the control key is being used.</param>
            <param name="controlKey">The control key to determine which control to load.</param>
            <param name="queryStringParameters">Any other queryString parameters.</param>
            <returns>
            A URL to the given <paramref name="tabId"/>, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.BuildLinkUrl(System.Int32,System.String[])">
            <summary>
            Builds a URL for the given <paramref name="tabId"/>, using the given queryString parameters.
            </summary>
            <param name="tabId">The tab id of the page to navigate to.</param>
            <param name="queryStringParameters">The queryString parameters.</param>
            <returns>
            A URL to the given <paramref name="tabId"/>, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.AddJQueryReference">
            <summary>Adds a reference to jQuery to this page.</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.Localize(System.String)">
            <summary>
            Localizes the specified resource key, from this control's <see cref="P:DotNetNuke.Entities.Modules.PortalModuleBase.LocalResourceFile"/>.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <returns>
            The localized text for the given <paramref name="resourceKey"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SettingsBase.Localize(System.String,System.String)">
            <summary>
            Localizes the specified resource key, from the given <paramref name="resourceFileRoot"/>.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="resourceFileRoot">The path to the file with the localized resources.</param>
            <returns>
            The localized text for the given <paramref name="resourceKey"/>
            </returns>
        </member>
        <member name="P:Engage.Dnn.Framework.SettingsBase.LocalSharedResourceFile">
            <summary>
            Gets the resource file to use for resources that are shared across controls within a module.
            </summary>
            <value>The resource file for shared resources within the module.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.SettingsBase.DesktopModuleName">
            <summary>
            Gets the name of the this module's desktop module record in DNN.
            </summary>
            <value>The name of this module's desktop module record in DNN.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.SettingsBase.DesktopModuleFolderName">
            <summary>
            Gets the name of the desktop module folder for this module.
            </summary>
            <value>The name of the desktop module folder for this module.</value>
        </member>
        <member name="T:Engage.Licensing.DesigntimeEngageLicense">
            <summary>
            A design-time license
            </summary>
        </member>
        <member name="F:Engage.Licensing.DesigntimeEngageLicense.type">
            <summary>
            The type being licensed
            </summary>
        </member>
        <member name="M:Engage.Licensing.DesigntimeEngageLicense.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.DesigntimeEngageLicense"/> class.
            </summary>
            <param name="type">The type being licensed.</param>
            <exception cref="T:System.ArgumentNullException"><c>type</c> is null.</exception>
        </member>
        <member name="M:Engage.Licensing.DesigntimeEngageLicense.Dispose">
            <summary>
            Disposes of the resources used by the license.
            </summary>
        </member>
        <member name="M:Engage.Licensing.DesigntimeEngageLicense.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Engage.Licensing.DesigntimeEngageLicense.LicenseKey">
            <summary>
            Gets the license key granted to this component.
            </summary>
            <value></value>
            <returns>
            A license key granted to this component.
            </returns>
        </member>
        <member name="T:Engage.Licensing.TrialLicenseProvider">
            <summary>
            Determines whether a given trial version of a module is still licensed.
            </summary>
        </member>
        <member name="M:Engage.Licensing.TrialLicenseProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.TrialLicenseProvider"/> class.
            </summary>
            <param name="moduleLicenseKey">The license key for the module for which this license provider is to be used</param>
        </member>
        <member name="M:Engage.Licensing.TrialLicenseProvider.GetInvalidLicenseMessage">
            <summary>
            Gets the message to display when the license evaluates as invalid.
            </summary>
            <returns>
            The heading, message, and message type to display
            </returns>
        </member>
        <member name="M:Engage.Licensing.TrialLicenseProvider.HasValidLicense(Engage.Dnn.Framework.ModuleBase,System.Guid,System.String)">
            <summary>
            Determines whether the site has a valid license for this module.
            </summary>
            <param name="control">The control being validated.</param>
            <param name="siteGuid">The site's GUID.</param>
            <param name="siteName">The portal's name.</param>
            <returns>
            <c>true</c> if the site has a valid license for this module; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Engage.Licensing.NullLicenseProvider">
            <summary>
            A license provider that is always valid.
            </summary>
        </member>
        <member name="M:Engage.Licensing.NullLicenseProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.NullLicenseProvider"/> class.
            </summary>
        </member>
        <member name="M:Engage.Licensing.NullLicenseProvider.IsValid(Engage.Dnn.Framework.ModuleBase)">
            <summary>
            Determines whether this instance represents a valid license.
            </summary>
            <param name="control">The control requesting license validation.</param>
            <returns>
            <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Engage.Licensing.NullLicenseProvider.GetInvalidLicenseMessage">
            <summary>
            Gets the message to display when the license evaluates as invalid.
            </summary>
            <returns>
            The heading, message, and message type to display
            </returns>
        </member>
        <member name="T:Engage.Licensing.RuntimeEngageLicense">
            <summary>
            A runtime license
            </summary>
        </member>
        <member name="F:Engage.Licensing.RuntimeEngageLicense.type">
            <summary>
            THe type being licensed
            </summary>
        </member>
        <member name="M:Engage.Licensing.RuntimeEngageLicense.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Licensing.RuntimeEngageLicense"/> class.
            </summary>
            <param name="type">The type being licensed.</param>
            <exception cref="T:System.ArgumentNullException"><c>type</c> is null.</exception>
        </member>
        <member name="M:Engage.Licensing.RuntimeEngageLicense.Dispose">
            <summary>
            Disposes of the resources used by the license.
            </summary>
        </member>
        <member name="M:Engage.Licensing.RuntimeEngageLicense.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Engage.Licensing.RuntimeEngageLicense.LicenseKey">
            <summary>
            Gets the license key granted to this component.
            </summary>
            <value></value>
            <returns>
            A license key granted to this component.
            </returns>
        </member>
        <member name="P:Engage.Licensing.RuntimeEngageLicense.DaysLeft">
            <summary>Gets the number of days left.</summary>
            <value>The number 5.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.ModuleBase">
            <summary>
            The base class for all non-settings controls in Engage DotNetNuke modules.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.ModuleBase.licenseProvider">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.ModuleBase.LicenseProvider"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.ModuleBase.templateProvider">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.ModuleBase.TemplateProvider"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.ModuleBase.requiresScriptManager">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.ModuleBase.RequiresScriptManager"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.BuildLinkUrlStatically(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Builds the link URL statically.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="moduleId">The module id.</param>
            <param name="controlKey">The control key.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <returns>Url as a string.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.BuildLinkUrlStatically(System.Int32,System.String[])">
            <summary>
            Builds the link URL statically.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <returns>Url as a string.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.GetCurrentControlKey(System.Int32)">
            <summary>
            Gets the <c>QueryString</c> control key for the current <c>Request</c>.
            </summary>
            <param name="moduleId">The module id.</param>
            <returns>
            The <c>QueryString</c> control key for the current <c>Request</c>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.BuildLinkUrl(System.Int32,System.String)">
            <summary>
            Builds a URL for this TabId, using the given queryString parameters.
            </summary>
            <param name="moduleId">The module id of the module for which the control key is being used.</param>
            <param name="controlKey">The control key to determine which control to load.</param>
            <returns>
            A URL to the current TabId, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.BuildLinkUrl(System.Int32,System.String,System.String[])">
            <summary>
            Builds a URL for this TabId, using the given queryString parameters.
            </summary>
            <param name="moduleId">The module id of the module for which the control key is being used.</param>
            <param name="controlKey">The control key to determine which control to load.</param>
            <param name="queryStringParameters">Any other queryString parameters.</param>
            <returns>
            A URL to the current TabId, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.BuildLinkUrl(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            Builds a URL for the given <paramref name="tabId"/>, using the given queryString parameters.
            </summary>
            <param name="tabId">The tab id of the page to navigate to.</param>
            <param name="moduleId">The module id of the module for which the control key is being used.</param>
            <param name="controlKey">The control key to determine which control to load.</param>
            <param name="queryStringParameters">Any other queryString parameters.</param>
            <returns>
            A URL to the given <paramref name="tabId"/>, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.BuildLinkUrl(System.Int32,System.String[])">
            <summary>
            Builds a URL for the given <paramref name="tabId"/>, using the given queryString parameters.
            </summary>
            <param name="tabId">The tab id of the page to navigate to.</param>
            <param name="queryStringParameters">The queryString parameters.</param>
            <returns>
            A URL to the given <paramref name="tabId"/>, with the given queryString parameters
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.AddJQueryReference">
            <summary>Adds a reference to jQuery to this page.</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.AddJQueryUIReference">
            <summary>Adds a reference to jQuery UI 1.8.16 and jQuery to this page.</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.GetCurrentControlKey">
            <summary>
            Gets the <c>QueryString</c> control key for the current <c>Request</c>.
            </summary>
            <returns>The <c>QueryString</c> control key for the current <c>Request</c></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.GetTemplate(System.String)">
            <summary>
            Gets the <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the template in the given folder.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <returns>The <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the template in the given folder.</returns>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.GetTemplates(Engage.Dnn.Framework.Templating.TemplateType)">
            <summary>
            Gets the list of <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instances representing the templates in this module's templates folder.
            </summary>
            <param name="templateType">Type of the templates to retrieve.</param>
            <returns>
            The <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the template in the given folder.
            </returns>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The one of the templates' manifests does not conform to the EngageManifest schema.</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.Localize(System.String)">
            <summary>
            Localizes the specified resource key, from this control's <see cref="P:DotNetNuke.Entities.Modules.PortalModuleBase.LocalResourceFile"/>.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <returns>
            The localized text for the given <paramref name="resourceKey"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.Localize(System.String,System.String)">
            <summary>
            Localizes the specified resource key, from the given <paramref name="resourceFileRoot"/>.
            </summary>
            <param name="resourceKey">The resource key.</param>
            <param name="resourceFileRoot">The path to the file with the localized resources.</param>
            <returns>
            The localized text for the given <paramref name="resourceKey"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.Load"/> event of this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.ModuleBase.Page_PreRender(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Web.UI.Control.PreRender"/> event of this control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.ApplicationUrl">
            <summary>
            Gets the application URL.
            </summary>
            <value>The application URL.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.IsLoggedIn">
            <summary>
            Gets a value indicating whether the current user is logged in.
            </summary>
            <value>
            <c>true</c> if the current user is logged in; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.LocalSharedResourceFile">
            <summary>
            Gets the resource file to use for resources that are shared across controls within a module.
            </summary>
            <value>The resource file for shared resources within the module.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.DesktopModuleName">
            <summary>
            Gets the name of the this module's desktop module record in DNN.
            </summary>
            <value>The name of this module's desktop module record in DNN.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.DesktopModuleFolderName">
            <summary>
            Gets the name of the desktop module folder for this module.
            </summary>
            <value>The name of the desktop module folder for this module.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.IsAdmin">
            <summary>
            Gets a value indicating whether the current user has edit rights to this module.
            </summary>
            <value><c>true</c> if the current user can edit the module; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.TemplateProvider">
            <summary>
            Gets or sets the template provider to use for providing templating functionality within this control.
            </summary>
            <value>The template provider to use for providing templating functionality within this control</value>
            <exception cref="T:System.ArgumentNullException"><c>value</c> is null.</exception>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.BasePage">
            <summary>
            Gets this control's page as the DNN Framework page.
            </summary>
            <value>The DNN Framework page on which this control sits, or <c>null</c> if it doesn't sit on the DNN Framework page.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.LicenseProvider">
            <summary>
            Gets or sets the license provider to use for validating a license for this module.
            </summary>
            <value>The license provider to use for validating a license for this module.</value>
            <exception cref="T:System.ArgumentNullException"><c>value</c> is null.</exception>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.RequiresScriptManager">
            <summary>
            Gets or sets a value indicating whether this module should register a <c>ScriptManager</c> control on the page.
            </summary>
            <value>
            <c>true</c> if this module should register a <c>ScriptManager</c> control on the page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Engage.Dnn.Framework.ModuleBase.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <remarks>This can/should always be overwritten in 
            specific projects to decide what means configured for that module.
            </remarks>
            <value>
            <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Engage.Dnn.Framework.SettingScope">
            <summary>
            The scope of the setting, how which instances of the module it affects
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SettingScope.Portal">
            <summary>
            A setting that affects every instance of the module throughout the site.
            Typically used for basic, fundamental setup necessary to use the module in any capacity.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SettingScope.Module">
            <summary>
            A setting that affects an instance of a module, including any referenced copies of that module.
            Typically used for settings that pertain to what data is being displayed by the module.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SettingScope.TabModule">
            <summary>
            A setting that only affects a specific instance of a module on a page.
            Typically used for settings that determine how the data of the module is being displayed.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SettingScope.Tab">
            <summary>
            A setting that only affects every instance of the module on a particular page.
            Typically used for settings that affect a satellite module and the module it's connected to.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SettingScope.Host">
            <summary>
            A setting that affects the entire installation.
            Typically used in client implementations, possibly for information that needs to be accessible from scheduler or other services.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SettingScope.AppSetting">
            <summary>
            A setting that affects the entire installation.
            Typically used in client implementations, possibly for information that needs to be accessible from scheduler or other services.
            Stored in the web.config for easy changing between environments, without using the setting name prefix.
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.SubControlInfo">
            <summary>
            Information about the sub-controls loaded by a DotNetNuke module based on a key on the <c>QueryString</c>.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SubControlInfo.controlPath">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.SubControlInfo.ControlPath"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.SubControlInfo.requiresEditPermission">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.SubControlInfo.RequiresEditPermission"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.SubControlInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.SubControlInfo"/> struct.
            </summary>
            <param name="controlPath">The path to the control, relative to the module's <see cref="P:Engage.Dnn.Framework.ModuleBase.DesktopModuleFolderName"/>.</param>
            <param name="requiresEditPermission">if set to <c>true</c> this sub-control requires the user to have edit permission in order to view it.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="controlPath"/> is null</exception>
            <exception cref="T:System.ArgumentException"><paramref name="controlPath"/> does not have a value</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.SubControlInfo.op_Equality(Engage.Dnn.Framework.SubControlInfo,Engage.Dnn.Framework.SubControlInfo)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if <paramref name="left"/> equals <paramref name="right"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SubControlInfo.op_Inequality(Engage.Dnn.Framework.SubControlInfo,Engage.Dnn.Framework.SubControlInfo)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns><c>true</c> if <paramref name="left"/> does not equal <paramref name="right"/>, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SubControlInfo.Equals(Engage.Dnn.Framework.SubControlInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:Engage.Dnn.Framework.SubControlInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.SubControlInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Engage.Dnn.Framework.SubControlInfo.ControlPath">
            <summary>
            Gets the path to the control, relative to the module's <see cref="P:Engage.Dnn.Framework.ModuleBase.DesktopModuleFolderName"/>.
            </summary>
            <value>The path to the control</value>
        </member>
        <member name="P:Engage.Dnn.Framework.SubControlInfo.RequiresEditPermission">
            <summary>
            Gets a value indicating whether this sub-control requires the user to have edit permission in order to view it.
            </summary>
            <value>
            <c>true</c> if this sub-control requires the user to have edit permission in order to view it; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Engage.Dnn.Framework.TemplatedModulePresenter`2">
            <summary>The abstract class used by as the Presenter for all views that use Engage Templating.</summary>
            <typeparam name="TView">The type of the view.</typeparam>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="F:Engage.Dnn.Framework.TemplatedModulePresenter`2.templateProvider">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.TemplatedModulePresenter`2.TemplateProvider"/></summary>
        </member>
        <member name="M:Engage.Dnn.Framework.TemplatedModulePresenter`2.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.TemplatedModulePresenter`2"/> class.</summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.TemplatedModulePresenter`2.GetTemplate(System.String)">
            <summary>Gets the <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the template in the given folder.</summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <returns>The <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the template in the given folder.</returns>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
        </member>
        <member name="P:Engage.Dnn.Framework.TemplatedModulePresenter`2.CurrentPageIndex">
            <summary>Gets the current page index from the query-string.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.TemplatedModulePresenter`2.TemplateProvider">
            <summary>Gets or sets the template provider to use for providing templating functionality within this control.</summary>
            <value>The template provider to use for providing templating functionality within this control</value>
            <exception cref="T:System.ArgumentNullException"><c>value</c> is null.</exception>
        </member>
        <member name="P:Engage.Dnn.Framework.TemplatedModulePresenter`2.DesktopModuleName">
            <summary>Gets the name of the desktop module associated with this view.</summary>
            <value>The name of the view's desktop module.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.TemplatedModuleView`1">
            <summary>The view of a <see cref="T:Engage.Dnn.Framework.TemplatedModulePresenter`2"/></summary>
            <typeparam name="TModel">The type of the model.</typeparam>
        </member>
        <member name="M:Engage.Dnn.Framework.TemplatedModuleView`1.ProcessTag(System.Web.UI.Control,Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>
            This method is used to process tags that aren't already handled by the ProcessCommonTags in this project or handled higher up
            in the Engage.Dnn.Framework. See documentation for types of tokens already handled by the Framework.
            </summary>
            <param name="container">The container to place the control.</param>
            <param name="tag">The tag to parse.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>A <c>true</c> if the tag was handled by this process.</returns>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase">
            <summary>
            Base class for global template items
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ITemplateable">
            <summary>
            Defines the contract of an object which can be bound within the Engage templating system
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateable.GetValue(System.String)">
            <summary>
            Gets the value of the property with the given <paramref name="propertyName"/>, or <see cref="F:System.String.Empty"/> if a property with that name does not exist on this object or is <c>null</c>.
            </summary>
            <remarks>
            To avoid conflicts with template syntax, avoid using the following symbols in the property name
            <list type="bullet">
                <item><description>:</description></item>
                <item><description>%</description></item>
                <item><description>$</description></item>
                <item><description>#</description></item>
                <item><description>&gt;</description></item>
                <item><description>&lt;</description></item>
                <item><description>"</description></item>
                <item><description>'</description></item>
            </list>
            </remarks>
            <param name="propertyName">Name of the property.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateable.GetValue(System.String,System.String)">
            <summary>
            Gets the value of the property with the given <paramref name="propertyName"/>, or <see cref="F:System.String.Empty"/> if a property with that name does not exist on this object or is <c>null</c>.
            </summary>
            <remarks>
            To avoid conflicts with template syntax, avoid using the following symbols in the property name
            <list type="bullet">
                <item><description>:</description></item>
                <item><description>%</description></item>
                <item><description>$</description></item>
                <item><description>#</description></item>
                <item><description>&gt;</description></item>
                <item><description>&lt;</description></item>
                <item><description>"</description></item>
                <item><description>'</description></item>
            </list>
            </remarks>
            <param name="propertyName">Name of the property.</param>
            <param name="format">
            A numeric or DateTime format string, or one of the string formatting options accepted by <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.FormatString(System.String,System.String)"/>,
            or <c>null</c> or <see cref="F:System.String.Empty"/> to apply the default format.
            </param>
            <returns>The string representation of the value of this instance as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.portalTimeZone">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.PortalTimeZone"/>
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.userTimeZone">
            <summary>
            Backing field for <see cref="P:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.UserTimeZone"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase"/> class.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.GetValue(System.String)">
            <summary>
            Gets the value of the property with the given <paramref name="propertyName"/>, or <see cref="F:System.String.Empty"/> if a property with that name does not exist on this object or is <c>null</c>.
            </summary>
            <remarks>
            To avoid conflicts with template syntax, avoid using the following symbols in the property name
            <list type="bullet">
                <item><description>:</description></item>
                <item><description>%</description></item>
                <item><description>$</description></item>
                <item><description>#</description></item>
                <item><description>&gt;</description></item>
                <item><description>&lt;</description></item>
                <item><description>"</description></item>
                <item><description>'</description></item>
            </list>
            </remarks>
            <param name="propertyName">Name of the property.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.GetValue(System.String,System.String)">
            <summary>
            Gets the value of the property with the given <paramref name="propertyName"/>, or <see cref="F:System.String.Empty"/> if a property with that name does not exist on this object or is <c>null</c>.
            </summary>
            <remarks>
            To avoid conflicts with template syntax, avoid using the following symbols in the property name
            <list type="bullet">
                <item><description>:</description></item>
                <item><description>%</description></item>
                <item><description>$</description></item>
                <item><description>#</description></item>
                <item><description>&gt;</description></item>
                <item><description>&lt;</description></item>
                <item><description>"</description></item>
                <item><description>'</description></item>
            </list>
            </remarks>
            <param name="propertyName">Name of the property.</param>
            <param name="format">
            A numeric or DateTime format string, or one of the string formatting options accepted by <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.FormatString(System.String,System.String)"/>,
            or <c>null</c> or <see cref="F:System.String.Empty"/> to apply the default format.
            </param>
            <returns>The string representation of the value of this instance as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.PortalSettings">
            <summary>
            Gets the current portal settings.
            </summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.User">
            <summary>
            Gets the current user.
            </summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.PortalTimeZone">
            <summary>
            Gets the portal time zone.
            </summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.GlobalTemplateContextBase.UserTimeZone">
            <summary>
            Gets the user time zone.
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference">
            <summary>A script library to reference when displaying a template</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptLibraryReference.libraryName">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ScriptLibraryReference.LibraryName"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptLibraryReference.version">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ScriptLibraryReference.Version"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptLibraryReference.versionSpecificity">
            <summary>Backing field for <see cref="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion"/></summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptLibraryReference.#ctor(System.String,System.Version,System.Nullable{Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion})">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference"/> struct.</summary>
            <param name="libraryName">The library's name.</param>
            <param name="version">The version, or <c>null</c>.</param>
            <param name="versionSpecificity">The specificity of the <paramref name="version"/>, or <c>null</c></param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptLibraryReference.op_Equality(Engage.Dnn.Framework.Templating.ScriptLibraryReference,Engage.Dnn.Framework.Templating.ScriptLibraryReference)">
            <summary>Implements the <c>==</c> operator.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptLibraryReference.op_Inequality(Engage.Dnn.Framework.Templating.ScriptLibraryReference,Engage.Dnn.Framework.Templating.ScriptLibraryReference)">
            <summary>Implements the <c>!=</c> operator.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptLibraryReference.Equals(Engage.Dnn.Framework.Templating.ScriptLibraryReference)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptLibraryReference.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptLibraryReference.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ScriptLibraryReference.LibraryName">
            <summary>Gets the library's name.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ScriptLibraryReference.Version">
            <summary>Gets the version, or <c>null</c>.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ScriptLibraryReference.VersionSpecificity">
            <summary>Gets the <see cref="P:Engage.Dnn.Framework.Templating.ScriptLibraryReference.Version"/>'s specificity, or <c>null</c>.</summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion">
            <summary>How specific the supplied version should be</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion.Latest">
            <summary>The latest version of the library</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion.LatestMajor">
            <summary>The latest version of the library that adheres to the passed in major version</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion.LatestMinor">
            <summary>The latest version of the library that adheres to the passed in minor version</summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ScriptReference">
            <summary>A script to reference when displaying a template</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptReference.scriptPath">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ScriptReference.ScriptPath"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptReference.provider">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ScriptReference.Provider"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.ScriptReference.priority">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.ScriptReference.Priority"/></summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptReference.#ctor(System.String,System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.ScriptReference"/> struct.</summary>
            <param name="scriptPath">The script path.</param>
            <param name="provider">The provider.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptReference.op_Equality(Engage.Dnn.Framework.Templating.ScriptReference,Engage.Dnn.Framework.Templating.ScriptReference)">
            <summary>Implements the <c>==</c> operator.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptReference.op_Inequality(Engage.Dnn.Framework.Templating.ScriptReference,Engage.Dnn.Framework.Templating.ScriptReference)">
            <summary>Implements the <c>!=</c> operator.</summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptReference.Equals(Engage.Dnn.Framework.Templating.ScriptReference)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns><c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptReference.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.</summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ScriptReference.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ScriptReference.ScriptPath">
            <summary>Gets the script path.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ScriptReference.Provider">
            <summary>Gets the provider.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.ScriptReference.Priority">
            <summary>Gets the priority.</summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.SingleItemTemplateProvider">
            <summary>
            A template provider for a single <see cref="T:Engage.Dnn.Framework.Templating.ITemplateable"/> instance
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplateProvider">
            <summary>Provides the main functionality for instantiating a template</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateProvider.JavaScriptLibraryType">
            <summary>The <see cref="T:System.Type"/> used to register JavaScript libraries on the page</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateProvider.SpecificVersionEnumType">
            <summary>The <see cref="T:System.Type"/> in DNN that corresponds to the <see cref="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion"/> enumeration</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateProvider.SpecificVersionEnumValues">
            <summary>A dictionary mapping between a <see cref="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference.SpecificVersion"/> value and its corresponding value from the <see cref="F:Engage.Dnn.Framework.Templating.TemplateProvider.SpecificVersionEnumType"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateProvider.JavaScriptLibraryRegistrationFallbackMap">
            <summary>A <see cref="T:System.Collections.Generic.Dictionary`2"/> mapping between a JavaScript library name, and a method from before DNN 7.2 which registers it on the page</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.TemplateProvider"/> class.
            </summary>
            <param name="displayTemplate">Name of the template to use for the main display of content.</param>
            <param name="displayContainer">The container into which the main display of content should be injected.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">A delegate which can be used to get a list of items to process, given an Engage:List tag.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.TemplateProvider"/> class.
            </summary>
            <param name="displayTemplate">Name of the template to use for the main display of content.</param>
            <param name="displayContainer">The container into which the main display of content should be injected.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">A delegate which can be used to get a list of items to process, given an Engage:List tag.</param>
            <param name="initialTemplateItem">The initial item to use as context within the template, or <c>null</c> to provide no initial context.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.TemplateProvider"/> class.
            </summary>
            <param name="displayTemplate">Name of the template to use for the main display of content.</param>
            <param name="displayContainer">The container into which the main display of content should be injected.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">A delegate which can be used to get a list of items to process, given an Engage:List tag.</param>
            <param name="initialTemplateItem">The initial item to use as context within the template, or <c>null</c> to provide no initial context.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.Init">
            <summary>
            Initialization code to run during a page's <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.Load">
            <summary>
            When overridden in a subclass, causes operations to run during a page's <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.PreRender">
            <summary>
            When overridden in a subclass, causes operations to run during a page's <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.RegisterScriptLibraries(System.Collections.Generic.IEnumerable{Engage.Dnn.Framework.Templating.ScriptLibraryReference})">
            <summary>Registers the script libraries.</summary>
            <param name="scriptLibraries">The script libraries.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.RegisterScripts(System.Web.UI.Page,System.Collections.Generic.IEnumerable{Engage.Dnn.Framework.Templating.ScriptReference})">
            <summary>Registers the scripts.</summary>
            <param name="page">The page.</param>
            <param name="scripts">The scripts.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateProvider.RegisterStyleSheet(System.Web.UI.Page,System.String)">
            <summary>Registers the style-sheet.</summary>
            <param name="page">The page.</param>
            <param name="styleSheet">The style-sheet path, relative to the template.</param>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateProvider.ProcessTag">
            <summary>
            Gets or sets a delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.
            </summary>
            <value>A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateProvider.GetListData">
            <summary>
            Gets a delegate which can be used to get a list of items to process, given an Engage:List tag.
            </summary>
            <value>A delegate which can be used to get a list of items to process, given an Engage:List tag.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateProvider.DisplayTemplate">
            <summary>
            Gets the name of the template to use for the main display of content.
            </summary>
            <value>Name of the template to use for the main display of content.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateProvider.DisplayContainer">
            <summary>
            Gets the container into which the main display of content should be injected.
            </summary>
            <value>The container into which the main display of content should be injected</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateProvider.InitialTemplateItem">
            <summary>
            Gets the initial item to use as context within the template, or <c>null</c> to provide no initial context.
            </summary>
            <value>The initial item to use as context within the template, or <c>null</c> to provide no initial context.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateProvider.GlobalItem">
            <summary>
            Gets the global item to use as fallback context within the template, or <c>null</c> to provide no global context.
            </summary>
            <value>The global item to use as fallback context within the template, or <c>null</c> to provide no global context.</value>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.SingleItemTemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.SingleItemTemplateProvider"/> class.
            </summary>
            <param name="displayTemplate">Name of the template to use for the main display of content.</param>
            <param name="displayContainer">The container into which the main display of content should be injected.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">A delegate which can be used to get a list of items to process, given an Engage:List tag.</param>
            <param name="item">The item for which the template should be instantiated.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.SingleItemTemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.SingleItemTemplateProvider"/> class.
            </summary>
            <param name="displayTemplate">Name of the template to use for the main display of content.</param>
            <param name="displayContainer">The container into which the main display of content should be injected.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">A delegate which can be used to get a list of items to process, given an Engage:List tag.</param>
            <param name="item">The item for which the template should be instantiated.</param>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider">
            <summary>
            Implementation of <see cref="T:Engage.Dnn.Framework.Templating.ITemplateProvider"/> for getting a <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance from a manifest file
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.ITemplateProvider">
            <summary>
            Represents the contract for a class able to get a <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> object based on the templates folder path and the template folder name
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateProvider.GetTemplateManifest(System.String)">
            <summary>
            Gets the XML document for a template manifest
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <returns>The <see cref="T:System.Xml.XPath.IXPathNavigable"/> instance representing the template manifest for a template</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateProvider.GetTemplate(System.String,System.String)">
            <summary>
            Gets the text content of the template file.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <param name="templateFileName">The filename of the template file.</param>
            <returns>The text content of the template file</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateProvider.GetTemplateFolders">
            <summary>
            Gets the list of folders under the module's template folder.
            </summary>
            <returns>A list of the names of the folders under the module's template folder</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateProvider.GetRelativePath(System.String,System.String)">
            <summary>
            Gets the relative path for the given <paramref name="fileName"/>.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <param name="fileName">Name of the file to qualify with the path.</param>
            <returns>A relative path to the given <paramref name="fileName"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.ITemplateProvider.GetPhysicalPath(System.String,System.String)">
            <summary>
            Gets the physical file path for the given <paramref name="fileName"/>.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <param name="fileName">Name of the file to qualify with the path.</param>
            <returns>The physical file path to the given <paramref name="fileName"/></returns>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.desktopModuleName">
            <summary>
            The name of the module's desktop module record in DNN
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.subdirectory">
            <summary>
            The name of the templates' subdirectory, or <c>null</c> to look in the module's main Templates directory
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider"/> class.
            </summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider"/> class.
            </summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
            <param name="subdirectory">The name of the templates' subdirectory, or <c>null</c> to look in the module's main Templates directory</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.GetTemplateManifest(System.String)">
            <summary>
            Gets the XML document for a template manifest
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <returns>
            The <see cref="T:System.Xml.XPath.IXPathNavigable"/> instance representing the template manifest for a template
            </returns>
            <exception cref="T:System.ArgumentNullException"><c>templateFolderName</c> is null.</exception>
            <exception cref="T:System.Xml.XmlException">Template manifest is not well-formed.</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.GetTemplate(System.String,System.String)">
            <summary>
            Gets the text content of the template file.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <param name="templateFileName">The filename of the template file.</param>
            <returns>The text content of the template file</returns>
            <exception cref="T:System.IO.PathTooLongException">
                The specified path, file name, or both exceed the system-defined maximum length. 
                For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
                <para>Path specified a file that is read-only.</para>
                <para>-or-</para>
                <para>This operation is not supported on the current platform.</para>
                <para>-or-</para>
                <para>Path specified a directory.</para>
                <para>-or-</para>
                <para>The caller does not have the required permission.</para>
            </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Unable to find the specified file</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.GetTemplateFolders">
            <summary>
            Gets the list of folders under the module's template folder.
            </summary>
            <returns>A list of the names of the folders under the module's template folder</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">
                The specified path, file name, or both exceed the system-defined maximum length. 
                For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.GetRelativePath(System.String,System.String)">
            <summary>
            Gets the relative path for the given <paramref name="fileName"/>.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <param name="fileName">Name of the file to qualify with the path.</param>
            <returns>
            A relative path to the given <paramref name="fileName"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.GetPhysicalPath(System.String,System.String)">
            <summary>
            Gets the physical file path for the given <paramref name="fileName"/>.
            </summary>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <param name="fileName">Name of the file to qualify with the path.</param>
            <returns>
            The physical file path to the given <paramref name="fileName"/>
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.FileBasedTemplateProvider.HandleUnfindableTemplateFile(System.Exception,System.String)">
            <summary>
            Throws a generic message when a template file (with the given <paramref name="fileName"/>) cannot be found.
            </summary>
            <param name="exc">The actual exception thrown when trying to read the file.</param>
            <param name="fileName">The full name of the file that could not be found.</param>
            <exception cref="T:System.IO.FileNotFoundException">Unable to find the specified file</exception>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.NullTemplateProvider">
            <summary>
            A null implementation of <see cref="T:Engage.Dnn.Framework.Templating.TemplateProvider"/> to use for control that are not templated
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.NullTemplateProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.NullTemplateProvider"/> class.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.NullTemplateProvider.Init">
            <summary>
            Initialization code to run during a page's <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.PagingTemplateProvider">
            <summary>A listing with paging tokens.</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.PagingTemplateProvider.processTag">
            <summary>
            A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.
            This will be called from <see cref="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.ProcessPagingTags(System.Web.UI.Control,Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,System.String,Engage.Dnn.Framework.Templating.ItemPagingState,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.PagingTemplateProvider"/> class.</summary>
            <param name="itemTemplate">Name of the template to use for the main display of content.</param>
            <param name="itemContainer">The container into which the main display of content should be injected.</param>
            <param name="pageUrlTemplate">The URL to use for the paging buttons, with the page number templated out for use with <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> (that is, "{0}").</param>
            <param name="itemPagingState">The state of the paging for this list of items.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,System.String,Engage.Dnn.Framework.Templating.ItemPagingState,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.PagingTemplateProvider"/> class.</summary>
            <param name="itemTemplate">Name of the template to use for the main display of content.</param>
            <param name="itemContainer">The container into which the main display of content should be injected.</param>
            <param name="pageUrlTemplate">The URL to use for the paging buttons, with the page number templated out for use with <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> (that is, "{0}").</param>
            <param name="itemPagingState">The state of the paging for this list of items.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <param name="initialTemplateItem">The initial template item.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.#ctor(Engage.Dnn.Framework.Templating.TemplateInfo,System.Web.UI.Control,System.String,Engage.Dnn.Framework.Templating.ItemPagingState,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.PagingTemplateProvider"/> class.</summary>
            <param name="itemTemplate">Name of the template to use for the main display of content.</param>
            <param name="itemContainer">The container into which the main display of content should be injected.</param>
            <param name="pageUrlTemplate">The URL to use for the paging buttons, with the page number templated out for use with <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> (that is, "{0}").</param>
            <param name="itemPagingState">The state of the paging for this list of items.</param>
            <param name="processTag">A delegate which can be used to process the collection of tags that cannot be handled generically by the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/>.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <param name="initialTemplateItem">The initial template item.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.Init">
            <summary>Initialization code to run during a page's <see cref="E:System.Web.UI.Control.Init"/> event.</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.SetVisibility(System.Web.UI.Control,System.Boolean)">
            <summary>
            Sets the <see cref="P:System.Web.UI.Control.Visible"/> property of a potentially-<c>null</c> <see cref="T:System.Web.UI.Control"/> to the value of the given <paramref name="visible"/>.
            </summary>
            <param name="control">The control to set visibility on.</param>
            <param name="visible">if set to <c>true</c> <paramref name="control"/>'s <see cref="P:System.Web.UI.Control.Visible"/> property is set to <c>true</c>, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.ProcessPagingTags(System.Web.UI.Control,Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>
            Method used to process a token. This method is invoked from the <see cref="T:Engage.Dnn.Framework.Templating.TemplateEngine"/> class. Since this control knows
            best on how to construct the page. ListingHeader, ListingItem and Listing Footer templates are processed here.
            </summary>
            <param name="container">The container.</param>
            <param name="tag">The tag being processed.</param>
            <param name="templateItem">The engage object.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <returns>Whether to process the tag's ChildTags collection</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreateStartItem(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates the start item.</summary>
            <param name="tag">The tag.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>Returns a label for the start number </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreateEndItem(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates the start item.</summary>
            <param name="tag">The tag.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>Returns a label for the start number </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreatePageXofYLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates a label with the current page number and total page count.</summary>
            <param name="tag">The tag.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>A <see cref="T:System.Web.UI.WebControls.Label"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreateCurrentPageLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates a label with the current page number.</summary>
            <param name="tag">The tag.</param>
            <param name="templateItem">The template item.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>A <see cref="T:System.Web.UI.WebControls.Label"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreateNextLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates a link to the next page (hiding the link if it is the last page).</summary>
            <param name="tag">The tag being processed.</param>
            <param name="templateItem">The engage object.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <returns>A new <see cref="T:System.Web.UI.WebControls.HyperLink"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreatePreviousLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates a link to the previous page (hiding the link if it is the first page).</summary>
            <param name="tag">The tag being processed.</param>
            <param name="templateItem">The engage object.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <returns>A new <see cref="T:System.Web.UI.WebControls.HyperLink"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreatePageCountLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates the page count label.</summary>
            <param name="tag">The tag being processed.</param>
            <param name="templateItem">The engage object.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <returns>A new <see cref="T:System.Web.UI.WebControls.Label"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.CreatePageList(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Creates the page list.</summary>
            <param name="tag">The tag being processed.</param>
            <param name="templateItem">The engage object.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <returns>A new <see cref="T:System.Web.UI.WebControls.DropDownList"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.PagingTemplateProvider.HideWhenSinglePage(System.Web.UI.Control,Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>Hides the <paramref name="control"/> when there aren't multiple pages.</summary>
            <param name="control">The control.</param>
            <param name="tag">The tag being processed.</param>
            <param name="templateItem">The engage object.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.PagingTemplateProvider.ItemPagingState">
            <summary>Gets or sets the state of the paging for this list of items.</summary>
            <value>The state of the paging for this list of items</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.PagingTemplateProvider.PageUrlTemplate">
            <summary>
            Gets the URL to use for the paging buttons, with the page number templated out for use with <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> (that is, "{0}").
            </summary>
            <value>The URL to use for the paging buttons, with the page number templated out for use with <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> (that is, "{0}").</value>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplateInfo">
            <summary>Represents the information contained in a template's manifest file</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateInfo.EngageManifestNamespaceUri">
            <summary>The namespace URL for the Engage Manifest schema</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateInfo.EngageManifestSchemaSet">
            <summary>A schema set which contains the EngageManifest schema</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateInfo.templateProvider">
            <summary>The template provider to use to interact with the template files</summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.#ctor(System.String,Engage.Dnn.Framework.Templating.ITemplateProvider)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> class.</summary>
            <param name="folderName">The folder under the module's template folder in which this template resides.</param>
            <param name="templateProvider">The template provider to use to interact with the template files.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetTemplates(Engage.Dnn.Framework.Templating.ITemplateProvider)">
            <summary>Gets a list of the templates provided by <paramref name="templateProvider"/>.</summary>
            <param name="templateProvider">The template manifest provider.</param>
            <returns>A list of <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instances for the available templates</returns>
            <exception cref="T:System.ArgumentNullException"><c>templateProvider</c> is null.</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetTemplates(Engage.Dnn.Framework.Templating.ITemplateProvider,Engage.Dnn.Framework.Templating.TemplateType)">
            <summary>Gets a list of the templates provided by <paramref name="templateProvider"/>.</summary>
            <param name="templateProvider">The template manifest provider.</param>
            <param name="templateType">Type of the templates to retrieve.</param>
            <returns>A list of <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instances for the available templates</returns>
            <exception cref="T:System.ArgumentNullException"><c>templateProvider</c> is null.</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetTemplateInfo(Engage.Dnn.Framework.Templating.ITemplateProvider,System.String)">
            <summary>Gets a <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the manifest provided by the <paramref name="templateProvider"/>.</summary>
            <param name="templateProvider">The template manifest provider.</param>
            <param name="templateFolderName">The name of the folder under the module's template folder that contains the template.</param>
            <returns>A <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instance representing the manifest provided by the <paramref name="templateProvider"/></returns>
            <exception cref="T:System.ArgumentNullException"><c>templateProvider</c> is null.</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Unable to find the template file specified in the manifest</exception>
            <exception cref="T:System.Xml.XmlException">If an XML namespace if specified, it must be the correct EngageManifest namespace: <see cref="F:Engage.Dnn.Framework.Templating.TemplateInfo.EngageManifestNamespaceUri"/></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetRelativePath(System.String,System.Boolean)">
            <summary>Gets the relative path for the given <paramref name="fileName" />.</summary>
            <param name="fileName">Name of the file to qualify with the path.</param>
            <param name="prependTilde">if set to <c>true</c> adds a ~ to the front of the relative path.</param>
            <returns>A relative path to the given <paramref name="fileName" /></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetPhysicalPath(System.String)">
            <summary>Gets the physical file path for the given <paramref name="fileName" />.</summary>
            <param name="fileName">Name of the file to qualify with the path.</param>
            <returns>The physical file path to the given <paramref name="fileName" /></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetTemplates(Engage.Dnn.Framework.Templating.ITemplateProvider,System.Nullable{Engage.Dnn.Framework.Templating.TemplateType})">
            <summary>Gets a list of the templates provided by <paramref name="templateProvider"/>.</summary>
            <param name="templateProvider">The template manifest provider.</param>
            <param name="templateType">Type of the templates to retrieve, or <c>null</c> to retrieve all types.</param>
            <returns>A list of <see cref="T:Engage.Dnn.Framework.Templating.TemplateInfo"/> instances for the available templates</returns>
            <exception cref="T:System.ArgumentNullException"><c>templateProvider</c> is null.</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.ValidateAgainstSchema(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>Validates the given <paramref name="manifestNavigator"/> against the EngageManifest schema,
            throwing an <see cref="T:System.Xml.Schema.XmlSchemaValidationException"/> if it doesn't.</summary>
            <param name="manifestNavigator">The manifest navigator.</param>
            <param name="templateFolderName">The name of the folder in which the template for this manifest is found</param>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">The provided template manifest does not conform to the EngageManifest schema.</exception>
            <exception cref="T:System.InvalidOperationException">Could not find Engage.Dnn.Framework.Templating.EngageManifest.xsd embedded resource</exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.CreateEngageManifestSchemaSet">
            <summary>Creates the <see cref="F:Engage.Dnn.Framework.Templating.TemplateInfo.EngageManifestSchemaSet"/>.</summary>
            <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet"/> containing the EngageManifest schema</returns>
            <exception cref="T:System.InvalidOperationException">
            Could not find <c>Engage.Dnn.Framework.Templating.EngageManifest.xsd</c> embedded resource
            or
            Could not find <c>Engage.Dnn.Framework.Templating.NamespacedEngageManifest.xsd</c> embedded resource
            </exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetNodeValue(System.Xml.XPath.XPathNavigator,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>Gets the value of the single node specified by the given <paramref name="xpath"/> expression.</summary>
            <param name="manifestNavigator">The <see cref="T:System.Xml.XPath.XPathNavigator"/> representing the template manifest.</param>
            <param name="xpath">A <see cref="T:System.String"/> representing an XPath expression.</param>
            <param name="resolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"/> object used to resolve namespace prefixed in the XPath query.</param>
            <returns>The value of the node</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.GetAttributeValue``1(System.Xml.XPath.XPathNavigator,System.String,System.Func{System.Xml.XPath.XPathNavigator,``0})">
            <summary>Gets the value of the attribute as a <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of the attribute's value</typeparam>
            <param name="navigator">An <see cref="T:System.Xml.XPath.XPathNavigator"/> pointing to the element containing the attribute.</param>
            <param name="attributeName">The name of the attribute.</param>
            <param name="getValue">A function which gets the value of the attribute, given an <see cref="T:System.Xml.XPath.XPathNavigator"/> pointing to the attribute.</param>
            <returns>A <typeparamref name="T"/> instance, or the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.NodeToScriptReference(System.Xml.XPath.XPathNavigator)">
            <summary>Converts the <paramref name="scriptNode"/> to a <see cref="T:Engage.Dnn.Framework.Templating.ScriptReference"/>.</summary>
            <param name="scriptNode">An <see cref="T:System.Xml.XPath.XPathNavigator"/> pointing to a <c>Script</c> node.</param>
            <returns>A new <see cref="T:Engage.Dnn.Framework.Templating.ScriptReference"/> instance.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateInfo.NodeToScriptLibraryReference(System.Xml.XPath.XPathNavigator)">
            <summary>Converts the <paramref name="libraryNode"/> to a <see cref="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference"/>.</summary>
            <param name="libraryNode">An <see cref="T:System.Xml.XPath.XPathNavigator"/> pointing to a <c>Library</c> node.</param>
            <returns>A new <see cref="T:Engage.Dnn.Framework.Templating.ScriptLibraryReference"/> instance.</returns>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.Description">
            <summary>Gets the description of this template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.FolderName">
            <summary>Gets the folder under the module's template folder in which this template resides</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.ModuleName">
            <summary>Gets the name of the module that this template is for.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.PreviewImage">
            <summary>Gets the filename of the image to display as a preview of the template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.ResourceFile">
            <summary>Gets the resource file.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.Stylesheet">
            <summary>Gets the filename of the style-sheet for this template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.Template">
            <summary>Gets the template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.TemplateFileName">
            <summary>Gets the filename of the template file.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.Title">
            <summary>Gets the title of this template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.TemplateType">
            <summary>Gets the type of the template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.Settings">
            <summary>Gets the list of module settings to set when applying this template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.Scripts">
            <summary>Gets the list of the scripts to reference when applying this template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.ScriptReferences">
            <summary>Gets the list of the scripts to reference when applying this template.</summary>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplateInfo.ScriptLibraryReferences">
            <summary>Gets the list of the scripts to reference when applying this template.</summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplatePlaceholder">
            <summary>A dynamic placeholder within a <see cref="T:Engage.Templating.Template"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholder.type">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.Type"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholder.value">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.Value"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholder.format">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.Format"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholder.placeholderText">
            <summary>Backing field for <see cref="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.PlaceholderText"/></summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplatePlaceholder.#ctor(Engage.Dnn.Framework.Templating.TemplatePlaceholderType,System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Engage.Dnn.Framework.Templating.TemplatePlaceholder"/> class.</summary>
            <param name="type">The type of placeholder.</param>
            <param name="value">The main value.</param>
            <param name="format">The value's format.</param>
            <param name="placeholderText">The complete placeholder text.</param>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.Type">
            <summary>Gets the type of placeholder.</summary>
            <value>The placeholder type.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.Value">
            <summary>Gets the main value of the placeholder.</summary>
            <value>The placeholder value (e.g. the resource key or data-bound property).</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.Format">
            <summary>Gets the format for the value.</summary>
            <value>The value's format.</value>
        </member>
        <member name="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.PlaceholderText">
            <summary>Gets the entire text of the placeholder.</summary>
            <value>The placeholder's text.</value>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplatePlaceholderType">
            <summary>The type of a <see cref="T:Engage.Dnn.Framework.Templating.TemplatePlaceholder"/></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholderType.Unknown">
            <summary>An unknown (probably invalid) placeholder type</summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholderType.DataBinding">
            <summary>Binding to a value from an <see cref="T:Engage.Dnn.Framework.Templating.ITemplateable"/> instance, represented by <c>#</c></summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplatePlaceholderType.Localization">
            <summary>Binding to text from resource file, represented by <c>$</c></summary>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TagProcessor">
            <summary>
            Represents a method that can process a tag for a template
            </summary>
            <param name="container">The container into which created controls should be added</param>
            <param name="tag">The tag to process</param>
            <param name="templateItem">The object to query for data to implement the given tag</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <returns>Whether to process the tag's ChildTags collection</returns>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplateableItemsRetriever">
            <summary>
            Represents a method that can get a list of <see cref="T:Engage.Dnn.Framework.Templating.ITemplateable"/> items given an Engage:List tag and the current <see cref="T:Engage.Dnn.Framework.Templating.ITemplateable"/> item being processed, if any.
            </summary>
            <remarks>
            The <paramref name="context"/> parameter should always be <c>null</c> unless the Engage:List tag is nested inside of another Engage:List.
            </remarks>
            <param name="listTag">The Engage:List <see cref="T:Engage.Templating.Tag"/> for which to return a data source</param>
            <param name="context">The current <see cref="T:Engage.Dnn.Framework.Templating.ITemplateable"/> item being processed, or <c>null</c> if no list is currently being processed</param>
            <returns>A list of the <see cref="T:Engage.Dnn.Framework.Templating.ITemplateable"/> items over which the given <paramref name="listTag"/> should be processed</returns>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplateEngine">
            <summary>
            Gets and processes <see cref="T:Engage.Templating.Template"/>s
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateEngine.DynamicAttributeValueRegex">
            <summary>
            A regular expression which matches a dynamic value placeholder within an attribute.  
            Captures three names groups:
            <list type="table">
                <listheader>
                    <term>Group Name</term>
                    <description>Group Contents</description>
                </listheader>
                <item>
                    <term>PlaceholderType</term>
                    <description># for data-bound placeholders, $ for localized resource placeholders</description>
                </item>
                <item>
                    <term>Value</term>
                    <description>The value (property name for data-bound placeholders, resource key for localization placeholders)</description>
                </item>
                <item>
                    <term>Format</term>
                    <description>An optional format string</description>
                </item>
            </list>
            </summary>
            <remarks><![CDATA[
             Literal %
             [PlaceholderType]: A named capture group. [\#|\$]
                 Select from 2 alternatives
                     Literal #
                     Literal $
             Whitespace, any number of repetitions
             [Value]: A named capture group. [[^%:""\s]+]
                 Any character that is NOT in this class: [%:""\s], one or more repetitions
             Whitespace, any number of repetitions
             Match expression but don't capture it. [\:\s*(?<Format>[^%:""\s]+)], zero or one repetitions
                 \:\s*(?<Format>[^%:""\s]+)
                     Literal :
                     Whitespace, any number of repetitions
                     [Format]: A named capture group. [[^%:""\s]+]
                         Any character that is NOT in this class: [%:""\s], one or more repetitions
             \s*%
                 Whitespace, any number of repetitions
                 Literal %
            ]]></remarks>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.FormatString(System.String,System.String)">
            <summary>Formats the given string, based on the encoding formats supported by the template.</summary>
            <param name="value">The value to format.</param>
            <param name="formats">
            The format string, a comma-delimited list of <c>HTML</c>, <c>CSS</c>/<c>SLUG</c>, <c>ATTR</c>/<c>ATTRIBUTE</c>, <c>JAVASCRIPT</c>, <c>CLEAN</c>, and <c>RAW</c> (defaults to <c>RAW</c>).
            </param>
            <returns>The <paramref name="value"/> formatted according to the given <paramref name="formats"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Processes all of the tags in the given list of <paramref name="tags"/>
            </summary>
            <param name="container">The container into which controls are to be added.</param>
            <param name="tags">The list of tags being processed.</param>
            <param name="templateItem">The object which should be queried for data.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <param name="processTag">Delegate method used for tags that cannot be processed by this method.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Processes all of the tags in the given list of <paramref name="tags"/>
            </summary>
            <param name="container">The container into which controls are to be added.</param>
            <param name="tags">The list of tags being processed.</param>
            <param name="templateItem">The object which should be queried for data.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file to use to find get localized text.</param>
            <param name="processTag">Delegate method used for tags that cannot be processed by this method.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetPlaceholders(Engage.Templating.TagList)">
            <summary>Gets all of the placeholders anywhere within the <paramref name="tags"/> (or their descendants).</summary>
            <param name="tags">The tags.</param>
            <returns>A sequence of <see cref="T:Engage.Dnn.Framework.Templating.TemplatePlaceholder"/> instances.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetAttributeValue(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String)">
            <summary>
            Gets the text value of an attribute on the given <paramref name="tag"/>.   The attribute can use data-binding syntax, <c>%#PropertyName%</c>, to look
            up a value with the given property for the current <paramref name="templateItem"/>. It can also use resource file syntax, <c>%$ResourceKey%</c>, to
            look up the value of the given key in the <paramref name="resourceFile"/>. Otherwise returns the plain text of the attribute value.
            </summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property if data-binding syntax is used.</param>
            <param name="resourceFile">The resource file from which to get localized resources if resource file syntax is used.</param>
            <param name="attributeName">Name of the attribute whose value to get.</param>
            <returns>
            The text value of the given attribute from the given tag,  looking up a value from the given <paramref name="templateItem"/> or
            <paramref name="resourceFile"/> if the correct syntax is used
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetAttributeValue(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String)">
            <summary>
            Gets the text value of an attribute on the given <paramref name="tag"/>.   The attribute can use data-binding syntax, <c>%#PropertyName%</c>, to look
            up a value with the given property for the current <paramref name="templateItem"/>. It can also use resource file syntax, <c>%$ResourceKey%</c>, to
            look up the value of the given key in the <paramref name="resourceFile"/>. Otherwise returns the plain text of the attribute value.
            </summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property if data-binding syntax is used.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources if resource file syntax is used.</param>
            <param name="attributeName">Name of the attribute whose value to get.</param>
            <returns>
            The text value of the given attribute from the given tag,  looking up a value from the given <paramref name="templateItem"/> or
            <paramref name="resourceFile"/> if the correct syntax is used
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetAttributeValue(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String,System.String)">
            <summary>
            Gets the text value of an attribute on the given <paramref name="tag"/>.   The attribute can use data-binding syntax, <c>%#PropertyName%</c>, to look
            up a value with the given property for the current <paramref name="templateItem"/>. It can also use resource file syntax, <c>%$ResourceKey%</c>, to
            look up the value of the given key in the <paramref name="resourceFile"/>. Otherwise returns the plain text of the attribute value.
            </summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property if data-binding syntax is used.</param>
            <param name="resourceFile">The resource file from which to get localized resources if resource file syntax is used.</param>
            <param name="attributeName">Name of the attribute whose value to get.</param>
            <param name="alternateAttributeName">Name of an alternate attribute to check if <paramref name="attributeName"/> doesn't have a value.</param>
            <returns>
            The text value of the given attribute from the given tag,  looking up a value from the given <paramref name="templateItem"/> or
            <paramref name="resourceFile"/> if the correct syntax is used
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetAttributeValue(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String,System.String)">
            <summary>
            Gets the text value of an attribute on the given <paramref name="tag"/>.   The attribute can use data-binding syntax, <c>%#PropertyName%</c>, to look
            up a value with the given property for the current <paramref name="templateItem"/>. It can also use resource file syntax, <c>%$ResourceKey%</c>, to
            look up the value of the given key in the <paramref name="resourceFile"/>. Otherwise returns the plain text of the attribute value.
            </summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property if data-binding syntax is used.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources if resource file syntax is used.</param>
            <param name="attributeName">Name of the attribute whose value to get.</param>
            <param name="alternateAttributeName">Name of an alternate attribute to check if <paramref name="attributeName"/> doesn't have a value.</param>
            <returns>
            The text value of the given attribute from the given tag,  looking up a value from the given <paramref name="templateItem"/> or
            <paramref name="resourceFile"/> if the correct syntax is used
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddControl(System.Web.UI.Control,System.Web.UI.Control)">
            <summary>Adds the given <paramref name="control"/> to the given <paramref name="container"/> unless <paramref name="control"/> is <c>null</c>.</summary>
            <param name="container">The container to which <paramref name="control"/> is to be added.</param>
            <param name="control">The control to add to <paramref name="container"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddControl(System.Web.UI.Control,System.Func{System.Web.UI.Control})">
            <summary>Adds the <see cref="T:System.Web.UI.Control"/> created by calling <paramref name="makeControl"/> to the given <paramref name="container"/> unless the control is <c>null</c>.</summary>
            <param name="container">The container to which the control is to be added.</param>
            <param name="makeControl">A function which creates the control to add to <paramref name="container"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="container"/> or <paramref name="makeControl"/> are <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddHeaderControl(System.Web.UI.Control,System.String)">
            <summary>
            Adds the given <paramref name="headerText" /> to the given <paramref name="container" /> unless <paramref name="headerText" /> is <c>null</c>.
            </summary>
            <param name="container">The container.</param>
            <param name="headerText">The header text.</param>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String)">
            <summary>
            Creates a <see cref="T:System.Web.UI.WebControls.Label"/> for the given <paramref name="labelTag"/>,
            with the given Text property,
            also setting the <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/> and <see cref="P:System.Web.UI.WebControls.WebControl.ToolTip"/>
            </summary>
            <param name="labelTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="text">The text of the label.</param>
            <returns>The <see cref="T:System.Web.UI.WebControls.Label"/> instance that was created</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String,System.String[])">
            <summary>
            Creates a <see cref="T:System.Web.UI.WebControls.Label"/> for the given <paramref name="labelTag"/>,
            with the given Text property,
            also setting the <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/> and <see cref="P:System.Web.UI.WebControls.WebControl.ToolTip"/>
            </summary>
            <param name="labelTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="text">The text of the label.</param>
            <param name="excludedAttributes">The attributes which have been processed and should be excluded from passing through to the generated markup.</param>
            <returns>The <see cref="T:System.Web.UI.WebControls.Label"/> instance that was created</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="excludedAttributes"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,System.String)">
            <summary>
            Creates a <see cref="T:System.Web.UI.WebControls.Label"/> for the given <paramref name="labelTag"/>,
            with the given Text property,
            also setting the <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/> and <see cref="P:System.Web.UI.WebControls.WebControl.ToolTip"/>
            </summary>
            <param name="labelTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <param name="text">The text of the label.</param>
            <returns>The <see cref="T:System.Web.UI.WebControls.Label"/> instance that was created</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,System.String,System.String[])">
            <summary>Creates a <see cref="T:System.Web.UI.WebControls.Label"/> for the given <paramref name="labelTag"/>,
            with the given Text property,
            also setting the <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/> and <see cref="P:System.Web.UI.WebControls.WebControl.ToolTip"/></summary>
            <param name="labelTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <param name="text">The text of the label.</param>
            <param name="excludedAttributes">The attributes which have been processed and should be excluded from passing through to the generated markup.</param>
            <returns>The <see cref="T:System.Web.UI.WebControls.Label"/> instance that was created</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="excludedAttributes"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String)">
            <summary>Creates an <c>a</c> tag for the given <paramref name="linkTag"/>.</summary>
            <param name="linkTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="linkUrl">The URL to which the link points</param>
            <returns>The created <see cref="T:System.Web.UI.WebControls.HyperLink"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.String,System.String[])">
            <summary>Creates an <c>a</c> tag for the given <paramref name="linkTag"/>.</summary>
            <param name="linkTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="linkUrl">The URL to which the link points</param>
            <param name="excludedAttributes">The attributes which have been processed and should be excluded from passing through to the generated markup.</param>
            <returns>The created <see cref="T:System.Web.UI.WebControls.HyperLink"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="excludedAttributes"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,System.String)">
            <summary>
            Creates an <c>a</c> tag for the given <paramref name="linkTag"/>.
            </summary>
            <param name="linkTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <param name="linkUrl">The URL to which the link points</param>
            <returns>The created <see cref="T:System.Web.UI.WebControls.HyperLink"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever,System.String,System.String[])">
            <summary>Creates an <c>a</c> tag for the given <paramref name="linkTag"/>.</summary>
            <param name="linkTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <param name="linkUrl">The URL to which the link points</param>
            <param name="excludedAttributes">The attributes which have been processed and should be excluded from passing through to the generated markup.</param>
            <returns>The created <see cref="T:System.Web.UI.WebControls.HyperLink"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="excludedAttributes"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateHeaderLink(System.String,System.String)">
            <summary>Creates an <see cref="T:System.Web.UI.HtmlControls.HtmlLink"/> instance.</summary>
            <param name="rel">The <c>rel</c> attribute's value.</param>
            <param name="href">The <c>href</c> attribute's value.</param>
            <returns>A new <see cref="T:System.Web.UI.HtmlControls.HtmlLink"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rel"/> or <paramref name="href"/> are <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddAdditionalAttributes(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.Web.UI.WebControls.WebControl,System.String[])">
            <summary>Adds additional attributes to the <paramref name="control"/>.</summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="control">The control to which to add the attributes.</param>
            <param name="excludedAttributes">The list of attributes which have already been processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <c>null</c> -or- <paramref name="excludedAttributes"/> is <c>null</c> -or- <paramref name="control"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddAdditionalAttributes(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.Web.UI.WebControls.WebControl,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds additional attributes to the <paramref name="control"/>.</summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="control">The control to which to add the attributes.</param>
            <param name="excludedAttributes">The list of attributes which have already been processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <c>null</c> -or- <paramref name="excludedAttributes"/> is <c>null</c> -or- <paramref name="control"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddAdditionalAttributes(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.Web.UI.HtmlControls.HtmlControl,System.String[])">
            <summary>Adds additional attributes to the <paramref name="control"/>.</summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="control">The control to which to add the attributes.</param>
            <param name="excludedAttributes">The list of attributes which have already been processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <c>null</c> -or- <paramref name="excludedAttributes"/> is <c>null</c> -or- <paramref name="control"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddAdditionalAttributes(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.Web.UI.HtmlControls.HtmlControl,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Adds additional attributes to the <paramref name="control"/>.</summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="control">The control to which to add the attributes.</param>
            <param name="excludedAttributes">The list of attributes which have already been processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <c>null</c> -or- <paramref name="excludedAttributes"/> is <c>null</c> -or- <paramref name="control"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.AddAdditionalAttributes(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,System.Collections.Generic.IEnumerable{System.String},System.Web.UI.AttributeCollection)">
            <summary>Adds additional attributes to a control's <paramref name="attributeCollection"/>.</summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="excludedAttributes">The list of attributes which have already been processed.</param>
            <param name="attributeCollection">The attribute collection to which to add the attributes.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tag"/> is <c>null</c> -or- <paramref name="excludedAttributes"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLiteral(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>
            Creates a literal text control for the given <paramref name="tag"/>,
            as defined on the Text attribute of the <paramref name="tag"/>
            </summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <returns>
            The <see cref="T:System.Web.UI.Control"/> instance that was created
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreatePanel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Creates a <see cref="T:System.Web.UI.WebControls.Panel"/> for the given <paramref name="panelTag"/>,
            with the given Text property, 
            also setting the <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/> and <see cref="P:System.Web.UI.WebControls.WebControl.ToolTip"/>
            </summary>
            <param name="panelTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <returns>The <see cref="T:System.Web.UI.WebControls.Panel"/> instance that was created</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLabel(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Creates a <see cref="T:System.Web.UI.WebControls.Label"/> for the given <paramref name="labelTag"/>,
            with the given Text property, 
            also setting the <see cref="P:System.Web.UI.WebControls.WebControl.CssClass"/> and <see cref="P:System.Web.UI.WebControls.WebControl.ToolTip"/>
            </summary>
            <param name="labelTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <returns>The <see cref="T:System.Web.UI.WebControls.Label"/> instance that was created</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateImage(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>
            Creates an <see cref="T:System.Web.UI.WebControls.Image"/> for the given <paramref name="imageTag"/>.
            </summary>
            <param name="imageTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <returns>
            The <see cref="T:System.Web.UI.WebControls.Image"/> instance that was created
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateLink(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Creates an <c>a</c> tag for the given <paramref name="linkTag"/>.
            </summary>
            <param name="linkTag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get the property.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <returns>
            The created link
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetConditionAttribute(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String)">
            <summary>
            Gets a value indicating whether to display this tag and its children, based on the conditional attributes (<c>if</c> and <c>unless</c>).
            </summary>
            <param name="tag">The tag to check.</param>
            <param name="templateItem">The template item.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file.</param>
            <returns>Whether to display the contents of <paramref name="tag"/></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetPropertyValue(System.String,System.String,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable)">
            <summary>
            Gets the value of a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyFormat">The property format.</param>
            <param name="templateItem">The template item from which to get the property's value.</param>
            <param name="globalItem">The global item from which to get the value if <paramref name="templateItem"/> doesn't have it.</param>
            <returns>The formatted value of the property, or <c>null</c></returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetAllTags(Engage.Templating.TagList)">
            <summary>Gets all of the tags as a flat list.</summary>
            <param name="tags">The tags.</param>
            <returns>A sequence of <see cref="T:Engage.Templating.Tag"/> instances.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.GetPlaceholders(System.String)">
            <summary>Gets the dynamic placeholder(s) for the given <paramref name="attributeValue"/>.</summary>
            <param name="attributeValue">The attribute value.</param>
            <returns>A sequence of <see cref="T:Engage.Dnn.Framework.Templating.TemplatePlaceholder"/> instances.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateSecondarySyntaxPlaceholder(Engage.Templating.Tag,System.String)">
            <summary>Creates a placeholder to represent the attribute being set via the secondary syntax (e.g. <c>Property-PropertyName</c>).</summary>
            <param name="tag">The tag.</param>
            <param name="attributeName">The attribute's name.</param>
            <returns>A new <see cref="T:Engage.Dnn.Framework.Templating.TemplatePlaceholder"/> instance (with <c>null</c> <see cref="P:Engage.Dnn.Framework.Templating.TemplatePlaceholder.PlaceholderText"/>), or <c>null</c>.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessEmbeddedEngageTag(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Processes a regular HTML tag that has an <see cref="T:Engage.Templating.EngageTag"/> embedded as an attribute value.
            </summary>
            <param name="tag">The tag whose content is being represented.</param>
            <param name="templateItem">The object from which to get data.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process the embedded tag.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <returns>A control representing the tag</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessListToken(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>
            Processes an Engage:List tag, repeating its content for each item in a given list of data
            </summary>
            <param name="listTag">The list tag being represented.</param>
            <param name="contextItem">The item for which this list is being processed, <c>null</c> unless we're in a nested list.</param>
            <param name="globalItem">A templateable item that represents global state.</param>
            <param name="resourceFile">The resource file from which to get localized resources.</param>
            <param name="processTag">The delegate to use to process tags that <see cref="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessTags(System.Web.UI.Control,Engage.Templating.TagList,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)"/> can't.</param>
            <param name="getListData">The delegate to use to get the list of items to process.</param>
            <returns>A control representing the tag</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.ProcessNoDataToken(Engage.Templating.Tag,Engage.Dnn.Framework.Templating.ITemplateable,Engage.Dnn.Framework.Templating.ITemplateable,System.String,Engage.Dnn.Framework.Templating.TagProcessor,Engage.Dnn.Framework.Templating.TemplateableItemsRetriever)">
            <summary>Processes the no data token.</summary>
            <param name="noDataTag">The no data tag.</param>
            <param name="contextItem">The context item.</param>
            <param name="globalItem">The global item.</param>
            <param name="resourceFile">The resource file.</param>
            <param name="processTag">The process tag.</param>
            <param name="getListData">The get list data.</param>
            <returns>The no data</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Templating.TemplateEngine.CreateHtmlTextWriter(System.Text.StringBuilder)">
            <summary>
            Creates an instance of <see cref="T:System.Web.UI.HtmlTextWriter"/> to use to render tags.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to write to.</param>
            <returns>An instance of <see cref="T:System.Web.UI.HtmlTextWriter"/> to use when rendering tags</returns>
        </member>
        <member name="T:Engage.Dnn.Framework.Templating.TemplateType">
            <summary>
            The type of template
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateType.List">
            <summary>
            A list of items
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Templating.TemplateType.SingleItem">
            <summary>
            A single item
            </summary>
        </member>
        <member name="T:Engage.Dnn.Utility">
            <summary>
            A collection of utility methods dependent on DotNetNuke.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Utility.TimeZoneInfoByOffsetLookup">
            <summary>
            A mapping from time zone offset to the ID of a <see cref="T:System.TimeZoneInfo"/>, for use by <see cref="M:Engage.Dnn.Utility.ConvertLegacyTimeZoneOffsetToTimeZoneInfo(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Engage.Dnn.Utility.GetLoginUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Web.HttpRequest)">
            <summary>Gets the login URL for the given portal from the current <paramref name="request"/>.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="request">The request.</param>
            <returns>The URL for the login page</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="portalSettings"/> or <paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetLogOnUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Web.HttpRequestBase)">
            <summary>Gets the login URL for the given portal from the current <paramref name="request"/>.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="request">The request.</param>
            <returns>The URL for the login page</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="portalSettings"/> or <paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetCurrentModuleByDefinition(System.Int32,System.String)">
            <summary>
            Gets a non-deleted instance of the module with the given <paramref name="moduleDefinition"/>.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="moduleDefinition">The module definition.</param>
            <returns>A non-deleted <see cref="T:DotNetNuke.Entities.Modules.ModuleInfo"/> with the given <paramref name="moduleDefinition"/>, or null if none exists.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.CreateUrlFromControl(DotNetNuke.UI.UserControls.UrlControl,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Creates a URL from a DNN URL Control, mapping a tabId, fileId, userId, or URL link to a working URL.
            </summary>
            <param name="urlControl">A DNN URL Control (a <see cref="T:DotNetNuke.UI.UserControls.UrlControl"/>).</param>
            <param name="portalSettings">The portal settings.</param>
            <returns>The (relative) URL that this control points to.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.CreateUrlFromControl(DotNetNuke.UI.UserControls.UrlControl,DotNetNuke.Entities.Portals.PortalSettings,System.Boolean)">
            <summary>
            Creates a URL from a DNN URL Control, mapping a tabId, fileId, userId, or URL link to a working URL.
            </summary>
            <param name="urlControl">A Dnn URL Control (a <see cref="T:DotNetNuke.UI.UserControls.UrlControl"/>).</param>
            <param name="portalSettings">The portal settings.</param>
            <param name="relativePath">if set to <c>true</c> the path returned will be relative, otherwise it will be absolutely rooted to this application and portal alias (unless the user explicitly provides a relative path, then it will always be relative).</param>
            <returns>The URL that this control points to.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="urlControl"/> is null</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetRelativeUrl(System.String)">
            <summary>
            Removes the first section of a URL if it starts with HTTP, effectively making it a relative path.
            </summary>
            <param name="url">The URL to make relative.</param>
            <returns><paramref name="url"/> as a relative URL.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.LocalizeListControl(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Localizes a list control (<see cref="T:System.Web.UI.WebControls.ListBox"/>, <see cref="T:System.Web.UI.WebControls.DropDownList"/>).
            </summary>
            <param name="listControl">The list control.</param>
            <param name="resourceFile">The resource file.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="listControl"/> is null</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.LocalizeGridView(System.Web.UI.WebControls.GridView@,System.String)">
            <summary>
            Localizes a grid view.  If you are targeting DNN 4.6.0 or higher, use <c>Localization.LocalizeGridView</c>.
            </summary>
            <param name="gridView">The grid view to be localized.</param>
            <param name="resourceFile">The resource file.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="gridView"/> is null.</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetUserTimeZoneOffset(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Gets the time zone offset of the given user, or for the portal if the user is not logged in.
            </summary>
            <param name="userInfo">The user info.</param>
            <param name="portalSettings">The portal settings.</param>
            <returns>The time zone offset of the given user.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetUserTimeZone">
            <summary>
            Gets the time zone of the current user, or for the portal if the user is not logged in.
            </summary>
            <returns>The time zone of the current user.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetUserTimeZone(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Gets the time zone of the given user, or for the portal if the user is not logged in.
            </summary>
            <param name="userInfo">The user info.</param>
            <param name="portalSettings">The portal settings.</param>
            <returns>The time zone of the given user.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetPortalTimeZone">
            <summary>
            Gets the time zone of the current portal.
            </summary>
            <returns>The time zone of the current portal.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetPortalTimeZone(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Gets the time zone of the given portal if the user is not logged in.
            </summary>
            <param name="portalSettings">The portal settings.</param>
            <returns>The time zone of the given portal.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetLocalSharedResourceFile(System.String)">
            <summary>Gets the resource file to use for resources that are shared across controls within a module.</summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
            <returns>The resource file for shared resources within the module.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.ConvertLegacyTimeZoneOffsetToTimeZoneInfo(System.Int32)">
            <summary>
            Converts old TimeZoneOffset to new <see cref="T:System.TimeZoneInfo"/>. 
            </summary>
            <param name="timeZoneOffsetInMinutes">An offset in minutes, e.g. -480 (-8 times 60) for Pacific Time Zone</param>
            <returns>
            A specific <see cref="T:System.TimeZoneInfo"/> is returned if <paramref name="timeZoneOffsetInMinutes"/> is valid, 
            otherwise <see cref="P:System.TimeZoneInfo.Local"/> is returned.
            </returns>
            <remarks>
            Based on DNN 6.1.2 method from <see cref="T:System.TimeZoneInfo"/>.
            Initial mapping is based on hard-coded rules. These rules are hard-coded from old standard TimeZones.xml data.
            When offset is not found hard-coded mapping, a lookup is performed in time zones defined in the system. The first found entry is returned.
            When mapping is not found, <see cref="P:System.TimeZoneInfo.Local"/> is returned.
            </remarks>
        </member>
        <member name="M:Engage.Dnn.Utility.SetupTextEditor(System.Web.UI.Control)">
            <summary>
            Sets up and returns a DNN text editor control in the given <paramref name="textEditorPlaceholder"/> control.
            </summary>
            <param name="textEditorPlaceholder">The text editor place holder.</param>
            <returns>The <see cref="T:DotNetNuke.UI.UserControls.TextEditor"/> control that has been created.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.SetupTextEditor(System.Web.UI.Control,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit)">
            <summary>
            Sets up and returns a DNN text editor control in the given <paramref name="textEditorPlaceholder"/> control.
            </summary>
            <param name="textEditorPlaceholder">The text editor place holder.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <returns>The <see cref="T:DotNetNuke.UI.UserControls.TextEditor"/> control that has been created.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.SetupTextEditor(System.Web.UI.Control,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.String,System.Boolean)">
            <summary>
            Sets up and returns a DNN text editor control in the given <paramref name="textEditorPlaceholder"/> control.
            </summary>
            <param name="textEditorPlaceholder">The text editor place holder.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <param name="textRenderMode">The text render mode.  Possible values include "Raw," "HTML," and "Text."</param>
            <param name="chooseRender">if set to <c>true</c> the user can choose the <paramref name="textRenderMode"/>.</param>
            <returns>The <see cref="T:DotNetNuke.UI.UserControls.TextEditor"/> control that has been created.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.SetupTextEditor(System.Web.UI.Control,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Sets up and returns a DNN text editor control in the given <paramref name="textEditorPlaceholder"/> control.
            </summary>
            <param name="textEditorPlaceholder">The text editor place holder.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <param name="textRenderMode">The text render mode.  Possible values include "Raw," "HTML," and "Text."</param>
            <param name="chooseRender">if set to <c>true</c> the user can choose the <paramref name="textRenderMode"/>.</param>
            <param name="defaultMode">The default mode (of "Basic" or "Rich") to show the user, if they don't have a preference in their profile.
            They usually will, this is not a valid method by which to restrict the user to either mode.</param>
            <param name="chooseMode">if set to <c>true</c> the user can choose whether to have a basic or rich text editor.</param>
            <returns>
            The <see cref="T:DotNetNuke.UI.UserControls.TextEditor"/> control that has been created.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Utility.SetupTextEditor(System.Web.UI.Control,System.Web.UI.WebControls.Unit,System.Web.UI.WebControls.Unit,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets up and returns a DNN text editor control in the given <paramref name="textEditorPlaceholder"/> control.
            </summary>
            <param name="textEditorPlaceholder">The text editor place holder.</param>
            <param name="height">The height.</param>
            <param name="width">The width.</param>
            <param name="textRenderMode">The text render mode.  Possible values include "Raw," "HTML," and "Text."</param>
            <param name="chooseRender">if set to <c>true</c> the user can choose the <paramref name="textRenderMode"/>.</param>
            <param name="defaultMode">The default mode (of "Basic" or "Rich") to show the user, if they don't have a preference in their profile.
            They usually will, this is not a valid method by which to restrict the user to either mode.</param>
            <param name="chooseMode">if set to <c>true</c> the user can choose whether to have a basic or rich text editor.</param>
            <param name="htmlEncode">if set to <c>true</c> the text value is HTML encoded.</param>
            <returns>
            The <see cref="T:DotNetNuke.UI.UserControls.TextEditor"/> control that has been created.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Utility.SetDataSource(System.Web.UI.WebControls.DropDownList,System.Collections.IList)">
            <summary>
            Utility function to set data source of a drop down control.
            Expects <c>DisplayMember</c> and <c>ValueMember</c> fields
            </summary>
            <param name="dropDown">The drop down control whose data source is being set</param>
            <param name="dataSource">The object from which the data-bound control receives its list of data items</param>
        </member>
        <member name="M:Engage.Dnn.Utility.GetPhysicalTemplatesFolderName(System.String)">
            <summary>
            Gets the physical path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>The physical path to the templates folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetPhysicalDesktopModuleFolderName(System.String)">
            <summary>
            Gets the full physical path to the desktop module folder.
            </summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
            <returns>The full physical path to the module's desktop module folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetTemplatesFolderName(System.String)">
            <summary>
            Gets the relative path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>The relative path to the templates folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetTemplateResourceFile(System.String)">
            <summary>
            Gets the relative path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>
            The relative path to the templates folder.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDesktopModuleFolderName(System.String)">
            <summary>
            Gets the name of the desktop module folder.
            </summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
            <returns>The name of this module's desktop module folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.InstallCommentsAndRatings">
            <summary>
            Installs the comments and ratings database objects into the DNN database.
            </summary>
        </member>
        <member name="M:Engage.Dnn.Utility.GetCommentsAndRatingsScript">
            <summary>
            Gets the contents of the SQL script to create the comments and ratings database objects.
            </summary>
            <returns>A SQL script that can be run to ensure that the comments and ratings database objects exist.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.RequestEmbeddedScript(System.Web.UI.Page,System.String)">
            <summary>Adds the requested script to the bottom of the page.</summary>
            <param name="page">The page.</param>
            <param name="fileName">The script's filename (e.g. <c>redirectOnSelect.js</c>).</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="page"/> is <c>null</c></exception>
        </member>
        <member name="M:Engage.Dnn.Utility.AddJQueryReference">
            <summary>Request jQuery to be included on the page</summary>
        </member>
        <member name="M:Engage.Dnn.Utility.AddJQueryReference(System.Web.UI.Page)">
            <summary>Request jQuery to be included on the page</summary>
            <param name="page">Not used</param>
        </member>
        <member name="M:Engage.Dnn.Utility.AddJQueryUIReference(System.Web.UI.Page)">
            <summary>
            Adds a reference to jQuery UI 1.8.16 (minified) to the page.  If you can reference DNN 6.0 or higher, use the built-in methods to register jQuery UI, instead.
            </summary>
            <remarks>
            Also adds jQuery prior to UI.
            Also checks for duplicates, only adding the reference once regardless of how many times this method is called for the <paramref name="page"/>.
            </remarks>
            <param name="page">The page to which the reference will be added.</param>
        </member>
        <member name="M:Engage.Dnn.Utility.GetStringSetting(System.Collections.Hashtable,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.String"/> or <c>null</c> if the setting is not set
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The setting as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetStringSetting(System.Collections.IDictionary,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.String"/> or <c>null</c> if the setting is not set
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The setting as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetStringSetting(System.Collections.Hashtable,System.String,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.String"/>, or <paramref name="defaultValue"/> if the setting is not set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The setting or default as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetStringSetting(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.String"/>, or <paramref name="defaultValue"/> if the setting is not set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The setting or default as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetIntSetting(System.Collections.Hashtable,System.String)">
            <summary>
            Gets the given setting as an <see cref="T:System.Int32"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The setting as a <see cref="T:System.Int32"/>, or <c>null</c> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetIntSetting(System.Collections.IDictionary,System.String)">
            <summary>
            Gets the given setting as an <see cref="T:System.Int32"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The setting as a <see cref="T:System.Int32"/>, or <c>null</c> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetIntSetting(System.Collections.Hashtable,System.String,System.Int32)">
            <summary>
            Gets the given setting as an <see cref="T:System.Int32"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as an <see cref="T:System.Int32"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetIntSetting(System.Collections.IDictionary,System.String,System.Int32)">
            <summary>
            Gets the given setting as an <see cref="T:System.Int32"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as an <see cref="T:System.Int32"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetBoolSetting(System.Collections.Hashtable,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.Boolean"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>Gets the given setting as an <see cref="T:System.Int32"/>, or <c>null</c>&gt; if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetBoolSetting(System.Collections.IDictionary,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.Boolean"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>Gets the given setting as an <see cref="T:System.Int32"/>, or <c>null</c>&gt; if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetBoolSetting(System.Collections.Hashtable,System.String,System.Boolean)">
            <summary>
            Gets the given setting as a <see cref="T:System.Boolean"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Gets the given setting as an <see cref="T:System.Boolean"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.&gt;</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetBoolSetting(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Gets the given setting as a <see cref="T:System.Boolean"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Gets the given setting as an <see cref="T:System.Boolean"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.&gt;</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDecimalSetting(System.Collections.Hashtable,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.Decimal"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The given setting as a <see cref="T:System.Decimal"/>, or <c>null</c> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDecimalSetting(System.Collections.IDictionary,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.Decimal"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The given setting as a <see cref="T:System.Decimal"/>, or <c>null</c> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDecimalSetting(System.Collections.Hashtable,System.String,System.Decimal)">
            <summary>
            Gets the given setting as a <see cref="T:System.Decimal"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <see cref="T:System.Decimal"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDecimalSetting(System.Collections.IDictionary,System.String,System.Decimal)">
            <summary>
            Gets the given setting as a <see cref="T:System.Decimal"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <see cref="T:System.Decimal"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDateTimeSetting(System.Collections.IDictionary,System.String)">
            <summary>
            Gets the given setting as a <see cref="T:System.DateTime"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <exception cref="T:System.ArgumentNullException"><c>settings</c> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><c>settingName</c> is null.</exception>
            <returns>The given setting as a <see cref="T:System.DateTime"/>, or <c>null</c> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDateTimeSetting(System.Collections.IDictionary,System.String,System.DateTime)">
            <summary>
            Gets the given setting as a <see cref="T:System.DateTime"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <exception cref="T:System.ArgumentNullException"><c>settings</c> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><c>settingName</c> is null.</exception>
            <returns>The given setting as a <see cref="T:System.DateTime"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetEnumSetting``1(System.Collections.Hashtable,System.String)">
            <summary>
            Gets the given setting as a <typeparamref name="T"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <typeparam name="T">Type of the <c>enum</c> which the setting value should be.</typeparam>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The given setting as a <typeparamref name="T"/>, or <c>null</c> if the setting hasn't been set.</returns>
            <exception cref="T:System.ArgumentException">if T is not an <c>enum</c> type</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetEnumSetting``1(System.Collections.IDictionary,System.String)">
            <summary>
            Gets the given setting as a <typeparamref name="T"/>, or <c>null</c> if the setting hasn't been set.
            </summary>
            <typeparam name="T">Type of the enum which the setting value should be.</typeparam>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <returns>The given setting as a <typeparamref name="T"/>, or <c>null</c> if the setting hasn't been set.</returns>
            <exception cref="T:System.ArgumentException">if T is not an enum type</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetEnumSetting``1(System.Collections.Hashtable,System.String,``0)">
            <summary>
            Gets the given setting as a <typeparamref name="T"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <typeparam name="T">Type of the enum which the setting value should be.</typeparam>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <typeparamref name="T"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
            <exception cref="T:System.ArgumentException">if T is not an enum type</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetEnumSetting``1(System.Collections.IDictionary,System.String,``0)">
            <summary>
            Gets the given setting as a <typeparamref name="T"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <typeparam name="T">Type of the enum which the setting value should be.</typeparam>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <typeparamref name="T"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
            <exception cref="T:System.ArgumentException">if T is not an enum type</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetIntSettingCore(System.Collections.IDictionary,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the given setting as an <see cref="T:System.Int32"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as an <see cref="T:System.Int32"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetBoolSettingCore(System.Collections.IDictionary,System.String,System.Nullable{System.Boolean})">
            <summary>
            Gets the given setting as a <see cref="T:System.Boolean"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <see cref="T:System.Boolean"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDecimalSettingCore(System.Collections.IDictionary,System.String,System.Nullable{System.Decimal})">
            <summary>
            Gets the given setting as a <see cref="T:System.Decimal"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <see cref="T:System.Decimal"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.GetDateTimeSettingCore(System.Collections.IDictionary,System.String,System.Nullable{System.DateTime})">
            <summary>
            Gets the given setting as a <see cref="T:System.DateTime"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <param name="settings">The settings collection.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <see cref="T:System.DateTime"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
            <exception cref="T:System.ArgumentNullException"><c>settings</c> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><c>settingName</c> is null.</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.GetEnumSettingCore``1(System.Collections.IDictionary,System.String,System.Nullable{``0})">
            <summary>
            Gets the given setting as a <typeparamref name="T"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Enum"/> which the setting value should be.</typeparam>
            <param name="settings">The settings.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The given setting as a <typeparamref name="T"/>, or <paramref name="defaultValue"/> if the setting hasn't been set.</returns>
            <exception cref="T:System.ArgumentException">if T is not an <see cref="T:System.Enum"/> type</exception>
        </member>
        <member name="M:Engage.Dnn.Utility.InjectJQueryUI(System.Web.UI.Page)">
            <summary>
            Includes the jQuery library onto the page
            </summary>
            <remarks>Based on <see href="http://www.ifinity.com.au/Blog/EntryId/75/Include-jQuery-in-a-DotNetNuke-Module-with-version-independent-code"/></remarks>
            <param name="page">Page object from calling page/control</param>
        </member>
        <member name="M:Engage.Dnn.Utility.SafeDnnVersion(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Returns a version-safe set of version numbers for DNN
            </summary>
            <param name="major">out value of major version (i.e., 4,5 etc)</param>
            <param name="minor">out value of minor version (i.e., 1 in 5.1 etc)</param>
            <param name="revision">out value of revision (i.e., 3 in 5.1.3)</param>
            <param name="build">out value of build number</param>
            <remarks>
            Based on <see href="http://www.ifinity.com.au/Blog/EntryId/75/Include-jQuery-in-a-DotNetNuke-Module-with-version-independent-code"/>
            DNN moved the version number during about the 4.9 version, 
            which to [Bruce] was a bit frustrating and caused the need for this reflection method call</remarks>
            <returns><c>true</c> if successful, <c>false</c> if not</returns>
        </member>
        <member name="M:Engage.Dnn.Utility.AddScriptToHeader(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            Adds a script tag to the page's header.
            </summary>
            <param name="page">The page.</param>
            <param name="scriptSrc">The script <c>src</c> attribute (for a remove script).</param>
            <param name="scriptTagId">The script tag's ID.</param>
            <param name="scriptText">The script's text (for an inline script).</param>
        </member>
        <member name="T:Engage.Dnn.Framework.Utility">
            <summary>
            All common, shared functionality for Engage Modules.
            </summary>
        </member>
        <member name="F:Engage.Dnn.Framework.Utility.ModuleConfigured">
            <summary>
            The host setting key base for whether this module have been configured
            </summary>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.GetDesktopModuleFolderName(System.String)">
            <summary>
            Gets the name of the desktop module folder.
            </summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
            <returns>The name of this module's desktop module folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.GetTemplateResourceFile(System.String)">
            <summary>
            Gets the relative path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>
            The relative path to the templates folder.
            </returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.GetTemplatesFolderName(System.String)">
            <summary>
            Gets the relative path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>The relative path to the templates folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.GetPhysicalDesktopModuleFolderName(System.String)">
            <summary>
            Gets the full physical path to the desktop module folder.
            </summary>
            <param name="desktopModuleName">The name of the module's desktop module record in DNN.</param>
            <returns>The full physical path to the module's desktop module folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.GetPhysicialTemplatesFolderName(System.String)">
            <summary>
            Gets the physical path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>The physical path to the templates folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.GetPhysicalTemplatesFolderName(System.String)">
            <summary>
            Gets the physical path to the templates folder.
            </summary>
            <param name="desktopModuleName">The name of this module's desktop module record in DNN.</param>
            <returns>The physical path to the templates folder.</returns>
        </member>
        <member name="M:Engage.Dnn.Framework.Utility.SetDataSource(System.Web.UI.WebControls.DropDownList,System.Collections.IList)">
            <summary>
            Utility function to set data source of a drop down control.
            </summary>
            <param name="dropDown">The drop down control whose data source is being set</param>
            <param name="dataSource">The object from which the data-bound control receives its list of data items</param>
        </member>
        <member name="T:Engage.Dnn.Framework.EngageLicensing.LicenseService">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.#ctor">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateSingleServer(System.Guid,System.Guid,System.String,System.Guid)">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateSingleServerAsync(System.Guid,System.Guid,System.String,System.Guid)">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateSingleServerAsync(System.Guid,System.Guid,System.String,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateTrialLicense(System.Guid,System.Guid,System.String,System.Guid)">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateTrialLicenseAsync(System.Guid,System.Guid,System.String,System.Guid)">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateTrialLicenseAsync(System.Guid,System.Guid,System.String,System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:Engage.Dnn.Framework.EngageLicensing.LicenseService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateSingleServerCompleted">
            <remarks/>
        </member>
        <member name="E:Engage.Dnn.Framework.EngageLicensing.LicenseService.AuthenticateTrialLicenseCompleted">
            <remarks/>
        </member>
        <member name="T:Engage.Dnn.Framework.EngageLicensing.AuthenticateSingleServerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Engage.Dnn.Framework.EngageLicensing.AuthenticateSingleServerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Engage.Dnn.Framework.EngageLicensing.AuthenticateSingleServerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Engage.Dnn.Framework.EngageLicensing.AuthenticateTrialLicenseCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Engage.Dnn.Framework.EngageLicensing.AuthenticateTrialLicenseCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Engage.Dnn.Framework.EngageLicensing.AuthenticateTrialLicenseCompletedEventArgs.Result">
            <remarks/>
        </member>
    </members>
</doc>
