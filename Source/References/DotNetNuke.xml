<?xml version="1.0"?>
<doc>
<assembly>
<name>
DotNetNuke
</name>
</assembly>
<members>
<member name="T:DotNetNuke.UI.Skins.Controls.SolPartMenu">
 -----------------------------------------------------------------------------
 <summary></summary>
	<remarks></remarks>
	<history>
 	[cniknet]	10/15/2004	Replaced public members with properties and removed
                             brackets from property names
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.User.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/21/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.UserControls.User">
 -----------------------------------------------------------------------------
 <summary>
 The User UserControl is used to manage User Details
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/21/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.Decode(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Decodes the html
 </summary>
	<remarks>
	</remarks>
	<param name="strHtml">Html to decode</param>
	<returns>The decoded html</returns>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.Encode(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Encodes the html
 </summary>
	<remarks>
	</remarks>
	<param name="strHtml">Html to encode</param>
	<returns>The encoded html</returns>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.FormatHtml(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Formats String as Html by replacing linefeeds by <br/>
	</summary>
	<remarks>
	</remarks>
	<param name="strText">Text to format</param>
	<returns>The formatted html</returns>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.FormatText(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Formats Html as text by removing <br/> tags and replacing by linefeeds
 </summary>
	<remarks>
	</remarks>
	<param name="strHtml">Html to format</param>
	<returns>The formatted text</returns>
	<history>
 	[cnurse]	12/13/2004	Documented and modified to use HtmlUtils methods
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.PopulateLists">
 -----------------------------------------------------------------------------
 <summary>
 Builds the radio button lists
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.SetPanels">
 -----------------------------------------------------------------------------
 <summary>
 Sets the Mode displayed
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/10/2005	created (extracted from Page_load)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.optRender_SelectedIndexChanged(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 optRender_SelectedIndexChanged runs when Basic Text Box mode is changed
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.TextEditor.optView_SelectedIndexChanged(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 optView_SelectedIndexChanged runs when Editor Mode is changed
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.UserControls.TextEditor">
 -----------------------------------------------------------------------------
 Class:  TextEditor
 Project: DotNetNuke
 -----------------------------------------------------------------------------
 <summary>
 TextEditor is a user control that provides a wrapper for the HtmlEditor providers
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/13/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.AddDefaultSkin">
 -----------------------------------------------------------------------------
 <summary>
 AddDefaultSkin adds the not-specified skin to the radio button list
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/15/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.AddSkin(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddSkin adds the skin to the radio button list
 </summary>
	<remarks>
	</remarks>
	<param name="strFolder">The Skin Folder</param>
	<param name="strFile">The Skin File</param>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.FormatSkinName(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 format skin name
 </summary>
	<remarks>
	</remarks>
	<param name="strSkinFolder">The Folder Name</param>
	<param name="strSkinFile">The File Name without extension</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.CreateThumbnail(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 CreateThumbnail creates a thumbnail of the Preview Image
 </summary>
	<remarks>
	</remarks>
	<param name="strImage">The Image File Name</param>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.Clear">
 -----------------------------------------------------------------------------
 <summary>
 Clear clears the radio button list
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/15/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadAllSkins(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 LoadAllSkins loads all the available skins (Host and Site) to the radio button list
 </summary>
	<remarks>
	</remarks>
	<param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
	<history>
 	[cnurse]	12/15/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadHostSkins(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 LoadHostSkins loads all the available Host skins to the radio button list
 </summary>
	<remarks>
	</remarks>
	<param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
	<history>
 	[cnurse]	12/15/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadPortalSkins(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 LoadHostSkins loads all the available Site/Portal skins to the radio button list
 </summary>
	<remarks>
	</remarks>
	<param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
	<history>
 	[cnurse]	12/15/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadSkins(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 LoadSkins loads all the available skins in a specific folder to the radio button list
 </summary>
	<remarks>
	</remarks>
	<param name="strFolder">The folder to search for skins</param>
	<param name="skinType">A string that identifies whether the skin is Host "[G]" or Site "[L]"</param>
	<param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
	<history>
 	[cnurse]	12/15/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/12/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinThumbNailControl">
 -----------------------------------------------------------------------------
 <summary>
 SkinThumbNailControl is a user control that provides that displays the skins
	as a Radio ButtonList with Thumbnail Images where available
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/12/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinControl.FormatSkinName(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 format skin name
 </summary>
	<remarks>
	</remarks>
	<param name="strSkinFolder">The Folder Name</param>
	<param name="strSkinFile">The File Name without extension</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.CssClass">
 -----------------------------------------------------------------------------
 <summary>
 CssClass determines the Css Class used for the Title Text
 </summary>
	<value>A string representing the name of the css class</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.IncludeRule">
 -----------------------------------------------------------------------------
 <summary>
 IncludeRule determines whether there is a horizontal rule displayed under the
 header text
 </summary>
	<value>A string representing true or false</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.IsExpanded">
 -----------------------------------------------------------------------------
 <summary>
 IsExpanded determines whether the section is expanded or collapsed.
 </summary>
	<value>Boolean value that determines whether the panel is expanded (true)
 or collapsed (false).  The default is true.</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
		[jhenning]	09/06/2005 Utilizing ClientAPI EnableMinMax
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.JavaScript">
 -----------------------------------------------------------------------------
 <summary>
 JavaScript is the name of the javascript function implementation.
 </summary>
	<value>A string representing the name of the javascript function implementation</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.MaxImageUrl">
 -----------------------------------------------------------------------------
 <summary>
 The MaxImageUrl is the url of the image displayed when the contained panel is
 collapsed.
 </summary>
	<value>A string representing the url of the Max Image</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.MinImageUrl">
 -----------------------------------------------------------------------------
 <summary>
 The MinImageUrl is the url of the image displayed when the contained panel is
 expanded.
 </summary>
	<value>A string representing the url of the Min Image</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.ResourceKey">
 -----------------------------------------------------------------------------
 <summary>
 The ResourceKey is the key used to identify the Localization Resource for the
 title text.
 </summary>
	<value>A string representing the ResourceKey.</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.Section">
 -----------------------------------------------------------------------------
 <summary>
 The Section is the Id of the DHTML object  that contains the xection content
 title text.
 </summary>
	<value>A string representing the Section.</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.Text">
 -----------------------------------------------------------------------------
 <summary>
 The Text is the name or title of the section
 </summary>
	<value>A string representing the Title Text.</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.SectionHeadControl.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Assign resource key to label for localization
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	05/11/2004	Move code to Page_Load for localization
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.SectionHeadControl.Page_PreRender(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Renders the SectionHeadControl
 </summary>
	<param name="sender"></param>
	<param name="e"></param>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	04/11/2004	Moved code from Page_Load to PreRender so all other properties are set.
             This allows to inject this control dynamically on a page using LoadControl
		[jhenning]	09/06/2005 Utilizing ClientAPI EnableMinMax
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.UserControls.SectionHeadControl">
 -----------------------------------------------------------------------------
 <summary>
 SectionHeadControl is a user control that provides all the server code to allow a
 section to be collapsed/expanded, using user provided images for the button.
 </summary>
	<remarks>
 To use this control the user must provide somewhere in the asp page the
 implementation of the javascript required to expand/collapse the display.
 </remarks>
	<history>
 	[cnurse]	9/7/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VisibilityControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a VisibilityControl
 </summary>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.VisibilityControl.Caption">
 -----------------------------------------------------------------------------
 <summary>
 Caption
 </summary>
	<value>A string representing the Name of the property</value>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.VisibilityControl.Name">
 -----------------------------------------------------------------------------
 <summary>
 Name is the name of the field as a string
 </summary>
	<value>A string representing the Name of the property</value>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.VisibilityControl.Value">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VisibilityControl.OnVisibilityChanged(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnVisibilityChanged runs when the Visibility has changed.  It raises the VisibilityChanged
 Event
 </summary>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VisibilityControl.Render(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Render renders the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VisibilityControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 LoadPostData loads the Post Back Data and determines whether the value has change
 </summary>
	<param name="postDataKey">A key to the PostBack Data to load</param>
	<param name="postCollection">A name value collection of postback data</param>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VisibilityControl.RaisePostDataChangedEvent">
 -----------------------------------------------------------------------------
 <summary>
 RaisePostDataChangedEvent runs when the PostBackData has changed.  It triggers
 a ValueChanged Event
 </summary>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.VisibilityControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      VisibilityControl
 -----------------------------------------------------------------------------
 <summary>
 The VisibilityControl control provides a base control for defining visibility
 options
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingsEditorControl.UnderlyingDataSource">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Underlying DataSource
 </summary>
	<value>An IEnumerable</value>
	<history>
 	[cnurse]	03/09/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingsEditorControl.CustomEditors">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the CustomEditors that are used by this control
 </summary>
	<value>The CustomEditors object</value>
	<history>
 	[cnurse]	03/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingsEditorControl.Visibility">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Visibility values that are used by this control
 </summary>
	<value>The CustomEditors object</value>
	<history>
 	[cnurse]	08/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.SettingsEditorControl.GetSettings">
 -----------------------------------------------------------------------------
 <summary>
 GetSettings converts the DataSource into an ArrayList (IEnumerable)
 </summary>
	<history>
     [cnurse]	03/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.SettingsEditorControl.GetRowVisibility(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 GetRowVisibility determines the Visibility of a row in the table
 </summary>
	<param name="obj">The property</param>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.SettingsEditorControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      SettingsEditorControl
 -----------------------------------------------------------------------------
 <summary>
 The SettingsEditorControl control provides an Editor to edit DotNetNuke
 Settings
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.SettingInfo.#ctor(System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new SettingInfo obect
 </summary>
	<param name="name">The name of the setting</param>
	<param name="value">The value of the setting</param>
	<history>
 	[cnurse]	03/23/2006
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingInfo.Name">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Setting Name
 </summary>
	<history>
 	[cnurse]	03/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingInfo.Value">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Setting Value
 </summary>
	<history>
 	[cnurse]	03/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingInfo.Editor">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Editor to use for the Setting
 </summary>
	<history>
 	[cnurse]	03/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.SettingInfo.Type">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Setting Type
 </summary>
	<history>
 	[cnurse]	03/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.SettingInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      SettingInfo
 -----------------------------------------------------------------------------
 <summary>
 The SettingInfo class provides a helper class for the Settings Editor
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	12/13/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PropertySortType">
 -----------------------------------------------------------------------------
 <summary>
 Enumeration that determines the sort method.
 </summary>
	<remarks>
 PropertySortType is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
 to determine the order for displaying properties.
 </remarks>
	<history>
 	[Joe]	2/25/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.Caption">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Caption Text if no ResourceKey is provided
 </summary>
	<value>A string representing the Caption</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.EditControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the related Edit Control
 </summary>
	<value>A Control</value>
	<history>
 	[cnurse]	02/14/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.HelpText">
 -----------------------------------------------------------------------------
 <summary>
 Text is value of the Label Text if no ResourceKey is provided
 </summary>
	<value>A string representing the Text</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.ResourceKey">
 -----------------------------------------------------------------------------
 <summary>
 ResourceKey is the root localization key for this control
 </summary>
	<value>A string representing the Resource Key</value>
	<remarks>This control will "standardise" the resource key names, so for instance
 if the resource key is "Control", Control.Text is the label text key, Control.Help
 is the label help text, Control.ErrorMessage is the Validation Error Message for the
 control
 </remarks>
	<history>
 	[cnurse]	02/10/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.DataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that is bound to the Label
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.DataSource">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the DataSource that is bound to this control
 </summary>
	<value>The DataSource object</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.HelpStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Label Style
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.LabelStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Label Style
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 CreateChildControls creates the control collection.
 </summary>
	<history>
 	[cnurse]	02/10/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.OnDataBinding(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataBinding runs when the Control is being Data Bound (It is triggered by
 a call to Control.DataBind()
 </summary>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs just before the Control is rendered, and makes sure that any
 properties are set properly before the control is rendered
 </summary>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.Render(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Render is called by the .NET framework to render the control
 </summary>
	<history>
 	[cnurse]	02/10/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PropertyLabelControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      PropertyLabelControl
 -----------------------------------------------------------------------------
 <summary>
 The PropertyLabelControl control provides a standard UI component for displaying
 a label for a property. It contains a Label and Help Text and can be Data Bound.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PropertyEditorMode">
 -----------------------------------------------------------------------------
 <summary>
 Enumeration that determines the mode of the editor.
 </summary>
	<remarks>
 PropertyEditorMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
 to determine the mode of the Editor.
 </remarks>
	<history>
 	[cnurse]	2/27/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.UnderlyingDataSource">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Underlying DataSource
 </summary>
	<value>An IEnumerable Boolean</value>
	<history>
 	[cnurse]	03/09/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.AutoGenerate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the editor Autogenerates its editors
 </summary>
	<value>The DataSource object</value>
	<history>
 	[cnurse]	02/14/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.DataSource">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the DataSource that is bound to this control
 </summary>
	<value>The DataSource object</value>
	<history>
 	[cnurse]	02/14/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Edit Mode of the Editor
 </summary>
	<value>The mode of the editor</value>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EnableClientValidation">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag indicating whether the Validators should use client-side
 validation
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	03/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.GroupByMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the grouping mode
 </summary>
	<value>A GroupByMode enum</value>
	<history>
 	[cnurse]	04/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.Groups">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the grouping order
 </summary>
	<value>A comma-delimited list of categories/groups</value>
	<history>
 	[cnurse]	04/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.HelpDisplayMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the control displays Help
 </summary>
	<value>A HelpDisplayMode enum</value>
	<history>
     [cnurse]	05/09/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.IsDirty">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether any of the properties have been changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/14/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether all of the properties are Valid
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	03/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Local Resource File for the Control
 </summary>
	<value>A String</value>
	<history>
     [cnurse]	05/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.RequiredUrl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Url of the Required Image
 </summary>
	<value>A String</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ShowRequired">
 -----------------------------------------------------------------------------
 <summary>
 gets and sets whether the Required icon is used
 </summary>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ShowVisibility">
 -----------------------------------------------------------------------------
 <summary>
 gets and sets whether the Visibility control is used
 </summary>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.SortMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether to sort properties. 
 </summary>
	<value>The Sort Mode of the editor</value>
	<remarks>
 By default all properties will be sorted 
 </remarks>
	<history>
 	[Joe]	2/25/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.Fields">
 -----------------------------------------------------------------------------
 <summary>
 Gets a collection of fields to display if AutoGenerate is false. Or the
 collection of fields generated if AutoGenerate is true.
 </summary>
	<value>A collection of FieldEditorControl objects</value>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EditControlStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Field Style
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EditControlWidth">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the width of the Edit Control Column
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ErrorStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Error Style
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	03/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.GroupHeaderStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Group Header Style
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	04/11/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.GroupHeaderIncludeRule">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether to add a &lt;hr&gt; to the Group Header
 </summary>
	<value>A boolean</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.HelpStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Label Style
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.LabelStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Label Style
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.LabelWidth">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the width of the Label Column
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.VisibilityStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Visibility Style
 </summary>
	<value>A Style object</value>
	<history>
 	[cnurse]	05/03/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetProperties">
 -----------------------------------------------------------------------------
 <summary>
 GetProperties returns an array of <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see>
	</summary>
	<returns>An array of <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> objects
 for the current DataSource object.</returns>
	<remarks>
 GetProperties will return an array of public properties for the current DataSource
 object.  The properties will be sorted according to the SortMode property.
 </remarks>
	<history>
 	[Joe]	2/25/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddEditorRow(System.Web.UI.WebControls.Table@,System.String,DotNetNuke.UI.WebControls.IEditorInfoAdapter)">
 -----------------------------------------------------------------------------
 <summary>
 AddEditorRow builds a sigle editor row and adds it to the Table, using the
 specified adapter
 </summary>
	<param name="tbl">The Table Control to add the row to</param>
	<param name="name">The name of property being added</param>
	<param name="adapter">An IEditorInfoAdapter</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddEditorRow(System.Web.UI.WebControls.Table@,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 AddEditorRow builds a sigle editor row and adds it to the Table
 </summary>
	<remarks>This method is protected so that classes that inherit from
 PropertyEditor can modify how the Row is displayed</remarks>
	<param name="tbl">The Table Control to add the row to</param>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddFields(System.Web.UI.WebControls.Table)">
 -----------------------------------------------------------------------------
 <summary>
 AddFields adds the fields that have beend defined in design mode (Autogenerate=false)
 </summary>
	<param name="tbl">The Table Control to add the row to</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddHeader(System.Web.UI.WebControls.Table@,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddHeader builds a group header
 </summary>
	<remarks>This method is protected so that classes that inherit from
 PropertyEditor can modify how the Header is displayed</remarks>
	<param name="tbl">The Table Control that contains the group</param>
	<history>
     [cnurse]	04/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.CreateEditor">
 -----------------------------------------------------------------------------
 <summary>
 CreateEditor creates the control collection.
 </summary>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetCategory(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 GetCategory gets the Category of an object
 </summary>
	<history>
 	[cnurse]	05/08/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetGroups(System.Collections.IEnumerable)">
 -----------------------------------------------------------------------------
 <summary>
 GetGroups gets an array of Groups/Categories from the DataSource
 </summary>
	<history>
 	[cnurse]	04/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetRowVisibility(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 GetRowVisibility determines the Visibility of a row in the table
 </summary>
	<param name="obj">The property</param>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnItemAdded(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is added to a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnItemCreated(DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an Editor is Created
 </summary>
	<history>
     [cnurse]	02/20/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnItemDeleted(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is removed from a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs just before the control is rendered
 </summary>
	<history>
     [cnurse]	04/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.DataBind">
 -----------------------------------------------------------------------------
 <summary>
 Binds the controls to the DataSource
 </summary>
	<history>
     [cnurse]	03/06/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.CollectionItemAdded(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is added to a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.CollectionItemDeleted(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is removed from a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.EditorItemCreated(System.Object,DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an Editor Is Created
 </summary>
	<history>
     [cnurse]	02/20/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.ListItemChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an Item in the List Is Changed
 </summary>
	<history>
     [cnurse]	02/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PropertyEditorControl">
 -----------------------------------------------------------------------------
 <summary>
 The PropertyEditorControl control provides a way to display and edit any 
 properties of any Info class
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.SortOrderAttribute.#ctor(System.Int32)">
	<summary>
 Initializes a new instance of the SortOrderAttribute class.
 </summary>
	<param name="order"></param>
</member><member name="M:DotNetNuke.UI.WebControls.RequiredAttribute.#ctor(System.Boolean)">
	<summary>
 Initializes a new instance of the RequiredAttribute class.
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RegularExpressionValidatorAttribute.#ctor(System.String)">
	<summary>
 Initializes a new instance of the RegularExpressionValidatorAttribute class.
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.MaxLengthAttribute.#ctor(System.Int32)">
	<summary>
 Initializes a new instance of the MaxLengthAttribute class.
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.ListAttribute.#ctor(System.String,System.String,DotNetNuke.UI.WebControls.ListBoundField,DotNetNuke.UI.WebControls.ListBoundField)">
	<summary>
 Initializes a new instance of the ListAttribute class.
 </summary>
	<param name="listName">The name of the List to use for this property</param>
	<param name="parentKey">The key of the parent for this List</param>
</member><member name="M:DotNetNuke.UI.WebControls.LabelModeAttribute.#ctor(DotNetNuke.UI.WebControls.LabelMode)">
	<summary>
 Initializes a new instance of the LabelModeAttribute class.
 </summary>
	<param name="mode">The label mode to apply to the associated property</param>
</member><member name="M:DotNetNuke.UI.WebControls.IsReadOnlyAttribute.#ctor(System.Boolean)">
	<summary>
 Initializes a new instance of the ReadOnlyAttribute class.
 </summary>
	<param name="read">A boolean that indicates whether the property is ReadOnly</param>
</member><member name="M:DotNetNuke.UI.WebControls.FormatAttribute.#ctor(System.String)">
	<summary>
 Initializes a new instance of the FormatAttribute class.
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.ControlStyleAttribute.#ctor(System.String)">
	<summary>
 Initializes a new instance of the StyleAttribute class.
 </summary>
	<param name="cssClass">The css class to apply to the associated property</param>
</member><member name="M:DotNetNuke.UI.WebControls.ControlStyleAttribute.#ctor(System.String,System.String)">
	<summary>
 Initializes a new instance of the StyleAttribute class.
 </summary>
	<param name="cssClass">The css class to apply to the associated property</param>
</member><member name="M:DotNetNuke.UI.WebControls.ControlStyleAttribute.#ctor(System.String,System.String,System.String)">
	<summary>
 Initializes a new instance of the StyleAttribute class.
 </summary>
	<param name="cssClass">The css class to apply to the associated property</param>
</member><member name="M:DotNetNuke.UI.WebControls.ProfileEditorControl.CreateEditor">
 -----------------------------------------------------------------------------
 <summary>
 CreateEditor creates the control collection.
 </summary>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.ProfileEditorControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      ProfileEditorControl
 -----------------------------------------------------------------------------
 <summary>
 The ProfileEditorControl control provides a Control to display Profile
 Properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.ListBoundField">
 -----------------------------------------------------------------------------
 <summary>
 Enumeration that determines the field that a List binds to
 </summary>
	<remarks>
 LabelMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
 to determine how the label is displayed.
 </remarks>
	<history>
 	[cnurse]	04/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.LabelMode">
 -----------------------------------------------------------------------------
 <summary>
 Enumeration that determines the label mode
 </summary>
	<remarks>
 LabelMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
 to determine how the label is displayed.
 </remarks>
	<history>
 	[cnurse]	04/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditorInfo.GetEditor(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetEditor gets the appropriate Editor based on ID
 properties
 </summary>
	<param name="editorType">The Id of the Editor</param>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditorInfo.GetEditor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetEditor gets the appropriate Editor based on ID
 properties
 </summary>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.EditorInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      EditorInfo
 -----------------------------------------------------------------------------
 <summary>
 The EditorInfo class provides a helper class for the Property Editor
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	12/13/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TrueFalseEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a TrueFalseEditControl
 </summary>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TrueFalseEditControl.BooleanValue">
 -----------------------------------------------------------------------------
 <summary>
 BooleanValue returns the Boolean representation of the Value
 </summary>
	<value>A Boolean representing the Value</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TrueFalseEditControl.OldBooleanValue">
 -----------------------------------------------------------------------------
 <summary>
 OldBooleanValue returns the Boolean representation of the OldValue
 </summary>
	<value>A Boolean representing the OldValue</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TrueFalseEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TrueFalseEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TrueFalseEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.TrueFalseEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      TrueFalseEditControl
 -----------------------------------------------------------------------------
 <summary>
 The TrueFalseEditControl control provides a standard UI component for editing 
 true/false (boolean) properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a SkinsEditControl
 </summary>
	<history>
     [cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a SkinsEditControl
 </summary>
	<param name="type">The type of the property</param>
	<history>
     [cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.DictionaryValue">
 -----------------------------------------------------------------------------
 <summary>
 DictionaryValue returns the Dictionary(Of Integer, String) representation of the Value
 </summary>
	<value>A Dictionary(Of Integer, String) representing the Value</value>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OldDictionaryValue">
 -----------------------------------------------------------------------------
 <summary>
 OldDictionaryValue returns the Dictionary(Of Integer, String) representation of the OldValue
 </summary>
	<value>A Dictionary(Of Integer, String) representing the OldValue</value>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OldStringValue">
 -----------------------------------------------------------------------------
 <summary>
 OldStringValue returns the String representation of the OldValue
 </summary>
	<value>A String representing the OldValue</value>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs just before the control is due to be rendered
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.Controls.SkinsEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.Skins.Controls
 Class:      SkinsEditControl
 -----------------------------------------------------------------------------
 <summary>
 The SkinsEditControl control provides a standard UI component for editing 
 skins.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.MultiLineTextEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.MultiLineTextEditControl">
-----------------------------------------------------------------------------
 <summary>
 The MultiLineTextEditControl control provides a standard UI component for editing 
 string/text properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [jbrinkman]	02/26/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.IntegerEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs an IntegerEditControl
 </summary>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.IntegerEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.IntegerEditControl.IntegerValue">
 -----------------------------------------------------------------------------
 <summary>
 IntegerValue returns the Integer representation of the Value
 </summary>
	<value>An integer representing the Value</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.IntegerEditControl.OldIntegerValue">
 -----------------------------------------------------------------------------
 <summary>
 OldIntegerValue returns the Integer representation of the OldValue
 </summary>
	<value>An integer representing the OldValue</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.IntegerEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.IntegerEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.IntegerEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      IntegerEditControl
 -----------------------------------------------------------------------------
 <summary>
 The IntegerEditControl control provides a standard UI component for editing 
 integer properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EnumEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs an EnumEditControl
 </summary>
	<history>
     [cnurse]	02/24/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EnumEditControl.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs an EnumEditControl
 </summary>
	<history>
     [cnurse]	02/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EnumEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EnumEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EnumEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EnumEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.EnumEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      EnumEditControl
 -----------------------------------------------------------------------------
 <summary>
 The EnumEditControl control provides a standard UI component for editing 
 enumerated properties.
 </summary>
	<history>
     [cnurse]	02/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControlFactory.CreateEditControl(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 CreateEditControl creates the appropriate Control based on the EditorField or
 TypeDataField
 </summary>
	<param name="editorInfo">An EditorInfo object</param>
	<history>
     [cnurse]	03/06/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.EditControlFactory">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      EditControlFactory
 -----------------------------------------------------------------------------
 <summary>
 The EditControlFactory control provides a factory for creating the 
 appropriate Edit Control
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs an EditControl
 </summary>
	<history>
     [cnurse]	02/24/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.CustomAttributes">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Custom Attributes for this Control
 </summary>
	<value>An array of Attributes</value>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Edit Mode of the Editor
 </summary>
	<value>A boolean</value>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Returns whether the
 </summary>
	<value>A boolean</value>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Local Resource File for the Control
 </summary>
	<value>A String</value>
	<history>
     [cnurse]	05/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.Name">
 -----------------------------------------------------------------------------
 <summary>
 Name is the name of the field as a string
 </summary>
	<value>A string representing the Name of the property</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.OldValue">
 -----------------------------------------------------------------------------
 <summary>
 OldValue is the initial value of the field
 </summary>
	<value>The initial Value of the property</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.Required">
 -----------------------------------------------------------------------------
 <summary>
 gets and sets whether the Property is required
 </summary>
	<value>The initial Value of the property</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.SystemType">
 -----------------------------------------------------------------------------
 <summary>
 SystemType is the System Data Type for the property
 </summary>
	<value>A string representing the Type of the property</value>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.Value">
 -----------------------------------------------------------------------------
 <summary>
 Value is the value of the control
 </summary>
	<value>The Value of the property</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.EditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.OnAttributesChanged">
 -----------------------------------------------------------------------------
 <summary>
 OnAttributesChanged runs when the CustomAttributes property has changed.
 </summary>
	<history>
     [cnurse]	06/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.OnItemAdded(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is added to a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.OnItemDeleted(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is deleted from a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.OnValueChanged(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnValueChanged runs when the Value has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.Render(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Render is called by the .NET framework to render the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 LoadPostData loads the Post Back Data and determines whether the value has change
 </summary>
	<param name="postDataKey">A key to the PostBack Data to load</param>
	<param name="postCollection">A name value collection of postback data</param>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.EditControl.RaisePostDataChangedEvent">
 -----------------------------------------------------------------------------
 <summary>
 RaisePostDataChangedEvent runs when the PostBackData has changed.  It triggers
 a ValueChanged Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.EditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      EditControl
 -----------------------------------------------------------------------------
 <summary>
 The EditControl control provides a standard UI component for editing 
 properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNTimeZoneEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNTimeZoneEditControl
 </summary>
	<history>
     [cnurse]	02/24/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNTimeZoneEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNTimeZoneEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNTimeZoneEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNTimeZoneEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNTimeZoneEditControl control provides a standard UI component for selecting
 a Time Zone
 </summary>
	<history>
     [cnurse]	02/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNRichTextEditControl
 </summary>
	<history>
     [cnurse]	03/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 CreateChildControls creates the controls collection
 </summary>
	<history>
     [cnurse]	03/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 LoadPostData loads the Post Back Data and determines whether the value has change
 </summary>
	<param name="postDataKey">A key to the PostBack Data to load</param>
	<param name="postCollection">A name value collection of postback data</param>
	<history>
     [cnurse]	03/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	03/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.OnInit(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnInit runs when teh control is intialized
 </summary>
	<history>
     [cnurse]	09/16/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs just before the control is rendered.  It forces a postback to the
 Control.
 </summary>
	<history>
     [cnurse]	03/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Render is called by the .NET framework to render the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	03/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRichTextEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNRichTextEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNRichTextEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNRichTextEditControl control provides a standard UI component for editing
 RichText
 </summary>
	<history>
     [cnurse]	03/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNPageEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNPageEditControl
 </summary>
	<history>
     [cnurse]	03/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNPageEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	03/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNPageEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	10/11/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNPageEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNPageEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNPageEditControl control provides a standard UI component for selecting
 a DNN Page
 </summary>
	<history>
     [cnurse]	03/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNLocaleEditControl
 </summary>
	<history>
     [cnurse]	02/24/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.OnAttributesChanged">
 -----------------------------------------------------------------------------
 <summary>
 OnAttributesChanged runs when the CustomAttributes property has changed.
 </summary>
	<history>
     [cnurse]	02/18/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNLocaleEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNLocaleEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNLocaleEditControl control provides a standard UI component for selecting
 a Locale
 </summary>
	<history>
     [cnurse]	02/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a TrueFalseEditControl
 </summary>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckEditControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 LoadPostData loads the Post Back Data and determines whether the value has change
 </summary>
	<remarks>The Checkbox is a special case.  If it's value is unchecked, then
 the postedValue is Nothing(null).</remarks>
	<param name="postDataKey">A key to the PostBack Data to load</param>
	<param name="postCollection">A name value collection of postback data</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckEditControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs just before the control is rendered.  It forces a postback to the
 Control.
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CheckEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      TrueFalseEditControl
 -----------------------------------------------------------------------------
 <summary>
 The TrueFalseEditControl control provides a standard UI component for editing 
 true/false (boolean) properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.GroupByMode">
 -----------------------------------------------------------------------------
 <summary>
 Enumeration that determines the grouping method
 </summary>
	<remarks>
 GroupByMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
 to determine the grouping mode for displaying properties.
 </remarks>
	<history>
 	[cnurse]	04/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.DataSource">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the DataSource that is bound to this control
 </summary>
	<value>The DataSource object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.DataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field/property that this control displays
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditorDisplayMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the control uses Divs or Tables
 </summary>
	<value>An EditorDisplayMode enum</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Edit Mode of the Editor
 </summary>
	<value>The mode of the editor</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.Editor">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Edit Control associated with the Editor
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditorInfoAdapter">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Factory used to create the Control
 </summary>
	<value>The mode of the editor</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditorTypeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Editor Type to use
 </summary>
	<value>The typename of the editor</value>
	<history>
     [cnurse]	08/29/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EnableClientValidation">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag indicating whether the Validators should use client-side
 validation
 </summary>
	<value>A Boolean</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.HelpDisplayMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the control displays Help
 </summary>
	<value>A HelpDisplayMode enum</value>
	<history>
     [cnurse]	05/09/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.IsDirty">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether any of the properties have been changed
 </summary>
	<value>A Boolean</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether all of the properties are Valid
 </summary>
	<value>A Boolean</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Local Resource File for the Control
 </summary>
	<value>A String</value>
	<history>
     [cnurse]	05/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.RequiredUrl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Url of the Required Image
 </summary>
	<value>A String</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.ShowRequired">
 -----------------------------------------------------------------------------
 <summary>
 gets and sets whether the Required icon is used
 </summary>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.ShowVisibility">
 -----------------------------------------------------------------------------
 <summary>
 gets and sets whether the Visibility control is used
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditControlStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Field Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditControlWidth">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the width of the Edit Control Column
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.ErrorStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Error Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.HelpStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Label Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.LabelStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Label Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.LabelWidth">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the width of the Label Column
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.VisibilityStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Visibility Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildDiv(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 BuildDiv creates the Control as a Div
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildEditor(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 BuildEditor creates the editor part of the Control
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildLabel(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 BuildLabel creates the label part of the Control
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildRequiredIcon(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 BuildValidators creates the validators part of the Control
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildTable(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 BuildTable creates the Control as a Table
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildValidators(DotNetNuke.UI.WebControls.EditorInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 BuildValidators creates the validators part of the Control
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildVisibility(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 BuildVisibility creates the visibility part of the Control
 </summary>
	<param name="editInfo">The EditorInfo object for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.GetOppositeSide(DotNetNuke.UI.WebControls.LabelMode)">
 -----------------------------------------------------------------------------
 <summary>
 GetOppositeSide finds the opposite side (ie if LabelMode is left it returns right)
 </summary>
	<param name="labelMode">The LabelMode for this control</param>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.CreateEditor">
 -----------------------------------------------------------------------------
 <summary>
 CreateEditor creates the control collection for this control
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.CollectionItemAdded(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is added to a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.CollectionItemDeleted(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is removed from a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.OnItemAdded(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is added to a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.OnItemCreated(DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when the Editor is Created
 </summary>
	<history>
     [cnurse]	02/20/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.OnItemDeleted(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an item is removed from a collection type property
 </summary>
	<history>
     [cnurse]	02/05/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.ValueChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when the Value of a Property changes
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.VisibilityChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when the Visibility of a Property changes
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.DataBind">
 -----------------------------------------------------------------------------
 <summary>
 Binds the controls to the DataSource
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.Validate">
 -----------------------------------------------------------------------------
 <summary>
 Validates the data, and sets the IsValid Property
 </summary>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.ListItemChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs when an Item in the List Is Changed
 </summary>
	<remarks>Raises an ItemChanged event.</remarks>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.FieldEditorControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      FieldEditorControl
 -----------------------------------------------------------------------------
 <summary>
 The FieldEditorControl control provides a Control to display Profile
 Properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new PropertyEditorEventArgs
 </summary>
	<param name="name">The name of the property</param>
	<history>
     [cnurse]	02/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.#ctor(System.String,System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new PropertyEditorEventArgs
 </summary>
	<param name="name">The name of the property</param>
	<param name="newValue">The new value of the property</param>
	<param name="oldValue">The old value of the property</param>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Changed">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the proeprty has changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Index">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Index of the Item
 </summary>
	<value>An Integer</value>
	<history>
 	[cnurse]	02/05/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Key">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key of the Item
 </summary>
	<value>An Object</value>
	<history>
 	[cnurse]	02/05/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Name">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Name of the Property being changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.OldValue">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the OldValue of the Property being changed
 </summary>
	<value>An Object</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the String Value of the Property being changed
 </summary>
	<value>An Object</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Value">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Value of the Property being changed
 </summary>
	<value>An Object</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PropertyEditorEventArgs">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      PropertyEditorEventArgs
 -----------------------------------------------------------------------------
 <summary>
 The PropertyEditorEventArgs class is a cusom EventArgs class for
 handling Event Args from a change in value of a property.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRegionEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNRegionEditControl
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNRegionEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNRegionEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNRegionEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNRegionEditControl control provides a standard UI component for editing
 Regions
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNListEditControl
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.AutoPostBack">
 -----------------------------------------------------------------------------
 <summary>
 Determines whether the List Auto Posts Back
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.IntegerValue">
 -----------------------------------------------------------------------------
 <summary>
 IntegerValue returns the Integer representation of the Value
 </summary>
	<value>An integer representing the Value</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.List">
 -----------------------------------------------------------------------------
 <summary>
 List gets the List associated with the control
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ListName">
 -----------------------------------------------------------------------------
 <summary>
 ListName is the name of the List to display
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.OldIntegerValue">
 -----------------------------------------------------------------------------
 <summary>
 OldIntegerValue returns the Integer representation of the OldValue
 </summary>
	<value>An integer representing the OldValue</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ParentKey">
 -----------------------------------------------------------------------------
 <summary>
 ParentKey is the parent key of the List to display
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.TextField">
 -----------------------------------------------------------------------------
 <summary>
 TextField is the field to display in the combo
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ValueField">
 -----------------------------------------------------------------------------
 <summary>
 ValueField is the field to use as the combo item values
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.OldStringValue">
 -----------------------------------------------------------------------------
 <summary>
 OldStringValue returns the Boolean representation of the OldValue
 </summary>
	<value>A String representing the OldValue</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.OnAttributesChanged">
 -----------------------------------------------------------------------------
 <summary>
 OnAttributesChanged runs when the CustomAttributes property has changed.
 </summary>
	<history>
     [cnurse]	06/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.OnItemChanged(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnItemChanged runs when the Item has changed
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNListEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNListEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNListEditControl control provides a standard UI component for selecting
 from Lists
 </summary>
	<history>
     [cnurse]	05/04/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNCountryEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a DNNCountryEditControl
 </summary>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNCountryEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNCountryEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DNNCountryEditControl control provides a standard UI component for editing
 Countries
 </summary>
	<history>
     [cnurse]	05/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DateEditControl.DateValue">
 -----------------------------------------------------------------------------
 <summary>
 DateValue returns the Date representation of the Value
 </summary>
	<value>A Date representing the Value</value>
	<history>
     [cnurse]	05/22/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DateEditControl.DefaultFormat">
 -----------------------------------------------------------------------------
 <summary>
 DefaultDateFormat is a string that will be used to format the date in the absence of a 
 FormatAttribute
 </summary>
	<value>A String representing the default format to use to render the date</value>
	<returns>A Format String</returns>
	<history>
     [cnurse]	10/29/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DateEditControl.Format">
 -----------------------------------------------------------------------------
 <summary>
 Format is a string that will be used to format the date in View mode
 </summary>
	<value>A String representing the format to use to render the date</value>
	<returns>A Format String</returns>
	<history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DateEditControl.OldDateValue">
 -----------------------------------------------------------------------------
 <summary>
 OldDateValue returns the Date representation of the OldValue
 </summary>
	<value>A Date representing the OldValue</value>
	<history>
     [cnurse]	05/22/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DateEditControl.StringValue">
	<summary>
 The Value expressed as a String
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.DateEditControl.OnDataChanged(System.EventArgs)">
	<summary>
 OnDataChanged is called by the PostBack Handler when the Data has changed
 </summary>
	<param name="e">An EventArgs object</param>
</member><member name="M:DotNetNuke.UI.WebControls.DateEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
	<summary>
 RenderEditMode is called by the base control to render the control in Edit Mode
 </summary>
	<param name="writer"></param>
</member><member name="M:DotNetNuke.UI.WebControls.DateEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DateEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DateEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DateEditControl control provides a standard UI component for editing 
 date properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/10/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DateTimeEditControl.DefaultFormat">
 -----------------------------------------------------------------------------
 <summary>
 DefaultFormat is a string that will be used to format the date in the absence of a 
 FormatAttribute
 </summary>
	<value>A String representing the default format to use to render the date</value>
	<returns>A Format String</returns>
	<history>
     [cnurse]	06/11/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DateTimeEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DateTimeEditControl
 -----------------------------------------------------------------------------
 <summary>
 The DateTimeEditControl control provides a standard UI component for editing 
 date and time properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/14/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.UnderlyingDataSource">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Underlying DataSource
 </summary>
	<value>An IEnumerable</value>
	<history>
 	[cnurse]	03/09/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.CategoryDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Category
 </summary>
	<value>A string representing the Category of the Field</value>
	<history>
 	[cnurse]	04/07/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.EditorDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Editor Type to use
 </summary>
	<value>A string representing the Editor Type of the Field</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.LengthDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that determines the length
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	05/08/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.NameDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that is bound to the Label
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/14/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.RequiredDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that determines whether an item is required
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/24/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.TypeDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that is bound to the EditControl
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/23/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.ValidationExpressionDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that is bound to the EditControl's 
 Expression Validator
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.ValueDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that is bound to the EditControl
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.VisibleDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that determines whether the control is visible
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	02/24/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.VisibilityDataField">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the value of the Field that determines the visibility
 </summary>
	<value>A string representing the Name of the Field</value>
	<history>
 	[cnurse]	05/03/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CollectionEditorControl.GetCategory(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 GetCategory gets the Category of an object
 </summary>
	<history>
 	[cnurse]	05/08/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CollectionEditorControl.GetGroups(System.Collections.IEnumerable)">
 -----------------------------------------------------------------------------
 <summary>
 GetGroups gets an array of Groups/Categories from the DataSource
 </summary>
	<history>
 	[cnurse]	04/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CollectionEditorControl.GetRowVisibility(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 GetRowVisibility determines the Visibility of a row in the table
 </summary>
	<param name="obj">The property</param>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CollectionEditorControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      CollectionEditorControl
 -----------------------------------------------------------------------------
 <summary>
 The CollectionEditorControl control provides a Control to display Collection
 Properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.StandardEditorInfoAdapter.GetEditorInfo(System.Object,System.Reflection.PropertyInfo)">
 -----------------------------------------------------------------------------
 <summary>
 GetEditorInfo builds an EditorInfo object for a propoerty
 </summary>
	<history>
 	[cnurse]	05/05/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.StandardEditorInfoAdapter.GetProperty(System.Object,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetProperty returns the property that is being "bound" to
 </summary>
	<history>
 	[cnurse]	05/05/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.StandardEditorInfoAdapter">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      StandardEditorInfoAdapter
 -----------------------------------------------------------------------------
 <summary>
 The StandardEditorInfoAdapter control provides an Adapter for standard datasources 
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.SettingsEditorInfoAdapter">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      SettingsEditorInfoAdapter
 -----------------------------------------------------------------------------
 <summary>
 The SettingsEditorInfoAdapter control provides a factory for creating the 
 appropriate EditInfo object
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.IEditorInfoAdapter">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      IEditorInfoAdapter
 -----------------------------------------------------------------------------
 <summary>
 The IEditorInfoAdapter control provides an Adapter Interface for datasources 
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/05/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CollectionEditorInfoAdapter.GetEditorInfo">
 -----------------------------------------------------------------------------
 <summary>
 GetEditorInfo builds an EditorInfo object for a propoerty
 </summary>
	<history>
 	[cnurse]	05/05/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CollectionEditorInfoAdapter">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      CollectionEditorInfoFactory
 -----------------------------------------------------------------------------
 <summary>
 The CollectionEditorInfoAdapter control provides an Adapter for Collection Onjects
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	05/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PagingControl.GetLink(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetLink returns the page number links for paging.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[dancaron]	10/28/2004	Initial Version
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PagingControl.GetPreviousLink">
 -----------------------------------------------------------------------------
 <summary>
 GetPreviousLink returns the link for the Previous page for paging.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[dancaron]	10/28/2004	Initial Version
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PagingControl.GetNextLink">
 -----------------------------------------------------------------------------
 <summary>
 GetNextLink returns the link for the Next Page for paging.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[dancaron]	10/28/2004	Initial Version
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PagingControl.GetFirstLink">
 -----------------------------------------------------------------------------
 <summary>
 GetFirstLink returns the First Page link for paging.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[dancaron]	10/28/2004	Initial Version
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.PagingControl.GetLastLink">
 -----------------------------------------------------------------------------
 <summary>
 GetLastLink returns the Last Page link for paging.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[dancaron]	10/28/2004	Initial Version
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.LanguageSelector.LanguageSelectionMode">
	<summary>
 Language Selection mode, offered to the user: single select or multiple select.
 </summary>
</member><member name="T:DotNetNuke.UI.WebControls.LanguageSelector.LanguageSelectionObject">
	<summary>
 Selection object: Language ("de", "en") or Locale ("de-DE", "en-US")
 </summary>
</member><member name="T:DotNetNuke.UI.WebControls.LanguageSelector.LanguageListDirection">
	<summary>
 orientation, how elements (text or flags) are arranged
 </summary>
</member><member name="T:DotNetNuke.UI.WebControls.LanguageSelector.LanguageItemStyle">
	<summary>
 display style for each item: Text, Flag, Both
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.LanguageSelector.SelectionMode">
	<summary>
 Gets or sets selection mode (single, multiple)
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.LanguageSelector.ItemStyle">
	<summary>
 Gets or sets the style of the language items
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.LanguageSelector.ListDirection">
	<summary>
 Gets or sets the direction of the language list
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.LanguageSelector.SelectedLanguages">
	<summary>
 Gets or sets the list of selected languages
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.LanguageSelector.CreateChildControls">
	<summary>
 Create Child Controls
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.LanguageSelector.GetCultures(System.Boolean)">
	<summary>
 retrieve the cultures, currently supported by the portal
 </summary>
	<param name="specific">true: locales, false: neutral languages</param>
	<returns>Array of cultures</returns>
</member><member name="T:DotNetNuke.UI.WebControls.LanguageSelector">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      LanguageSelector
 -----------------------------------------------------------------------------
 <summary>
 Language Selector control
 </summary>
	<history>
     [sleupold]	2007-11-10 created
     [sleupold]  2007-12-08 Support for Languages ("de", "en") and Locales ("de-DE", "en-US") added
 </history>
</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.ControlName">
 -----------------------------------------------------------------------------
 <summary>
 ControlName is the Id of the control that is associated with the label
 </summary>
	<value>A string representing the id of the associated control</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.CssClass">
 -----------------------------------------------------------------------------
 <summary>
 Css style applied to the asp:label control
 </summary>
	<value>A string representing css class name</value>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.HelpKey">
 -----------------------------------------------------------------------------
 <summary>
 HelpKey is the Resource Key for the Help Text
 </summary>
	<value>A string representing the Resource Key for the Help Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.HelpText">
 -----------------------------------------------------------------------------
 <summary>
 HelpText is value of the Help Text if no ResourceKey is provided
 </summary>
	<value>A string representing the Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.ResourceKey">
 -----------------------------------------------------------------------------
 <summary>
 ResourceKey is the Resource Key for the Label Text
 </summary>
	<value>A string representing the Resource Key for the Label Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.Suffix">
 -----------------------------------------------------------------------------
 <summary>
 Suffix is Optional Text that appears after the Localized Label Text
 </summary>
	<value>A string representing the Optional Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.Text">
 -----------------------------------------------------------------------------
 <summary>
 Text is value of the Label Text if no ResourceKey is provided
 </summary>
	<value>A string representing the Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.LabelControl.Width">
 -----------------------------------------------------------------------------
 <summary>
 Width is value of the Label Width
 </summary>
	<value>A string representing the Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.LabelControl.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.UserControls.LabelControl">
 -----------------------------------------------------------------------------
 <summary>
 LabelControl is a user control that provides all the server code to manage a
 label, including localization, 508 support and help.
 </summary>
	<remarks>
 To implement help, the control uses the ClientAPI interface.  In particular
  the javascript function __dnn_Help_OnClick()
 </remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.ControlName">
 -----------------------------------------------------------------------------
 <summary>
 ControlName is the Id of the control that is associated with the label
 </summary>
	<value>A string representing the id of the associated control</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.HelpKey">
 -----------------------------------------------------------------------------
 <summary>
 HelpKey is the Resource Key for the Help Text
 </summary>
	<value>A string representing the Resource Key for the Help Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.HelpText">
 -----------------------------------------------------------------------------
 <summary>
 HelpText is value of the Help Text if no ResourceKey is provided
 </summary>
	<value>A string representing the Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.ResourceKey">
 -----------------------------------------------------------------------------
 <summary>
 ResourceKey is the Resource Key for the Help Text
 </summary>
	<value>A string representing the Resource Key for the Label Text</value>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.HelpButtonControl.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/8/2004	Created
		[jhenning]	9/6/2005	Utilizingnew EnableMinMax function
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.UserControls.HelpButtonControl">
 -----------------------------------------------------------------------------
 <summary>
 HelpButtonControl is a user control that provides all the server code to display
 field level help button.
 </summary>
	<remarks>
 To implement help, the control uses the ClientAPI interface.  In particular
  the javascript function __dnn_Help_OnClick()
 </remarks>
	<history>
 	[smehaffie]	12/8/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.Help.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded.
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.Help.cmdCancel_Click(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 cmdCancel_Click runs when the cancel Button is clicked
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.DataField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field is the field that binds to the Text Column
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.DesignMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Design Mode of the Column
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/24/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.ItemType">
 -----------------------------------------------------------------------------
 <summary>
 The type of Template to Create
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.Text">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Text (for Header/Footer Templates)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.Width">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Width of the Column
 </summary>
	<value>A Unit</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextColumnTemplate.GetValue(System.Web.UI.WebControls.DataGridItem)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Data Field
 </summary>
	<param name="container">The parent container (DataGridItem)</param>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Item_DataBinding runs when an Item of type ListItemType.Item is being data-bound
 </summary>
	<remarks>
	</remarks>
	<param name="sender"> The object that triggers the event</param>
	<param name="e">An EventArgs object</param>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextColumnTemplate.InstantiateIn(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 InstantiateIn instantiates the template (implementation of ITemplate)
 </summary>
	<remarks>
	</remarks>
	<param name="container">The parent container (DataGridItem)</param>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.TextColumnTemplate">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      TextColumnTemplate
 -----------------------------------------------------------------------------
 <summary>
 The TextColumnTemplate provides a Template for the TextColumn
 </summary>
	<history>
     [cnurse]	02/20/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumn.DataField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field is the field that binds to the Text Column
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumn.Text">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Text (for Header/Footer Templates)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextColumn.Width">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Width of the Column
 </summary>
	<value>A Unit</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a TextColumnTemplate
 </summary>
	<returns>A TextColumnTemplate</returns>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextColumn.Initialize">
 -----------------------------------------------------------------------------
 <summary>
 Initialises the Column
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.TextColumn">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      TextColumn
 -----------------------------------------------------------------------------
 <summary>
 The TextColumn control provides a custom Text Column
 </summary>
	<history>
     [cnurse]	02/20/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.SelectedRoleNames">
	<summary>
 List of the Names of the selected Roles
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.ResourceFile">
	<summary>
 Gets and Sets the ResourceFile to localize permissions
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.ShowUnauthenticatedUsers">
	<summary>
 Enable ShowAllUsers to display the virtuell "Unauthenticated Users" role 
 </summary>
</member><member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.ShowAllUsers">
	<summary>
 Enable ShowAllUsers to display the virtuell "All Users" role 
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.BindData">
	<summary>
 Bind the data to the controls
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.BindRolesGrid">
	<summary>
 Bind the Roles data to the Grid
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.GetRoles">
	<summary>
 Gets the roles from the Database and loads them into the Roles property
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.SetUpRolesGrid">
	<summary>
 Sets up the columns for the Grid
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.LoadViewState(System.Object)">
	<summary>
 Load the ViewState
 </summary>
	<param name="savedState">The saved state</param>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.SaveViewState">
	<summary>
 Saves the ViewState
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.CreateChildControls">
	<summary>
 Creates the Child Controls
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the base OnPreRender method to Bind the Grid to the Permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.UpdateSelection(System.String,System.Boolean)">
	<summary>
 Updates a Selection
 </summary>
	<param name="roleName">The name of the role</param>
	<param name="Selected"></param>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.UpdateSelections">
	<summary>
 Updates the Selections
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.UpdateRoleSelections">
 -----------------------------------------------------------------------------
 <summary>
 Updates the permissions
 </summary>
</member><member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.RoleGroupsSelectedIndexChanged(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 RoleGroupsSelectedIndexChanged runs when the Role Group is changed
 </summary>
	<history>
     [cnurse]    01/06/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.Permissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Permissions Collection
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.TabID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Id of the Tab
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetTabPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the TabPermissions from the Data Store
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.ParseKeys(System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Parse the Permission Keys used to persist the Permissions in the ViewState
 </summary>
	<param name="Settings">A string array of settings</param>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permissions">The permissions collection</param>
	<param name="user">The user to add</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Enabled status of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<returns>A Boolean (True or False)</returns>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the permissions from the Database
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.LoadViewState(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Load the ViewState
 </summary>
	<param name="savedState">The saved state</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.SaveViewState">
 -----------------------------------------------------------------------------
 <summary>
 Saves the ViewState
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.SupportsDenyPermissions">
 -----------------------------------------------------------------------------
 <summary>
 returns whether or not the derived grid supports Deny permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AdministratorRoleId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Id of the Administrator Role
 </summary>
	<history>
     [cnurse]    01/16/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.RegisteredUsersRoleId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Id of the Registered Users Role
 </summary>
	<history>
     [cnurse]    01/16/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.DynamicColumnAdded">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets whether a Dynamic Column has been added
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.dtRolePermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the underlying Permissions Data Table
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.dtUserPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the underlying Permissions Data Table
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.PortalId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Id of the Portal
 </summary>
	<history>
     [cnurse]    01/16/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.Roles">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the collection of Roles to display
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.ResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the ResourceFile to localize permissions
 </summary>
	<history>
     [vmasanas]    02/24/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GenerateDataGrid">
 -----------------------------------------------------------------------------
 <summary>
 Generate the Data Grid
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BindData">
 -----------------------------------------------------------------------------
 <summary>
 Bind the data to the controls
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BindRolesGrid">
 -----------------------------------------------------------------------------
 <summary>
 Bind the Roles data to the Grid
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BindUsersGrid">
 -----------------------------------------------------------------------------
 <summary>
 Bind the Users data to the Grid
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetRoles">
 -----------------------------------------------------------------------------
 <summary>
 Gets the roles from the Database and loads them into the Roles property
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.SetUpRolesGrid">
 -----------------------------------------------------------------------------
 <summary>
 Sets up the columns for the Grid
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permissions">The permissions collection</param>
	<param name="user">The user to add</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BuildKey(System.Boolean,System.Int32,System.Int32,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Builds the key used to store the "permission" information in the ViewState
 </summary>
	<param name="allowAccess">The type of permission ( grant / deny )</param>
	<param name="permissionId">The Id of the permission</param>
	<param name="objectPermissionId">The Id of the object permission</param>
	<param name="roleId">The role id</param>
	<param name="roleName">The role name</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BuildKey(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Builds the key used to store the "permission" information in the ViewState
 </summary>
	<param name="allowAccess">The type of permission ( grant / deny )</param>
	<param name="permissionId">The Id of the permission</param>
	<param name="objectPermissionId">The Id of the object permission</param>
	<param name="roleId">The role id</param>
	<param name="roleName">The role name</param>
	<param name="userId">The user id</param>
	<param name="displayName">The user display name</param>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 Creates the Child Controls
 </summary>
	<history>
     [cnurse]    02/23/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Enabled status of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Enabled status of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="user">The user</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="user">The user</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="user">The user</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the permissions from the Database
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetUsers">
 -----------------------------------------------------------------------------
 <summary>
 Gets the users from the Database
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the base OnPreRender method to Bind the Grid to the Permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.Int32,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permission">The permission being updated</param>
	<param name="roleName">The name of the role</param>
	<param name="allowAccess">The value of the permission</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permission">The permission being updated</param>
	<param name="roleName">The name of the role</param>
	<param name="stateKey">The permission state</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.String,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permission">The permission being updated</param>
	<param name="displayName">The user's displayname</param>
	<param name="userId">The user's id</param>
	<param name="allowAccess">The value of the permission</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.String,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permission">The permission being updated</param>
	<param name="displayName">The user's displayname</param>
	<param name="userId">The user's id</param>
	<param name="stateKey">The permission state</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.SupportsDenyPermissions">
 -----------------------------------------------------------------------------
 <summary>
 returns whether or not the derived grid supports Deny permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermissions">
 -----------------------------------------------------------------------------
 <summary>
 Updates the permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdateRolePermissions">
 -----------------------------------------------------------------------------
 <summary>
 Updates the permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdateUserPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Updates the permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.RoleGroupsSelectedIndexChanged(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 RoleGroupsSelectedIndexChanged runs when the Role Group is changed
 </summary>
	<history>
     [cnurse]    01/06/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AddUser(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 AddUser runs when the Add user linkbutton is clicked
 </summary>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.InheritViewPermissionsFromTab">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets whether the Module inherits the Page's(Tab's) permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.ModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Id of the Module
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.TabId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Id of the Tab associated with this module
 </summary>
	<history>
     [cnurse]    24/11/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.Permissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModulePermission Collection
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetModulePermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModulePermissions from the Data Store
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.ParseKeys(System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Parse the Permission Keys used to persist the Permissions in the ViewState
 </summary>
	<param name="Settings">A string array of settings</param>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permissions">The permissions collection</param>
	<param name="user">The user to add</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Enabled status of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Enabled status of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="user">The user</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<returns>A Boolean (True or False)</returns>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="user">The role</param>
	<param name="column">The column of the Grid</param>
	<returns>A Boolean (True or False)</returns>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Permissions from the Data Store
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.LoadViewState(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Load the ViewState
 </summary>
	<param name="savedState">The saved state</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.SaveViewState">
 -----------------------------------------------------------------------------
 <summary>
 Saves the ViewState
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.SupportsDenyPermissions">
 -----------------------------------------------------------------------------
 <summary>
 returns whether or not the derived grid supports Deny permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GenerateDataGrid">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the Base method to Generate the Data Grid
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.FolderPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the path of the Folder
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.Permissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Permission Collection
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetFolderPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the TabPermissions from the Data Store
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.ParseKeys(System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Parse the Permission Keys used to persist the Permissions in the ViewState
 </summary>
	<param name="Settings">A string array of settings</param>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permissions">The permissions collection</param>
	<param name="user">The user to add</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Enabled status of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<history>
     [cnurse]    01/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Value of the permission
 </summary>
	<param name="objPerm">The permission being loaded</param>
	<param name="role">The role</param>
	<param name="column">The column of the Grid</param>
	<returns>A Boolean (True or False)</returns>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the permissions from the Database
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.LoadViewState(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Load the ViewState
 </summary>
	<param name="savedState">The saved state</param>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.SaveViewState">
 -----------------------------------------------------------------------------
 <summary>
 Saves the ViewState
 </summary>
	<history>
     [cnurse]    01/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.SupportsDenyPermissions">
 -----------------------------------------------------------------------------
 <summary>
 returns whether or not the derived grid supports Deny permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GenerateDataGrid">
 -----------------------------------------------------------------------------
 <summary>
 Overrides the Base method to Generate the Data Grid
 </summary>
	<history>
     [cnurse]    01/09/2006  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.CommandName">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the CommandName for the Column
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.DesignMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Design Mode of the Column
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/24/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the CommandName for the Column
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.ImageURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL of the Image
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.ItemType">
 -----------------------------------------------------------------------------
 <summary>
 The type of Template to Create
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.KeyField">
 -----------------------------------------------------------------------------
 <summary>
 The Key Field that provides a Unique key to the data Item
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.NavigateURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL of the Link (unless DataBinding through KeyField)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.NavigateURLFormatString">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL Formatting string
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.OnClickJS">
 -----------------------------------------------------------------------------
 <summary>
 Javascript text to attach to the OnClick Event
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.ShowImage">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether an Image is displayed
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.Text">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Text (for Header/Footer Templates)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.Visible">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the buttons are visible (this is overridden if
 the VisibleField is set)
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.VisibleField">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the buttons are visible.
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.GetIsVisible(System.Web.UI.WebControls.DataGridItem)">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether theButton is visible
 </summary>
	<param name="container">The parent container (DataGridItem)</param>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.GetValue(System.Web.UI.WebControls.DataGridItem)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the key
 </summary>
	<param name="container">The parent container (DataGridItem)</param>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Item_DataBinding runs when an Item of type ListItemType.Item is being data-bound
 </summary>
	<remarks>
	</remarks>
	<param name="sender"> The object that triggers the event</param>
	<param name="e">An EventArgs object</param>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.InstantiateIn(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 InstantiateIn instantiates the template (implementation of ITemplate)
 </summary>
	<remarks>
	</remarks>
	<param name="container">The parent container (DataGridItem)</param>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      ImageCommandColumnTemplate
 -----------------------------------------------------------------------------
 <summary>
 The ImageCommandColumnTemplate provides a Template for the ImageCommandColumn
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.ImageCommandColumnEditMode">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.UI.WebControls
 Project:    DotNetNuke
 Enum:       ImageCommandColumnEditMode
 -----------------------------------------------------------------------------
 <summary>
 The ImageCommandColumnEditMode Enum provides an enumeration of the types
 for how the Grid responds to an Edit Command
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.CommandName">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the CommandName for the Column
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the CommandName for the Column
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.ImageURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL of the Image
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.KeyField">
 -----------------------------------------------------------------------------
 <summary>
 The Key Field that provides a Unique key to the data Item
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.NavigateURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL of the Link (unless DataBinding through KeyField)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/17/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.NavigateURLFormatString">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL Formatting string
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.OnClickJS">
 -----------------------------------------------------------------------------
 <summary>
 Javascript text to attach to the OnClick Event
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.ShowImage">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether an Image is displayed
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.Text">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Text (for Header/Footer Templates)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.VisibleField">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the buttons are visible.
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.ImageCommandColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a ImageCommandColumnTemplate
 </summary>
	<returns>A ImageCommandColumnTemplate</returns>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.ImageCommandColumn.Initialize">
 -----------------------------------------------------------------------------
 <summary>
 Initialises the Column
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.ImageCommandColumn">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      ImageCommandColumn
 -----------------------------------------------------------------------------
 <summary>
 The ImageCommandColumn control provides an Image Command (or Hyperlink) column 
 for a Data Grid
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNDataGridCheckChangedEventArgs">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNDataGrid
 -----------------------------------------------------------------------------
 <summary>
 The DNNDataGridCheckChangedEventArgs class is a cusom EventArgs class for
 handling Event Args from the CheckChanged event in a CheckBox Column
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNDataGrid.OnItemCheckedChanged(System.Object,DotNetNuke.UI.WebControls.DNNDataGridCheckChangedEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Centralised Event that is raised whenever a check box is changed.
 </summary>
	<history>
     [cnurse]	02/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNDataGrid.OnDataBinding(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Called when the grid is Data Bound
 </summary>
	<history>
     [cnurse]	02/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNDataGrid">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNDataGrid
 -----------------------------------------------------------------------------
 <summary>
 The DNNDataGrid control provides an Enhanced Data Grid, that supports other
 column types
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.AutoPostBack">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the column fires a postback when any check box is 
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Checked">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the checkbox is checked (unless DataBound) 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.DataField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that the column should bind to
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.DesignMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Design Mode of the Column
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/24/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Enabled">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the hcekboxes are enabled (this is overridden if
 the EnabledField is set
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.EnabledField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that determines whether the checkbox is Enabled
 changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.HeaderCheckBox">
 -----------------------------------------------------------------------------
 <summary>
 A flag that indicates whether there is a checkbox in the Header that sets all
 the checkboxes
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	07/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.ItemType">
 -----------------------------------------------------------------------------
 <summary>
 The type of Template to Create
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Text">
 -----------------------------------------------------------------------------
 <summary>
 The Text to display in a Header Template
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.InstantiateIn(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 InstantiateIn is called when the Template is instantiated by the parent control
 </summary>
	<param name="container">The container control</param>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Called when the template item is Data Bound
 </summary>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.OnCheckChanged(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Centralised Event that is raised whenever a check box's state is modified
 </summary>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      CheckBoxColumnTemplate
 -----------------------------------------------------------------------------
 <summary>
 The CheckBoxColumnTemplate provides a Template for the CheckBoxColumn
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the CheckBoxColumn
 </summary>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.#ctor(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the CheckBoxColumn, with an optional AutoPostBack (where each change
 of state of a check box causes a Post Back)
 </summary>
	<param name="autoPostBack">Optional set the checkboxes to postback</param>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.AutoPostBack">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the column fires a postback when any check box is 
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.Checked">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the checkbox is checked (unless DataBound) 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.DataField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that the column should bind to
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.Enabled">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the checkboxes are enabled (this is overridden if
 the EnabledField is set)
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.EnabledField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that determines whether the checkbox is Enabled
 changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.HeaderCheckBox">
 -----------------------------------------------------------------------------
 <summary>
 A flag that indicates whether there is a checkbox in the Header that sets all
 the checkboxes
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	07/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a CheckBoxColumnTemplate
 </summary>
	<returns>A CheckBoxColumnTemplate</returns>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.OnCheckedChanged(System.Object,DotNetNuke.UI.WebControls.DNNDataGridCheckChangedEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Centralised Event that is raised whenever a check box is changed.
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.Initialize">
 -----------------------------------------------------------------------------
 <summary>
 Initialises the Column
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CheckBoxColumn">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      CheckBoxColumn
 -----------------------------------------------------------------------------
 <summary>
 The CheckBoxColumn control provides a Check Box column for a Data Grid
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.ButtonSeparator">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Separator between Buttons
 </summary>
	<remarks>Defaults to 1 non-breaking spaces</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	12/17/2007   created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.CausesValidation">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the control causes Validation to occur
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.CommandArgument">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the command argument for this command button
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	12/22/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.CommandName">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the command name for this command button
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.DisplayLink">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the link is displayed
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.DisplayIcon">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the icon is displayed
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.ImageUrl">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Image used for the Icon
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.OnClick">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the "onClick" Attribute
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.ResourceKey">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Resource Key used for the Control
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.Text">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Text used for the Control
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CommandButton.ValidationGroup">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Validation Group that this control "validates"
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	06/03/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 CreateChildControls overrides the Base class's method to correctly build the
 control based on the configuration
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.OnButtonClick(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnButtonClick raises the CommandButton control's Click event
 </summary>
	<history>
 	[cnurse]	12/17/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnCommand raises the CommandButton control's Command event
 </summary>
	<history>
 	[cnurse]	12/22/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs just before the Render phase of the Page Life Cycle
 </summary>
	<history>
 	[cnurse]	12/22/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.RaiseClick(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 RaiseClick runs when one of the contained Link buttons is clciked
 </summary>
	<remarks>It raises a Click Event.
 </remarks>
	<param name="sender"> The object that triggers the event</param>
	<param name="e">An EventArgs object</param>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.RaiseCommand(System.Object,System.Web.UI.WebControls.CommandEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 RaiseCommand runs when one of the contained Link buttons is clicked
 </summary>
	<remarks>It raises a Command Event.
 </remarks>
	<param name="sender"> The object that triggers the event</param>
	<param name="e">An CommandEventArgs object</param>
	<history>
 	[cnurse]	12/22/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CommandButton.RaiseImageClick(System.Object,System.Web.UI.ImageClickEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 RaiseImageClick runs when the Image button is clicked
 </summary>
	<remarks>It raises a Command Event.
 </remarks>
	<param name="sender"> The object that triggers the event</param>
	<param name="e">An ImageClickEventArgs object</param>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CommandButton">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.UI.WebControls
 Project:    DotNetNuke
 Class:      CommandButton
 -----------------------------------------------------------------------------
 <summary>
 The CommandButton Class provides an enhanced Button control for DotNetNuke
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/06/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CaptchaHandler">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      CaptchaHandler
 -----------------------------------------------------------------------------
 <summary>
 The CaptchaHandler control provides a validator to validate a CAPTCHA Challenge
 </summary>
	<history>
     [cnurse]	03/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.BackGroundColor">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the BackGroundColor
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.BackGroundImage">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the BackGround Image
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaChars">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the list of characters
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaHeight">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the height of the Captcha image
 </summary>
	<history>
 	[cnurse]	05/11/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the length of the Captcha string
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaWidth">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the width of the Captcha image
 </summary>
	<history>
 	[cnurse]	05/11/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.EnableViewState">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Viewstate is enabled
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.ErrorMessage">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ErrorMessage to display if the control is invalid
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.ErrorStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Style to use for the ErrorMessage
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.Expiration">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Expiration time in seconds
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the control is valid
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.RenderUrl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Url to use to render the control
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.Text">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Help Text to use
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.CaptchaControl.TextBoxStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Style to use for the Text Box
 </summary>
	<history>
 	[cnurse]	09/02/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GetUrl">
 -----------------------------------------------------------------------------
 <summary>
 Builds the url for the Handler
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.EncodeTicket">
 -----------------------------------------------------------------------------
 <summary>
 Encodes the querystring to pass to the Handler
 </summary>
	<history>
 	[cnurse]	03/20/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.CreateImage(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Creates the Image
 </summary>
	<param name="width">The width of the image</param>
	<param name="height">The height of the image</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.CreateText(System.String,System.Int32,System.Int32,System.Drawing.Graphics)">
 -----------------------------------------------------------------------------
 <summary>
 Creates the Text
 </summary>
	<param name="text">The text to display</param>
	<param name="width">The width of the image</param>
	<param name="height">The height of the image</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Decrypt(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Decrypts the CAPTCHA Text
 </summary>
	<param name="encryptedContent">The encrypted text</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.DistortImage(System.Drawing.Bitmap@,System.Double)">
 -----------------------------------------------------------------------------
 <summary>
 DistortImage distorts the captcha image
 </summary>
	<param name="b">The Image to distort</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Encrypt(System.String,System.DateTime)">
 -----------------------------------------------------------------------------
 <summary>
 Encrypts the CAPTCHA Text
 </summary>
	<param name="content">The text to encrypt</param>
	<param name="expiration">The time the ticket expires</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GenerateImage(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GenerateImage generates the Captch Image
 </summary>
	<param name="encryptedText">The Encrypted Text to display</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GetFont">
 -----------------------------------------------------------------------------
 <summary>
 GetFont gets a random font to use for the Captcha Text
 </summary>
	<history>
     [cnurse]	03/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.RandomPoint(System.Int32,System.Int32,System.Int32@,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 Generates a random point
 </summary>
	<param name="xmin">The minimum x value</param>
	<param name="xmax">The maximum x value</param>
	<param name="ymin">The minimum y value</param>
	<param name="ymax">The maximum y value</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.WarpText(System.Drawing.Drawing2D.GraphicsPath@,System.Drawing.Rectangle)">
 -----------------------------------------------------------------------------
 <summary>
 Warps the Text
 </summary>
	<param name="textPath">The Graphics Path for the text</param>
	<param name="rect">a rectangle which defines the image</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 Creates the child controls
 </summary>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GetNextCaptcha">
 -----------------------------------------------------------------------------
 <summary>
 Gets the next Captcha
 </summary>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.LoadViewState(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Loads the previously saved Viewstate
 </summary>
	<param name="savedState">The saved state</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Runs just before the control is to be rendered
 </summary>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Render(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Render the  control
 </summary>
	<param name="writer">An Html Text Writer</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.SaveViewState">
 -----------------------------------------------------------------------------
 <summary>
 Save the controls Voewstate
 </summary>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Validate(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Validates the posted back data
 </summary>
	<param name="userData">The user entered data</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
 -----------------------------------------------------------------------------
 <summary>
 LoadPostData loads the Post Back Data and determines whether the value has change
 </summary>
	<param name="postDataKey">A key to the PostBack Data to load</param>
	<param name="postCollection">A name value collection of postback data</param>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.CaptchaControl.RaisePostDataChangedEvent">
 -----------------------------------------------------------------------------
 <summary>
 RaisePostDataChangedEvent runs when the PostBackData has changed. 
 </summary>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.CaptchaControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      CaptchaControl
 -----------------------------------------------------------------------------
 <summary>
 The CaptchaControl control provides a Captcha Challenge control
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.Address.Localize">
 -----------------------------------------------------------------------------
 <summary>
 Localize correctly sets up the control for US/Canada/Other Countries
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/08/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.Address.ShowRequiredFields">
 -----------------------------------------------------------------------------
 <summary>
 ShowRequiredFields sets up displaying which fields are required
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/08/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.Address.UpdateRequiredFields">
 -----------------------------------------------------------------------------
 <summary>
 UpdateRequiredFields updates which fields are required
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/08/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.UserControls.Address.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the control is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/08/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.UserControls.Address">
 -----------------------------------------------------------------------------
 <summary>
 The Address UserControl is used to manage User Addresses
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/08/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.ClearUserList">
 -----------------------------------------------------------------------------
 <summary>
 Clears the cached Users Online Information
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.GetOnlineTimeWindow">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Online time window
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.GetUserList">
 -----------------------------------------------------------------------------
 <summary>
 Gets the cached Users Online Information
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.IsEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Users Online functionality is enabled
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.IsUserOnline(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Determines whether a User is online
 </summary>
	<history>
     [cnurse]	03/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.SetUserList(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 Sets the cached Users Online Information
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.TrackAnonymousUser(System.Web.HttpContext)">
 -----------------------------------------------------------------------------
 <summary>
 Tracks an Anonymous User
 </summary>
	<param name="context">An HttpContext Object</param>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.TrackAuthenticatedUser(System.Web.HttpContext)">
 -----------------------------------------------------------------------------
 <summary>
 Tracks an Authenticated User
 </summary>
	<param name="context">An HttpContext Object</param>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.TrackUsers">
 -----------------------------------------------------------------------------
 <summary>
 Tracks an online User
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserOnlineController.UpdateUsersOnline">
 -----------------------------------------------------------------------------
 <summary>
 Update the Users Online information
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.UserOnlineController">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      UserOnlineController
 -----------------------------------------------------------------------------
 <summary>
 The UserOnlineController class provides Business Layer methods for Users Online
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.PurgeUsersOnline.#ctor(DotNetNuke.Services.Scheduling.ScheduleHistoryItem)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a PurgeUsesOnline SchedulerClient
 </summary>
	<remarks>
	</remarks>
	<param name="objScheduleHistoryItem">A SchedulerHistiryItem</param>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.PurgeUsersOnline.UpdateUsersOnline">
 -----------------------------------------------------------------------------
 <summary>
 UpdateUsersOnline updates the Users Online information
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.PurgeUsersOnline.DoWork">
 -----------------------------------------------------------------------------
 <summary>
 DoWork does th4 Scheduler work
 </summary>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.PurgeUsersOnline">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      PurgeUsersOnline
 -----------------------------------------------------------------------------
 <summary>
 The PurgeUsersOnline class provides a Scheduler for purging the Users Online
 data
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.OnlineUserInfo.UserID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User Id for this online user
 </summary>
	<history>
     [cnurse]	03/14/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.OnlineUserInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      OnlineUserInfo
 -----------------------------------------------------------------------------
 <summary>
 The OnlineUserInfo class provides an Entity for an online user
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.BaseUserInfo.PortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the PortalId for this online user
 </summary>
	<history>
     [cnurse]	03/14/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.BaseUserInfo.TabID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the TabId for this online user
 </summary>
	<history>
     [cnurse]	03/14/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.BaseUserInfo.CreationDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the CreationDate for this online user
 </summary>
	<history>
     [cnurse]	03/14/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.BaseUserInfo.LastActiveDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the LastActiveDate for this online user
 </summary>
	<history>
     [cnurse]	03/14/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.BaseUserInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      BaseUserInfo
 -----------------------------------------------------------------------------
 <summary>
 The BaseUserInfo class provides a base Entity for an online user
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.AnonymousUserInfo.UserID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User Id for this online user
 </summary>
	<history>
     [cnurse]	03/14/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.AnonymousUserInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      PurgeUsersOnline
 -----------------------------------------------------------------------------
 <summary>
 The AnonymousUserInfo class provides an Entity for an anonymous user
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/14/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.UserRoleInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      UserRoleInfo
 -----------------------------------------------------------------------------
 <summary>
 The UserRoleInfo class provides Business Layer model for a User/Role
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	01/03/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserModuleBase.GetSetting(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Setting for the Module
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	05/01/2006  Created
     [cnurse]    02/07/2008  DNN-7003 Fixed GetSetting() in UserModuleBase so it handles situation where one or more settings are missing.
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserModuleBase.UpdateSettings(System.Int32,System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 Updates the Settings for the Module
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	06/27/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.AddUser">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether we are in Add User mode
 </summary>
	<history>
 	[cnurse]	03/06/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsAdmin">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the current user is an Administrator (or SuperUser)
 </summary>
	<history>
 	[cnurse]	03/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsHostTab">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether this control is in the Host menu
 </summary>
	<history>
 	[cnurse]	07/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsEdit">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the control is being called form the User Accounts module
 </summary>
	<history>
 	[cnurse]	07/07/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsProfile">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the current user is modifying their profile
 </summary>
	<history>
 	[cnurse]	03/21/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsRegister">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether an anonymous user is trying to register
 </summary>
	<history>
 	[cnurse]	03/21/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsUser">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the User is editing their own information
 </summary>
	<history>
 	[cnurse]	03/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.UserPortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PortalId to use for this control
 </summary>
	<history>
 	[cnurse]	02/21/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.User">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User associated with this control
 </summary>
	<history>
 	[cnurse]	03/02/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserModuleBase.UserId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the UserId associated with this control
 </summary>
	<history>
 	[cnurse]	03/01/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserModuleBase.InitialiseUser">
 -----------------------------------------------------------------------------
 <summary>
 InitialiseUser initialises a "new" user
 </summary>
	<history>
 	[cnurse]	03/13/2006
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserModuleBase.AddLocalizedModuleMessage(System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddLocalizedModuleMessage adds a localized module message
 </summary>
	<param name="message">The localized message</param>
	<param name="type">The type of message</param>
	<param name="display">A flag that determines whether the message should be displayed</param>
	<history>
 	[cnurse]	03/14/2006
 	[cnurse]	07/03/2007  Moved to Base Class and changed to Protected
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserModuleBase.AddModuleMessage(System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleMessage adds a module message
 </summary>
	<param name="message">The message</param>
	<param name="type">The type of message</param>
	<param name="display">A flag that determines whether the message should be displayed</param>
	<history>
 	[cnurse]	03/14/2006
 	[cnurse]	07/03/2007  Moved to Base Class and changed to Protected
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.UserModuleBase">
 -----------------------------------------------------------------------------
 Project	 :  DotNetNuke
 Namespace:  DotNetNuke.Entities.Modules
 Class	 :  UserModuleBase
 -----------------------------------------------------------------------------
 <summary>
 The UserModuleBase class defines a custom base class inherited by all
 desktop portal modules within the Portal that manage Users.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	03/20/2006
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.AffiliateID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the AffiliateId for this user
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.DisplayName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Display Name
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.Email">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Email Address
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.FirstName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the First Name
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.IsDeleted">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the User is deleted
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.IsSuperUser">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the User is a SuperUser
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.LastIPAddress">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last IP address used by user
 </summary>
	<history>
     [cnurse]	02/13/2009	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.LastName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last Name
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.Membership">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Membership object
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.PortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the PortalId
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.Profile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Profile Object
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.RefreshRoles">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the User's roles should be refreshed
 </summary>
	<history>
     [cnurse]	02/18/2009	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.Roles">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Roles for this User
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
     [sleupold]  08/14/2007  auto hydration of roles added
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.UserID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User Id
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserInfo.Username">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User Name
 </summary>
	<history>
     [cnurse]	02/24/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserInfo.IsInRole(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 IsInRole determines whether the user is in the role passed
 </summary>
	<param name="role">The role to check</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserInfo.UpdateDisplayName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateDisplayName updates the displayname to the format provided
 </summary>
	<param name="format">The format to use</param>
	<history>
     [cnurse]	02/21/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserInfo.isAdminUser(DotNetNuke.Entities.Users.UserInfo@)">
	<summary>
 Determine, if accessing user is Administrator
 </summary>
	<param name="AccessingUser">userinfo of the user to query</param>
	<returns>true, if user is portal administrator or superuser</returns>
	<history>
    2007-10-20 [sleupold] added
 </history>
</member><member name="M:DotNetNuke.Entities.Users.UserInfo.GetProperty(System.String,System.String,System.Globalization.CultureInfo,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Services.Tokens.Scope,System.Boolean@)">
	<summary>
 Property access, initially provided for TokenReplace
 </summary>
	<param name="strPropertyName">Name of the Property</param>
	<param name="strFormat">format string</param>
	<param name="formatProvider">format provider for numbers, dates, currencies</param>
	<param name="AccessingUser">userinfo of the user, who queries the data (used to determine permissions)</param>
	<param name="CurrentScope">requested maximum access level, might be restricted due to user level</param>
	<param name="PropertyNotFound">out: flag, if property could be retrieved.</param>
	<returns>current value of the property for this userinfo object</returns>
	<history>
    2007-10-20   [sleupold]   documented and extended with differenciated access permissions
    2007-10-20   [sleupold]   role access added (for user himself or admin only).
 </history>
</member><member name="T:DotNetNuke.Entities.Users.UserInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      UserInfo
 -----------------------------------------------------------------------------
 <summary>
 The UserInfo class provides Business Layer model for Users
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	12/13/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserSettings(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Settings for the Module
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	03/02/2006
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ChangePassword(DotNetNuke.Entities.Users.UserInfo,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ChangePassword attempts to change the users password
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to update.</param>
	<param name="oldPassword">The old password.</param>
	<param name="newPassword">The new password.</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ChangePasswordQuestionAndAnswer(DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ChangePasswordQuestionAndAnswer attempts to change the users password Question
 and PasswordAnswer
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to update.</param>
	<param name="password">The password.</param>
	<param name="passwordQuestion">The new password question.</param>
	<param name="passwordAnswer">The new password answer.</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	02/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.CreateUser(DotNetNuke.Entities.Users.UserInfo@)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a new User in the Data Store
 </summary>
	<remarks></remarks>
	<param name="objUser">The userInfo object to persist to the Database</param>
	<returns>The Created status ot the User</returns>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.DeleteUser(DotNetNuke.Entities.Users.UserInfo@,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes an existing User from the Data Store
 </summary>
	<remarks></remarks>
	<param name="objUser">The userInfo object to delete from the Database</param>
	<param name="notify">A flag that indicates whether an email notification should be sent</param>
	<param name="deleteAdmin">A flag that indicates whether the Portal Administrator should be deleted</param>
	<returns>A Boolean value that indicates whether the User was successfully deleted</returns>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.DeleteUsers(System.Int32,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes all Users for a Portal
 </summary>
	<remarks></remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="notify">A flag that indicates whether an email notification should be sent</param>
	<param name="deleteAdmin">A flag that indicates whether the Portal Administrator should be deleted</param>
	<history>
 	[cnurse]	12/14/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.DeleteUnauthorizedUsers(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes all Unauthorized Users for a Portal
 </summary>
	<remarks></remarks>
	<param name="portalId">The Id of the Portal</param>
	<history>
 	[cnurse]	12/14/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.FillUserCollection(System.Int32,System.Data.IDataReader,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 FillUserCollection fills an ArrayList of users
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="dr">The data reader corresponding to the User.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	03/30/2006	created
     [cnurse]    09/02/2009  moved to UserController
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.FillUserCollection(System.Int32,System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillUserCollection fills an ArrayList of users
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="dr">The data reader corresponding to the User.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	06/15/2006	created
     [cnurse]    09/02/2009  moved to UserController
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.FillUserInfo(System.Int32,System.Data.IDataReader,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillUserInfo fills a User Info object from a data reader
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="dr">The data reader corresponding to the User.</param>
	<param name="closeDataReader">Flag to determine whether to close the datareader</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	12/13/2005	created
     [cnurse]    09/02/2009  moved to UserController
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GeneratePassword">
 -----------------------------------------------------------------------------
 <summary>
 Generates a new random password (Length = Minimum Length + 4)
 </summary>
	<returns>A String</returns>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GeneratePassword(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Generates a new random password
 </summary>
	<param name="length">The length of password to generate.</param>
	<returns>A String</returns>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetCachedUser(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetCachedUser retrieves the User from the Cache, or fetches a fresh copy if 
 not in cache or if Cache settings not set to HeavyCaching
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="username">The username of the user being retrieved.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	12/12/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo">
 -----------------------------------------------------------------------------
 <summary>
 Get the current UserInfo object
 </summary>
	<returns>The current UserInfo if authenticated, oherwise an empty user</returns>
	<history>
 	[cnurse]	05/23/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetOnlineUsers(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a collection of Online Users
 </summary>
	<param name="portalId">The Id of the Portal</param>
	<returns>An ArrayList of UserInfo objects</returns>
	<history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetPassword(DotNetNuke.Entities.Users.UserInfo@,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Current Password Information for the User 
 </summary>
	<remarks>This method will only return the password if the memberProvider supports
 and is using a password encryption method that supports decryption.</remarks>
	<param name="user">The user whose Password information we are retrieving.</param>
	<param name="passwordAnswer">The answer to the "user's" password Question.</param>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUnAuthorizedUsers(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUnAuthorizedUsers gets all the users of the portal, that are not authorized
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserById(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUser retrieves a User from the DataStore
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="userId">The Id of the user being retrieved from the Data Store.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserByName(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="username">The username of the user being retrieved from the Data Store.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserCountByPortal(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserCountByPortal gets the number of users in the portal
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<returns>The no of users</returns>
	<history>
     [cnurse]	05/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserCreateStatus(DotNetNuke.Security.Membership.UserCreateStatus)">
 -----------------------------------------------------------------------------
 <summary>
 Retruns a String corresponding to the Registration Status of the User
 </summary>
	<param name="UserRegistrationStatus">The AUserCreateStatus</param>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserMembership(DotNetNuke.Entities.Users.UserInfo@)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Membership Information for the User
 </summary>
	<remarks></remarks>
	<param name="objUser">The user whose Membership information we are retrieving.</param>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetDefaultUserSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Settings for the Module
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	03/02/2006
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUserSettings(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserSettings retrieves the UserSettings from the User
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<returns>The Settings Hashtable</returns>
	<history>
     [cnurse]	03/23/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUsers(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsers gets all the users of the portal
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUsers(System.Int32,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsers gets all the users of the portal, by page
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByEmail(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsersByEmail gets all the users of the portal whose email matches a provided
 filter expression
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="emailToMatch">The email address to use to find a match.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByUserName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsersByUserName gets all the users of the portal whose username matches a provided
 filter expression
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="userNameToMatch">The username to use to find a match.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByProfileProperty(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsersByProfileProperty gets all the users of the portal whose profile matches
 the profile property pased as a parameter
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="propertyName">The name of the property being matched.</param>
	<param name="propertyValue">The value of the property being matched.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ResetPassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Resets the password for the specified user
 </summary>
	<remarks>Resets the user's password</remarks>
	<param name="user">The user whose Password information we are resetting.</param>
	<param name="passwordAnswer">The answer to the "user's" password Question.</param>
	<history>
 	[cnurse]	02/08/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.UnLockUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Unlocks the User's Account
 </summary>
	<remarks></remarks>
	<param name="user">The user whose account is being Unlocked.</param>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.UpdateUser(System.Int32,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a User
 </summary>
	<param name="portalId">The Id of the Portal</param>
	<param name="objUser">The use to update</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/18/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.UserLogin(System.Int32,System.String,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Validates a User's credentials against the Data Store, and sets the Forms Authentication
 Ticket
 </summary>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="UserName">The user name of the User attempting to log in</param>
	<param name="Password">The password of the User attempting to log in</param>
	<param name="VerificationCode">The verification code of the User attempting to log in</param>
	<param name="PortalName">The name of the Portal</param>
	<param name="IP">The IP Address of the user attempting to log in</param>
	<param name="loginStatus">A UserLoginStatus enumeration that indicates the status of the 
 Login attempt.  This value is returned by reference.</param>
	<param name="CreatePersistentCookie">A flag that indicates whether the login credentials 
 should be persisted.</param>
	<returns>The UserInfo object representing a successful login</returns>
	<history>
 	[cnurse]	12/09/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.UserLogin(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Logs a Validated User in
 </summary>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="user">The validated User</param>
	<param name="PortalName">The name of the Portal</param>
	<param name="IP">The IP Address of the user attempting to log in</param>
	<param name="CreatePersistentCookie">A flag that indicates whether the login credentials 
 should be persisted.</param>
	<history>
 	[cnurse]	03/15/2006	created
 	[cnurse]	02/28/2008	DNN-3968 -seperate temporary and persistent cookie timeouts . Resolved issue where timeout was reset when revisiting site.
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ValidatePassword(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Validates a Password
 </summary>
	<param name="password">The password to Validate</param>
	<returns>A boolean</returns>
	<history>
 	[cnurse]	02/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ValidateUser(System.Int32,System.String,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
 -----------------------------------------------------------------------------
 <summary>
 Validates a User's credentials against the Data Store
 </summary>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="UserName">The user name of the User attempting to log in</param>
	<param name="Password">The password of the User attempting to log in</param>
	<param name="VerificationCode">The verification code of the User attempting to log in</param>
	<param name="PortalName">The name of the Portal</param>
	<param name="IP">The IP Address of the user attempting to log in</param>
	<param name="loginStatus">A UserLoginStatus enumeration that indicates the status of the 
 Login attempt.  This value is returned by reference.</param>
	<returns>The UserInfo object representing a valid user</returns>
	<history>
 	[cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ValidateUser(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
 -----------------------------------------------------------------------------
 <summary>
 Validates a User's credentials against the Data Store
 </summary>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="UserName">The user name of the User attempting to log in</param>
	<param name="Password">The password of the User attempting to log in</param>
	<param name="authType">The type of Authentication Used</param>
	<param name="VerificationCode">The verification code of the User attempting to log in</param>
	<param name="PortalName">The name of the Portal</param>
	<param name="IP">The IP Address of the user attempting to log in</param>
	<param name="loginStatus">A UserLoginStatus enumeration that indicates the status of the 
 Login attempt.  This value is returned by reference.</param>
	<returns>The UserInfo object representing a valid user</returns>
	<history>
     [cnurse]	07/09/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.ValidateUser(DotNetNuke.Entities.Users.UserInfo,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Validates a User's Password and Profile
 </summary>
	<remarks>This overload takes a valid User (Credentials check out) and check whether the Password and Profile need updating</remarks>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="objUser">The user attempting to log in</param>
	<returns>The UserLoginStatus</returns>
	<history>
 	[cnurse]	07/03/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUser(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUser retrieves a User from the DataStore
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="userId">The Id of the user being retrieved from the Data Store.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	7/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.UpdateDisplayNames">
 -----------------------------------------------------------------------------
 <summary>
 Update all the Users Display Names
 </summary>
	<history>
 	[cnurse]	21/02/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserController.GetUser(System.Int32,System.Int32,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 GetUser retrieves a User from the DataStore
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="userId">The Id of the user being retrieved from the Data Store.</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<param name="hydrateRoles">A flag that instructs the method to automatically hydrate the roles</param>
	<returns>The User as a UserInfo object</returns>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.UserController">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      UserController
 -----------------------------------------------------------------------------
 <summary>
 The UserController class provides Business Layer methods for Users
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/18/2004	documented
     [cnurse]    05/23/2005  made compatible with .NET 2.0
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Cell">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Cell/Mobile Phone
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.City">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the City part of the Address
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Country">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Country part of the Address
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Fax">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Fax Phone
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.FirstName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the First Name
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.FullName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Full Name
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.IM">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Instant Messenger Handle
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.IsDirty">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the property has been changed
 </summary>
	<history>
     [cnurse]	02/10/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.LastName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last Name
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.PostalCode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the PostalCode part of the Address
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.PreferredLocale">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Preferred Locale
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.ProfileProperties">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Collection of Profile Properties
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
     [cnurse]    03/28/2006  Converted to a ProfilePropertyDefinitionCollection
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Region">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Region part of the Address
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Street">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Street part of the Address
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Telephone">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Telephone
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.TimeZone">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the TimeZone
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Unit">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Unit part of the Address
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserProfile.Website">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Website
 </summary>
	<history>
     [cnurse]	02/10/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserProfile.ClearIsDirty">
 -----------------------------------------------------------------------------
 <summary>
 Clears the IsDirty Flag
 </summary>
	<history>
     [cnurse]	02/29/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserProfile.GetProperty(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Profile Property from the Profile
 </summary>
	<remarks></remarks>
	<param name="propName">The name of the property to retrieve.</param>
	<history>
 	[cnurse]	02/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserProfile.GetPropertyValue(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Profile Property Value from the Profile
 </summary>
	<remarks></remarks>
	<param name="propName">The name of the propoerty to retrieve.</param>
	<history>
 	[cnurse]	02/10/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserProfile.InitialiseProfile(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Initialises the Profile with an empty collection of profile properties
 </summary>
	<remarks></remarks>
	<param name="portalId">The name of the property to retrieve.</param>
	<history>
 	[cnurse]	05/18/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserProfile.InitialiseProfile(System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Initialises the Profile with an empty collection of profile properties
 </summary>
	<remarks></remarks>
	<param name="portalId">The name of the property to retrieve.</param>
	<param name="useDefaults">A flag that indicates whether the profile default values should be
 copied to the Profile.</param>
	<history>
 	[cnurse]	08/04/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Users.UserProfile.SetProfileProperty(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sets a Profile Property Value in the Profile
 </summary>
	<remarks></remarks>
	<param name="propName">The name of the propoerty to set.</param>
	<param name="propValue">The value of the propoerty to set.</param>
	<history>
 	[cnurse]	02/10/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.UserProfile">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      UserProfile
 -----------------------------------------------------------------------------
 <summary>
 The UserProfile class provides a Business Layer entity for the Users Profile
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	01/31/2006	documented
     [cnurse]    02/10/2006  updated with extensible profile enhancment
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionComparer.Compare(System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Compares two ProfilePropertyDefinition objects
 </summary>
	<param name="x">A ProfilePropertyDefinition object</param>
	<param name="y">A ProfilePropertyDefinition object</param>
	<returns>An integer indicating whether x greater than y, x=y or x less than y</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionComparer">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Profile
 Class:      ProfilePropertyDefinitionComparer
 -----------------------------------------------------------------------------
 <summary>
 The ProfilePropertyDefinitionComparer class provides an implementation of
 IComparer to sort the ProfilePropertyDefinitionCollection by ViewOrder
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new default collection
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.#ctor(System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new Collection from an ArrayList of ProfilePropertyDefinition objects
 </summary>
	<param name="definitionsList">An ArrayList of ProfilePropertyDefinition objects</param>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.#ctor(DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new Collection from a ProfilePropertyDefinitionCollection
 </summary>
	<param name="collection">A ProfilePropertyDefinitionCollection</param>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Item(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets an item in the collection.
 </summary>
	<remarks>This overload returns the item by its index. </remarks>
	<param name="index">The index to get</param>
	<returns>A ProfilePropertyDefinition object</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Item(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an item in the collection.
 </summary>
	<remarks>This overload returns the item by its name</remarks>
	<param name="name">The name of the Property to get</param>
	<returns>A ProfilePropertyDefinition object</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Add(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a property Definition to the collectio.
 </summary>
	<param name="value">A ProfilePropertyDefinition object</param>
	<returns>The index of the property Definition in the collection</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.AddRange(System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
 Add an ArrayList of ProfilePropertyDefinition objects
 </summary>
	<param name="definitionsList">An ArrayList of ProfilePropertyDefinition objects</param>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.AddRange(DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Add an existing ProfilePropertyDefinitionCollection
 </summary>
	<param name="collection">A ProfilePropertyDefinitionCollection</param>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Contains(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Determines whether the collection contains a property definition
 </summary>
	<param name="value">A ProfilePropertyDefinition object</param>
	<returns>A Boolean True/False</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.GetByCategory(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a sub-collection of items in the collection by category.
 </summary>
	<param name="category">The category to get</param>
	<returns>A ProfilePropertyDefinitionCollection object</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.GetById(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an item in the collection by Id.
 </summary>
	<param name="id">The id of the Property to get</param>
	<returns>A ProfilePropertyDefinition object</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.GetByName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an item in the collection by name.
 </summary>
	<param name="name">The name of the Property to get</param>
	<returns>A ProfilePropertyDefinition object</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.IndexOf(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the index of a property Definition
 </summary>
	<param name="value">A ProfilePropertyDefinition object</param>
	<returns>The index of the property Definition in the collection</returns>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Insert(System.Int32,DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Inserts a property Definition into the collectio.
 </summary>
	<param name="value">A ProfilePropertyDefinition object</param>
	<param name="index">The index to insert the item at</param>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Remove(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Removes a property definition from the collection
 </summary>
	<param name="value">The ProfilePropertyDefinition object to remove</param>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Sort">
 -----------------------------------------------------------------------------
 <summary>
 Sorts the collection using the ProfilePropertyDefinitionComparer (ie by ViewOrder)
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Profile
 Class:      ProfilePropertyDefinitionCollection
 -----------------------------------------------------------------------------
 <summary>
 The ProfilePropertyDefinitionCollection class provides Business Layer methods for 
 a collection of property Definitions
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.DataType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Data Type of the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.DefaultValue">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Default Value of the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.IsDirty">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Definition has been modified since it has been retrieved
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Length">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Length of the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ModuleDefId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleDefId
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PortalId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the PortalId
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyCategory">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Category of the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyDefinitionId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Id of the ProfilePropertyDefinition
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Name of the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyValue">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Value of the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Required">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the property is required
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ValidationExpression">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a Validation Expression (RegEx) for the Profile Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ViewOrder">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the View Order of the Property
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Visible">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the property is visible
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Visibility">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the property is visible
 </summary>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ClearIsDirty">
 -----------------------------------------------------------------------------
 <summary>
 Clears the IsDirty Flag
 </summary>
	<history>
     [cnurse]	02/23/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Profile.ProfilePropertyDefinition">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Profile
 Class:      ProfilePropertyDefinition
 -----------------------------------------------------------------------------
 <summary>
 The ProfilePropertyDefinition class provides a Business Layer entity for 
 property Definitions
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.AddDefaultDefinition(System.Int32,System.String,System.String,System.String,System.Int32,DotNetNuke.Common.Lists.ListEntryInfoCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a single default property definition
 </summary>
	<param name="PortalId">Id of the Portal</param>
	<param name="category">Category of the Property</param>
	<param name="name">Name of the Property</param>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.FillCollection(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ProfilePropertyDefinitionCollection from a DataReader
 </summary>
	<param name="dr">An IDataReader object</param>
	<returns>The ProfilePropertyDefinitionCollection</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.GetUserProfile(DotNetNuke.Entities.Users.UserInfo@)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Profile Information for the User
 </summary>
	<remarks></remarks>
	<param name="objUser">The user whose Profile information we are retrieving.</param>
	<history>
 	[cnurse]	12/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.UpdateUserProfile(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a User's Profile
 </summary>
	<param name="objUser">The use to update</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/18/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.UpdateUserProfile(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a User's Profile
 </summary>
	<param name="objUser">The use to update</param>
	<param name="profileProperties">The collection of profile properties</param>
	<returns>The updated User</returns>
	<history>
 	[cnurse]	03/02/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.ValidateProfile(System.Int32,DotNetNuke.Entities.Users.UserProfile)">
 -----------------------------------------------------------------------------
 <summary>
 Validates the Profile properties for the User (determines if all required properties
 have been set)
 </summary>
	<param name="portalId">The Id of the portal.</param>
	<param name="objProfile">The profile.</param>
	<history>
 	[cnurse]	03/13/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.AddDefaultDefinitions(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Adds the default property definitions for a portal
 </summary>
	<param name="PortalId">Id of the Portal</param>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.AddPropertyDefinition(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a Property Defintion to the Data Store
 </summary>
	<param name="definition">An ProfilePropertyDefinition object</param>
	<returns>The Id of the definition (or if negative the errorcode of the error)</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.ClearProfileDefinitionCache(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Clears the Profile Definitions Cache
 </summary>
	<param name="PortalId">Id of the Portal</param>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.DeletePropertyDefinition(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a Property Defintion from the Data Store
 </summary>
	<param name="definition">The ProfilePropertyDefinition object to delete</param>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinition(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Property Defintion from the Data Store by id
 </summary>
	<param name="definitionId">The id of the ProfilePropertyDefinition object to retrieve</param>
	<returns>The ProfilePropertyDefinition object</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionByName(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Property Defintion from the Data Store by name
 </summary>
	<param name="portalId">The id of the Portal</param>
	<param name="name">The name of the ProfilePropertyDefinition object to retrieve</param>
	<returns>The ProfilePropertyDefinition object</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionsByCategory(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a collection of Property Defintions from the Data Store by category
 </summary>
	<param name="portalId">The id of the Portal</param>
	<param name="category">The category of the Property Defintions to retrieve</param>
	<returns>A ProfilePropertyDefinitionCollection object</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionsByPortal(System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a collection of Property Defintions from the Data Store by portal
 </summary>
	<param name="portalId">The id of the Portal</param>
	<returns>A ProfilePropertyDefinitionCollection object</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Profile.ProfileController.UpdatePropertyDefinition(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Property Defintion in the Data Store
 </summary>
	<param name="definition">The ProfilePropertyDefinition object to update</param>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Profile.ProfileController">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Profile
 Class:      ProfileController
 -----------------------------------------------------------------------------
 <summary>
 The ProfileController class provides Business Layer methods for profiles and
 for profile property Definitions
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	01/31/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.Approved">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the User is Approved
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.CreatedDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User's Creation Date
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.IsOnLine">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the User Is Online
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.LastActivityDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last Activity Date of the User
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.LastLockoutDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last Lock Out Date of the User
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.LastLoginDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last Login Date of the User
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.LastPasswordChangeDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Last Password Change Date of the User
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.LockedOut">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the user is locked out
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.Password">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User's Password
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.PasswordAnswer">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User's Password Answer
 </summary>
	<history>
     [cnurse]	08/04/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.PasswordQuestion">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User's Password Question
 </summary>
	<history>
     [cnurse]	02/27/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Users.UserMembership.UpdatePassword">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag that determines whether the password should be updated
 </summary>
	<history>
     [cnurse]	03/14/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Users.UserMembership">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Users
 Class:      UserMembership
 -----------------------------------------------------------------------------
 <summary>
 The UserMembership class provides Business Layer model for the Users Membership
 related properties
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	12/22/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.PasswordConfig.PasswordExpiry">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Password Expiry time in days
 </summary>
	<returns>An integer.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.PasswordConfig.PasswordExpiryReminder">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the a Reminder time in days (to remind the user that theire password 
 is about to expire
 </summary>
	<returns>An integer.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Membership.PasswordConfig">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Membership
 Class:      PasswordConfig
 -----------------------------------------------------------------------------
 <summary>
 The PasswordConfig class provides a wrapper any Portal wide Password Settings
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserCreateCompleted(DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserCreateCompleted Event
 </summary>
	<history>
 	[cnurse]	07/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserCreated(DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserCreated Event
 </summary>
	<history>
 	[cnurse]	03/01/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserDeleted(DotNetNuke.Entities.Modules.UserUserControlBase.UserDeletedEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserDeleted Event
 </summary>
	<history>
 	[cnurse]	03/01/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserDeleteError(DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserDeleteError Event
 </summary>
	<history>
 	[cnurse]	11/30/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserUpdated(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserUpdated Event
 </summary>
	<history>
 	[cnurse]	03/01/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserUpdateCompleted(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserUpdated Event
 </summary>
	<history>
 	[cnurse]	03/01/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserUpdateError(DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the UserUpdateError Event
 </summary>
	<history>
 	[cnurse]	02/07/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new BaseUserEventArgs
 </summary>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs.UserId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Id of the User
 </summary>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs.UserName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the username of the User
 </summary>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs">
 -----------------------------------------------------------------------------
 <summary>
 The BaseUserEventArgs class provides a base for User EventArgs classes
 </summary>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.#ctor(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new UserCreatedEventArgs
 </summary>
	<param name="newUser">The newly Created User</param>
	<history>
 	[cnurse]	03/08/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.CreateStatus">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Create Status
 </summary>
	<history>
 	[cnurse]	03/08/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.NewUser">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the New User
 </summary>
	<history>
 	[cnurse]	03/08/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.Notify">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag whether to Notify the new User of the Creation
 </summary>
	<history>
 	[cnurse]	03/08/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs">
 -----------------------------------------------------------------------------
 <summary>
 The UserCreatedEventArgs class provides a customised EventArgs class for
 the UserCreated Event
 </summary>
	<history>
 	[cnurse]	03/08/2006  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserDeletedEventArgs.#ctor(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new UserDeletedEventArgs
 </summary>
	<param name="id">The Id of the User</param>
	<param name="name">The user name of the User</param>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserDeletedEventArgs">
 -----------------------------------------------------------------------------
 <summary>
 The UserDeletedEventArgs class provides a customised EventArgs class for
 the UserDeleted Event
 </summary>
	<history>
 	[cnurse]	03/08/2006  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs.#ctor(System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new UserUpdateErrorArgs
 </summary>
	<param name="id">The Id of the User</param>
	<param name="name">The user name of the User</param>
	<param name="message">The error message</param>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs.Message">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the error message
 </summary>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs">
 -----------------------------------------------------------------------------
 <summary>
 The UserUpdateErrorArgs class provides a customised EventArgs class for
 the UserUpdateError Event
 </summary>
	<history>
 	[cnurse]	02/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.UserUserControlBase">
 -----------------------------------------------------------------------------
 Project	 :  DotNetNuke
 Namespace:  DotNetNuke.Entities.Modules
 Class	 :  UserUserControlBase
 -----------------------------------------------------------------------------
 <summary>
 The UserUserControlBase class defines a custom base class for the User Control.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	03/02/2007
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ProfileUserControlBase.OnProfileUpdateCompleted(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the OnProfileUpdateCompleted Event
 </summary>
	<history>
 	[cnurse]	07/13/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ProfileUserControlBase.OnProfileUpdated(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Raises the ProfileUpdated Event
 </summary>
	<history>
 	[cnurse]	03/16/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.ProfileUserControlBase">
 -----------------------------------------------------------------------------
 Project	 :  DotNetNuke
 Namespace:  DotNetNuke.Entities.Modules
 Class	 :  ProfileUserControlBase
 -----------------------------------------------------------------------------
 <summary>
 The ProfileUserControlBase class defines a custom base class for the profile Control.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	03/02/2007
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddAdminPages(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddAdminPages adds an Admin Page and an associated Module to all configured Portals
 </summary>
	<param name="TabName">The Name to give this new Tab</param>
	<param name="TabIconFile">The Icon for this new Tab</param>
	<param name="IsVisible">A flag indicating whether the tab is visible</param>
	<param name="ModuleDefId">The Module Deinition Id for the module to be aded to this tab</param>
	<param name="ModuleTitle">The Module's title</param>
	<param name="ModuleIconFile">The Module's icon</param>
	<history>
 	[cnurse]	11/16/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddSearchResults(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 AddSearchResults adds a top level Hidden Search Results Page
 </summary>
	<param name="ModuleDefId">The Module Deinition Id for the Search Results Module</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleToPage(DotNetNuke.Entities.Tabs.TabInfo,System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleToPage adds a module to a Page
 </summary>
	<remarks>
 This overload assumes ModulePermissions will be inherited
 </remarks>
	<param name="page">The Page to add the Module to</param>
	<param name="ModuleDefId">The Module Deinition Id for the module to be aded to this tab</param>
	<param name="ModuleTitle">The Module's title</param>
	<param name="ModuleIconFile">The Module's icon</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPage(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.Permissions.TabPermissionCollection,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddPage adds a Tab Page
 </summary>
	<remarks>
 Adds a Tab to a parentTab
 </remarks>
	<param name="parentTab">The Parent Tab</param>
	<param name="TabName">The Name to give this new Tab</param>
	<param name="TabIconFile">The Icon for this new Tab</param>
	<param name="IsVisible">A flag indicating whether the tab is visible</param>
	<param name="permissions">Page Permissions Collection for this page</param>
	<param name="IsAdmin">Is an admin page</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPage(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.Permissions.TabPermissionCollection,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddPage adds a Tab Page
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="ParentId">The Id of the Parent Tab</param>
	<param name="TabName">The Name to give this new Tab</param>
	<param name="TabIconFile">The Icon for this new Tab</param>
	<param name="IsVisible">A flag indicating whether the tab is visible</param>
	<param name="permissions">Page Permissions Collection for this page</param>
	<param name="IsAdmin">Is and admin page</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPagePermission(DotNetNuke.Security.Permissions.TabPermissionCollection@,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 AddPagePermission adds a TabPermission to a TabPermission Collection
 </summary>
	<param name="permissions">Page Permissions Collection for this page</param>
	<param name="key">The Permission key</param>
	<param name="roleId">The role given the permission</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleDefinition(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleDefinition adds a new Core Module Definition to the system
 </summary>
	<remarks>
	This overload asumes the module is an Admin module and not a Premium Module
 </remarks>
	<param name="DesktopModuleName">The Friendly Name of the Module to Add</param>
	<param name="Description">Description of the Module</param>
	<param name="ModuleDefinitionName">The Module Definition Name</param>
	<returns>The Module Definition Id of the new Module</returns>
	<history>
 	[cnurse]	10/14/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleDefinition(System.String,System.String,System.String,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleDefinition adds a new Core Module Definition to the system
 </summary>
	<remarks>
	This overload allows the caller to determine whether the module has a controller
 class
 </remarks>
	<param name="DesktopModuleName">The Friendly Name of the Module to Add</param>
	<param name="Description">Description of the Module</param>
	<param name="ModuleDefinitionName">The Module Definition Name</param>
	<param name="Premium">A flag representing whether the module is a Premium module</param>
	<param name="Admin">A flag representing whether the module is an Admin module</param>
	<returns>The Module Definition Id of the new Module</returns>
	<history>
 	[cnurse]	10/14/2004	documented
     [cnurse]    11/11/2004  removed addition of Module Control (now in AddMOduleControl)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleDefinition(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleDefinition adds a new Core Module Definition to the system
 </summary>
	<remarks>
	This overload allows the caller to determine whether the module has a controller
 class
 </remarks>
	<param name="DesktopModuleName">The Friendly Name of the Module to Add</param>
	<param name="Description">Description of the Module</param>
	<param name="ModuleDefinitionName">The Module Definition Name</param>
	<param name="Premium">A flag representing whether the module is a Premium module</param>
	<param name="Admin">A flag representing whether the module is an Admin module</param>
	<returns>The Module Definition Id of the new Module</returns>
	<history>
 	[cnurse]	10/14/2004	documented
     [cnurse]    11/11/2004  removed addition of Module Control (now in AddMOduleControl)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleControl(System.Int32,System.String,System.String,System.String,System.String,DotNetNuke.Security.SecurityAccessLevel,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleControl adds a new Module Control to the system
 </summary>
	<remarks>
	</remarks>
	<param name="ModuleDefId">The Module Definition Id</param>
	<param name="ControlKey">The key for this control in the Definition</param>
	<param name="ControlTitle">The title of this control</param>
	<param name="ControlSrc">Te source of ths control</param>
	<param name="IconFile">The icon file</param>
	<param name="ControlType">The type of control</param>
	<param name="ViewOrder">The vieworder for this module</param>
	<history>
 	[cnurse]	11/08/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleControl(System.Int32,System.String,System.String,System.String,System.String,DotNetNuke.Security.SecurityAccessLevel,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleControl adds a new Module Control to the system
 </summary>
	<remarks>
	</remarks>
	<param name="ModuleDefId">The Module Definition Id</param>
	<param name="ControlKey">The key for this control in the Definition</param>
	<param name="ControlTitle">The title of this control</param>
	<param name="ControlSrc">Te source of ths control</param>
	<param name="IconFile">The icon file</param>
	<param name="ControlType">The type of control</param>
	<param name="ViewOrder">The vieworder for this module</param>
	<param name="HelpURL">The Help Url</param>
	<history>
 	[cnurse]	11/08/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddSkinControl(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddSkinControl adds a new Module Control to the system
 </summary>
	<remarks>
	</remarks>
	<param name="ControlKey">The key for this control in the Definition</param>
	<param name="ControlSrc">Te source of ths control</param>
	<history>
 	[cnurse]	05/26/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.CoreModuleExists(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 CoreModuleExists determines whether a Core Module exists on the system
 </summary>
	<remarks>
	</remarks>
	<param name="DesktopModuleName">The Friendly Name of the Module</param>
	<returns>True if the Module exists, otherwise False</returns>
	<history>
 	[cnurse]	10/14/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.DeleteFiles(System.Version,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteFiles - clean up deprecated files and folders
 </summary>
	<remarks>
	</remarks>
	<param name="version">The Version being Upgraded</param>
	<history>
 	[swalker]	11/09/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.ExecuteScript(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 ExecuteScript executes a SQl script file
 </summary>
	<remarks>
	</remarks>
	<param name="strScriptFile">The script to Execute</param>
	<history>
 	[cnurse]	11/09/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetModuleDefinition(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinition gets the Module Definition Id of a module
 </summary>
	<param name="DesktopModuleName">The Friendly Name of the Module to Add</param>
	<param name="ModuleDefinitionName">The Module Definition Name</param>
	<returns>The Module Definition Id of the Module (-1 if no module definition)</returns>
	<history>
 	[cnurse]	11/16/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.HostTabExists(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HostTabExists determines whether a tab of a given name exists under the Host tab
 </summary>
	<remarks>
	</remarks>
	<param name="TabName">The Name of the Tab</param>
	<returns>True if the Tab exists, otherwise False</returns>
	<history>
 	[cnurse]	11/08/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallMemberRoleProvider(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 InstallMemberRoleProvider - Installs the MemberRole Provider Db objects
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The Path to the Provider Directory</param>
	<history>
 	[cnurse]	02/02/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallMemberRoleProviderScript(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 InstallMemberRoleProviderScript - Installs a specific MemberRole Provider script
 </summary>
	<remarks>
	</remarks>
	<param name="providerPath">The Path to the Provider Directory</param>
	<param name="scriptFile">The Name of the Script File</param>
	<param name="writeFeedback">Whether or not to echo results</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.ParseFiles(System.Xml.XmlNode,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 ParseFiles parses the Host Template's Files node
 </summary>
	<remarks>
	</remarks>
	<param name="node">The Files node</param>
	<param name="portalId">The PortalId (-1 for Host Files)</param>
	<history>
 	[cnurse]	11/08/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.RemoveCoreModule(System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 RemoveCoreModule removes a Core Module from the system
 </summary>
	<remarks>
	</remarks>
	<param name="DesktopModuleName">The Friendly Name of the Module to Remove</param>
	<param name="ParentTabName">The Name of the parent Tab/Page for this module</param>
	<param name="TabName">The Name to tab that contains the Module</param>
	<param name="TabRemove">A flag to determine whether to remove the Tab if it has no
	other modules</param>
	<history>
 	[cnurse]	10/14/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddAdminPages(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddAdminPages adds an Admin Page and an associated Module to all configured Portals
 </summary>
	<param name="TabName">The Name to give this new Tab</param>
	<param name="TabIconFile">The Icon for this new Tab</param>
	<param name="IsVisible">A flag indicating whether the tab is visible</param>
	<param name="ModuleDefId">The Module Deinition Id for the module to be aded to this tab</param>
	<param name="ModuleTitle">The Module's title</param>
	<param name="ModuleIconFile">The Module's icon</param>
	<param name="InheritPermissions">Modules Inherit the Pages View Permisions</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddAdminPage(DotNetNuke.Entities.Portals.PortalInfo,System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddAdminPage adds an Admin Tab Page
 </summary>
	<param name="Portal">The Portal</param>
	<param name="TabName">The Name to give this new Tab</param>
	<param name="TabIconFile">The Icon for this new Tab</param>
	<param name="IsVisible">A flag indicating whether the tab is visible</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddHostPage(System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddHostPage adds a Host Tab Page
 </summary>
	<param name="TabName">The Name to give this new Tab</param>
	<param name="TabIconFile">The Icon for this new Tab</param>
	<param name="IsVisible">A flag indicating whether the tab is visible</param>
	<history>
 	[cnurse]	11/11/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleToPage(DotNetNuke.Entities.Tabs.TabInfo,System.Int32,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleToPage adds a module to a Page
 </summary>
	<remarks>
	</remarks>
	<param name="page">The Page to add the Module to</param>
	<param name="ModuleDefId">The Module Deinition Id for the module to be aded to this tab</param>
	<param name="ModuleTitle">The Module's title</param>
	<param name="ModuleIconFile">The Module's icon</param>
	<param name="InheritPermissions">Inherit the Pages View Permisions</param>
	<history>
 	[cnurse]	11/16/2004	created 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPortal(System.Xml.XmlNode,System.Boolean,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 AddPortal manages the Installation of a new DotNetNuke Portal
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/06/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.CheckUpgrade">
 -----------------------------------------------------------------------------
 <summary>
 CheckUpgrade checks whether there are any possible upgrade issues
 </summary>
	<history>
 	[cnurse]	04/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.ExecuteScripts(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ExecuteScripts manages the Execution of Scripts from the Install/Scripts folder.
 It is also triggered by InstallDNN and UpgradeDNN
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The path to the Data Provider</param>
	<history>
 	[cnurse]	05/04/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.ExecuteScript(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ExecuteScript executes a special script
 </summary>
	<remarks>
	</remarks>
	<param name="strFile">The script file to execute</param>
	<history>
 	[cnurse]	04/11/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetInstallTemplate(System.Xml.XmlDocument)">
 -----------------------------------------------------------------------------
 <summary>
 GetInstallTemplate retrieves the Installation Template as specifeid in web.config
 </summary>
	<remarks>
	</remarks>
	<param name="xmlDoc">The Xml Document to load</param>
	<returns>A string which contains the error message - if appropriate</returns>
	<history>
 	[cnurse]	02/13/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetInstallVersion(System.Xml.XmlDocument)">
 -----------------------------------------------------------------------------
 <summary>
 GetInstallVersion retrieves the Base Instal Version as specifeid in the install
 template
 </summary>
	<remarks>
	</remarks>
	<param name="xmlDoc">The Install Template</param>
	<history>
 	[cnurse]	02/13/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetLogFile(System.String,System.Version)">
 -----------------------------------------------------------------------------
 <summary>
 GetLogFile gets the filename for the version's log file
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The path to the Data Provider</param>
	<param name="version">The Version</param>
	<history>
 	[cnurse]	02/16/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetScriptFile(System.String,System.Version)">
 -----------------------------------------------------------------------------
 <summary>
 GetScriptFile gets the filename for the version
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The path to the Data Provider</param>
	<param name="version">The Version</param>
	<history>
 	[cnurse]	02/16/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetStringVersion(System.Version)">
 -----------------------------------------------------------------------------
 <summary>
 GetStringVersion gets the Version String (xx.xx.xx) from the Version
 </summary>
	<remarks>
	</remarks>
	<param name="version">The Version</param>
	<history>
 	[cnurse]	02/15/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetSuperUser(System.Xml.XmlDocument,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 GetSuperUser gets the superuser from the Install Template
 </summary>
	<remarks>
	</remarks>
	<param name="xmlTemplate">The install Templae</param>
	<param name="writeFeedback">a flag to determine whether to output feedback</param>
	<history>
 	[cnurse]	02/16/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetUpgradeScripts(System.String,System.Version)">
 -----------------------------------------------------------------------------
 <summary>
 GetUpgradeScripts gets an ArrayList of the Scripts required to Upgrade to the
 current Assembly Version
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The path to the Data Provider</param>
	<param name="databaseVersion">The current Database Version</param>
	<history>
 	[cnurse]	02/14/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.InitialiseHostSettings(System.Xml.XmlDocument,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 InitialiseHostSettings gets the Host Settings from the Install Template
 </summary>
	<remarks>
	</remarks>
	<param name="xmlTemplate">The install Templae</param>
	<param name="writeFeedback">a flag to determine whether to output feedback</param>
	<history>
 	[cnurse]	02/16/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallDatabase(System.Version,System.String,System.Xml.XmlDocument,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 InstallDatabase runs all the "scripts" identifed in the Install Template to 
 install the base version
 </summary>
	<remarks>
	</remarks>
	<param name="xmlDoc">The Xml Document to load</param>
	<param name="writeFeedback">A flag that determines whether to output feedback to the Response Stream</param>
	<returns>A string which contains the error message - if appropriate</returns>
	<history>
 	[cnurse]	02/13/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallDNN(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 InstallDNN manages the Installation of a new DotNetNuke Application
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The path to the Data Provider</param>
	<history>
 	[cnurse]	11/06/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallFiles(System.Xml.XmlDocument,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 InstallFiles intsalls any files listed in the Host Install Configuration file
 </summary>
	<remarks>
	</remarks>
	<param name="xmlDoc">The Xml Document to load</param>
	<param name="writeFeedback">A flag that determines whether to output feedback to the Response Stream</param>
	<history>
 	[cnurse]	02/19/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeApplication">
 -----------------------------------------------------------------------------
 <summary>
 UpgradeApplication - This overload is used for general application upgrade operations. 
 </summary>
	<remarks>
	Since it is not version specific and is invoked whenever the application is 
	restarted, the operations must be re-executable.
 </remarks>
	<history>
 	[cnurse]	11/6/2004	documented
     [cnurse]    02/27/2007  made public so it can be called from Wizard
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeApplication(System.Version,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 UpgradeApplication - This overload is used for version specific application upgrade operations. 
 </summary>
	<remarks>
	This should be used for file system modifications or upgrade operations which 
	should only happen once. Database references are not recommended because future 
	versions of the application may result in code incompatibilties.
 </remarks>
	<param name="Version">The Version being Upgraded</param>
	<history>
 	[cnurse]	11/6/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeDNN(System.String,System.Version)">
 -----------------------------------------------------------------------------
 <summary>
 UpgradeDNN manages the Upgrade of an exisiting DotNetNuke Application
 </summary>
	<remarks>
	</remarks>
	<param name="strProviderPath">The path to the Data Provider</param>
	<param name="dataBaseVersion">The current Database Version</param>
	<history>
 	[cnurse]	11/06/2004	created (Upgrade code extracted from AutoUpgrade)
     [cnurse]    11/10/2004  version specific upgrades extracted to ExecuteScript
     [cnurse]    01/20/2005  changed to Public so Upgrade can be manually controlled
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeVersion(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 UpgradeVersion upgrades a single version
 </summary>
	<remarks>
	</remarks>
	<param name="strScriptFile">The upgrade script file</param>
	<history>
 	[cnurse]	02/14/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Upgrade.Upgrade">
 -----------------------------------------------------------------------------
 <summary>
 The Upgrade class provides Shared/Static methods to Upgrade/Install
	a DotNetNuke Application
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/6/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Tokens.TokenReplace.HostSettings">
	<summary>
 Gets the Host settings from Portal
 </summary>
	<value>A hashtable with all settings</value>
</member><member name="P:DotNetNuke.Services.Tokens.TokenReplace.ModuleId">
	<summary>
 Gets/sets the current ModuleID to be used for 'User:' token replacement
 </summary>
	<value>ModuleID (Integer)</value>
</member><member name="P:DotNetNuke.Services.Tokens.TokenReplace.ModuleInfo">
	<summary>
 Gets/sets the module settings object to use for 'Module:' token replacement
 </summary>
</member><member name="P:DotNetNuke.Services.Tokens.TokenReplace.PortalSettings">
	<summary>
 Gets/sets the portal settings object to use for 'Portal:' token replacement
 </summary>
	<value>PortalSettings oject</value>
</member><member name="P:DotNetNuke.Services.Tokens.TokenReplace.User">
	<summary>
 Gets/sets the user object to use for 'User:' token replacement
 </summary>
	<value>UserInfo oject</value>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor">
	<summary>
 creates a new TokenReplace object for default context
 </summary>
	<history>
 08/10/2007 sLeupold  documented
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(System.Int32)">
	<summary>
 creates a new TokenReplace object for default context and the current module
 </summary>
	<param name="ModuleID">ID of the current module</param>
	<history>
 10/19/2007 sLeupold  added
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope)">
	<summary>
 creates a new TokenReplace object for custom context
 </summary>
	<param name="AccessLevel">Security level granted by the calling object</param>
	<history>
 08/10/2007 sLeupold  documented
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope,System.Int32)">
	<summary>
 creates a new TokenReplace object for custom context
 </summary>
	<param name="AccessLevel">Security level granted by the calling object</param>
	<param name="ModuleID">ID of the current module</param>
	<history>
 08/10/2007 sLeupold  documented
 10/19/2007 sLeupold  added
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo)">
	<summary>
 creates a new TokenReplace object for custom context
 </summary>
	<param name="AccessLevel">Security level granted by the calling object</param>
	<param name="Language">Locale to be used for formatting etc.</param>
	<param name="PortalSettings">PortalSettings to be used</param>
	<param name="User">user, for which the properties shall be returned</param>
	<history>
 08/10/2007 sLeupold  documented
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
	<summary>
 creates a new TokenReplace object for custom context
 </summary>
	<param name="AccessLevel">Security level granted by the calling object</param>
	<param name="Language">Locale to be used for formatting etc.</param>
	<param name="PortalSettings">PortalSettings to be used</param>
	<param name="User">user, for which the properties shall be returned</param>
	<param name="ModuleID">ID of the current module</param>
	<history>
     08/10/2007    sleupold  documented
     10/19/2007    sleupold  ModuleID added
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String)">
	<summary>
 Replaces tokens in strSourceText parameter with the property values
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<returns>string containing replaced values</returns>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Data.DataRow)">
	<summary>
 Replaces tokens in strSourceText parameter with the property values
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<param name="row"></param>
	<returns>string containing replaced values</returns>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.ArrayList,System.String)">
	<summary>
 Replaces tokens in strSourceText parameter with the property values
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<param name="Custom"></param>
	<param name="CustomCaption"></param>
	<returns>string containing replaced values</returns>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.IDictionary,System.String)">
	<summary>
 Replaces tokens in strSourceText parameter with the property values
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<param name="Custom">NameValueList for replacing [custom:name] tokens, where 'custom' is specified in next param and name is either thekey or the index number in the string </param>
	<param name="CustomCaption">Token name to be used inside token  [custom:name]</param>
	<returns>string containing replaced values</returns>
	<history>
 08/10/2007 sLeupold created
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.ArrayList,System.String,System.Data.DataRow)">
	<summary>
 Replaces tokens in strSourceText parameter with the property values
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<param name="Custom">NameValueList for replacing [custom:name] tokens, where 'custom' is specified in next param and name is either thekey or the index number in the string </param>
	<param name="CustomCaption">Token name to be used inside token  [custom:name]</param>
	<param name="Row">DataRow, from which field values shall be used for replacement</param>
	<returns>string containing replaced values</returns>
	<history>
 08/10/2007 sLeupold created
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceTokens(System.String)">
	<summary>
 Replaces tokens in strSourceText parameter with the property values, skipping environment objects
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<returns>string containing replaced values</returns>
	<history>
 08/10/2007 sLeupold created
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.TokenReplace.InitializePropertySources">
	<summary>
 setup context by creating appropriate objects
 </summary>
	<history>
 /08/10/2007 sCullmann created
 </history>
	<remarks>
 security is not the purpose of the initialization, this is in the resonsibilty of each property access class
 </remarks>
</member><member name="T:DotNetNuke.Services.Tokens.TokenReplace">
	<summary>
 The TokenReplace class provides the option to replace tokens formatted 
 [object:property] or [object:property|format] or [custom:no] within a string
 with the appropriate current property/custom values.
 Example for Newsletter: 'Dear [user:Displayname],' ==&gt; 'Dear Superuser Account,'
 Supported Token Sources: User, Host, Portal, Tab, Module, Membership, Profile, 
                          Row, Date, Ticks, ArrayList (Custom), IDictionary
 </summary>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Tokens.PropertyAccess.Boolean2LocalizedYesNo(System.Boolean,System.Globalization.CultureInfo)">
	<summary>
 Boolean2LocalizedYesNo returns the translated string for "yes" or "no" against a given boolean value. 
 </summary>
	<param name="value"></param>
	<param name="formatProvider"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Tokens.PropertyAccess.FormatString(System.String,System.String)">
	<summary>
 Returns a formatted String if a format is given, otherwise it returns the unchanged value. 
 </summary>
	<param name="value">string to be formatted</param>
	<param name="format">format specification</param>
	<returns>formatted string</returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Tokens.PropertyAccess.GetObjectProperty(System.Object,System.String,System.String,System.Globalization.CultureInfo,System.Boolean@)">
	<summary>
     Returns the localized property of any object as string using reflection
 </summary>
	<param name="objObject">Object to access</param>
	<param name="strPropertyName">Name of property</param>
	<param name="strFormat">Format String</param>
	<param name="formatProvider">specify formatting</param>
	<param name="PropertyNotFound">out: specifies, whether property was found</param>
	<returns>Localized Property</returns>
	<remarks></remarks>
</member><member name="T:DotNetNuke.Services.Tokens.PropertyAccess">
	<summary>
 Property Access to Objects using Relection
 </summary>
	<remarks></remarks>
</member><member name="T:DotNetNuke.Services.Tokens.IPropertyAccess">
	<summary>
 Interface to query any DataSource for their properties or custom values.
 </summary>
	<remarks></remarks>
</member><member name="P:DotNetNuke.Services.Tokens.BaseTokenReplace.TokenizerRegex">
	<summary>
 Gets the Regular expression for the token to be replaced
 </summary>
	<value>A regular Expression</value>
</member><member name="P:DotNetNuke.Services.Tokens.BaseTokenReplace.Language">
	<summary>
 Gets/sets the language to be used, e.g. for date format
 </summary>
	<value>A string, representing the locale</value>
</member><member name="P:DotNetNuke.Services.Tokens.BaseTokenReplace.FormatProvider">
	<summary>
 Gets the Format provider as Culture info from stored language or current culture
 </summary>
	<value>An CultureInfo</value>
</member><member name="T:DotNetNuke.Services.Tokens.BaseTokenReplace">
	<summary>
 The BaseTokenReplace class provides the tokenization of tokens formatted  
 [object:property] or [object:property|format|ifEmpty] or [custom:no] within a string
 with the appropriate current property/custom values.
 </summary>
	<remarks></remarks>
</member><member name="F:DotNetNuke.Services.Tokens.Scope.NoSettings">
	<summary>
 Only access to Date and Time
 </summary>
</member><member name="F:DotNetNuke.Services.Tokens.Scope.Configuration">
	<summary>
 Tokens for Host, Portal, Tab (, Module), user name
 </summary>
</member><member name="F:DotNetNuke.Services.Tokens.Scope.DefaultSettings">
	<summary>
 Configuration, Current User data and user data allowed for registered members
 </summary>
</member><member name="F:DotNetNuke.Services.Tokens.Scope.SystemMessages">
	<summary>
 System notifications to users and adminstrators
 </summary>
</member><member name="F:DotNetNuke.Services.Tokens.Scope.Debug">
	<summary>
 internal debugging, error messages, logs
 </summary>
</member><member name="T:DotNetNuke.Services.Tokens.Scope">
	<summary>
 Scope informs the property access classes about the planned usage of the token
 </summary>
	<remarks>
 The result of a token replace operation depends on the current context, privacy settings 
 and the current scope. The scope should be the lowest scope needed for the current purpose.
 The property access classes should evaluate and use the scope before returning a value.
 </remarks>
</member><member name="F:DotNetNuke.Services.Tokens.CacheLevel.notCacheable">
	<summary>
 Caching of the text is not suitable and might expose security risks
 </summary>
</member><member name="F:DotNetNuke.Services.Tokens.CacheLevel.secureforCaching">
	<summary>
 Caching of the text might result in inaccurate display (e.g. time), but does not expose a security risk
 </summary>
</member><member name="F:DotNetNuke.Services.Tokens.CacheLevel.fullyCacheable">
	<summary>
 Caching of the text can be done without limitations or any risk
 </summary>
</member><member name="T:DotNetNuke.Services.Tokens.CacheLevel">
	<summary>
 CacheLevel is used to specify the cachability of a string, determined as minimum of the used token cachability
 </summary>
	<remarks>
 CacheLevel is determined as minimum of the used tokens' cachability 
 </remarks>
</member><member name="P:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.CurrentAccessLevel">
	<summary>
 Gets/sets the current Access Level controlling access to critical user settings
 </summary>
	<value>A TokenAccessLevel as defined above</value>
</member><member name="P:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.AccessingUser">
	<summary>
 Gets/sets the user object representing the currently accessing user (permission)
 </summary>
	<value>UserInfo oject</value>
</member><member name="P:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.DebugMessages">
	<summary>
 If DebugMessages are enabled, unknown Tokens are replaced with Error Messages 
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.ContainsTokens(System.String)">
	<summary>
 Checks for present [Object:Property] tokens
 </summary>
	<param name="strSourceText">String with [Object:Property] tokens</param>
	<returns></returns>
	<history>
    08/10/2007 [sleupold] created
    10/19/2007 [sleupold] corrected to ignore unchanged text returned (issue DNN-6526)
 </history>
</member><member name="M:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.Cacheability(System.String)">
	<summary>
 returns cacheability of the passed text regarding all contained tokens
 </summary>
	<param name="strSourcetext">the text to parse for tokens to replace</param>
	<returns>cacheability level (not - safe - fully)</returns>
	<remarks>always check cacheability before caching a module!</remarks>
	<history>
    10/19/2007 [sleupold] corrected to handle non-empty strings
 </history>
</member><member name="T:DotNetNuke.Services.Tokens.BaseCustomTokenReplace">
	<summary>
 BaseCustomTokenReplace  allows to add multiple sources implementing <see cref="T:DotNetNuke.Services.Tokens.IPropertyAccess">IPropertyAccess</see>
	</summary>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Common.Utilities.Config.GetConnectionString">
 -----------------------------------------------------------------------------
 <summary>
 Gets the default connection String as specified in the provider.
 </summary>
	<returns>The connection String</returns>
	<remarks></remarks>
	<history>
		[cnurse]	11/15/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.Config.GetConnectionString(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the specified connection String
 </summary>
	<param name="name">Name of Connection String to return</param>
	<returns>The connection String</returns>
	<remarks></remarks>
	<history>
		[cnurse]	11/15/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.Config.GetUpgradeConnectionString">
 -----------------------------------------------------------------------------
 <summary>
 Gets the specified upgrade connection string
 </summary>
	<returns>The connection String</returns>
	<remarks></remarks>
	<history>
		[smehaffie]	07/13/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.Config.GetDataBaseOwner">
 -----------------------------------------------------------------------------
 <summary>
 Gets the specified database owner
 </summary>
	<returns>The database owner</returns>
	<remarks></remarks>
	<history>
		[cnurse]	02/13/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.Config.GetObjectQualifer">
 -----------------------------------------------------------------------------
 <summary>
 Gets the specified object qualifier
 </summary>
	<returns>The object qualifier</returns>
	<remarks></remarks>
	<history>
		[cnurse]	02/13/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.Config.GetProviderPath(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the specified provider path
 </summary>
	<returns>The provider path</returns>
	<remarks></remarks>
	<history>
		[cnurse]	02/13/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Utilities.Config">
 -----------------------------------------------------------------------------
 <summary>
 The Config class provides access to the web.config file
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabInfo.CheckIfDoctypeConfigExists">
	<summary>
 Look for skin level doctype configuration file, and inject the value into the top of default.aspx
 when no configuration if found, the doctype for versions prior to 4.4 is used to maintain backwards compatibility with existing skins.
 Adds xmlns and lang parameters when appropiate.
 </summary>
	<remarks></remarks>
	<history>
 	[cathal]	28/05/2006	Created
 </history>
</member><member name="M:DotNetNuke.Entities.Tabs.TabInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a TabInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Tabs.TabInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.AddTabInternal(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a tab to the Datastore
 </summary>
	<param name="objTab">The tab to be added</param>
	<history>
 	[cnurse]	04/30/2008	Created
 	[jlucarino]	02/26/2009	added CreatedByUserID
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.AddTabToEndOfList(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a tab to the end of a List
 </summary>
	<param name="objTab">The tab to be added</param>
	<param name="updateTabPath">A flag that indicates whether the TabPath is updated.</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.RemoveTab(DotNetNuke.Entities.Tabs.TabInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Removes a tab from its current siblings
 </summary>
	<param name="objTab">Tab to remove</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.SwapAdjacentTabs(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Tabs.TabInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Swaps two adjacent tabs in the same level
 </summary>
	<param name="firstTab">ID of the first tab</param>
	<param name="secondTab">ID of the second Tab</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateChildTabPath(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Updates child tabs TabPath field
 </summary>
	<param name="intTabid">ID of the parent tab</param>
	<remarks>
 When a ParentTab is updated this method should be called to 
 ensure that the TabPath of the Child Tabs is consistent with the Parent
 </remarks>
	<history>
 	[JWhite]	16/11/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTabOrder(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Updates the TabOrder for a single Tab
 </summary>
	<param name="objTab">The tab to be updated</param>
	<param name="updateTabPath">A flag that indicates whether the TabPath is updated.</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTabOrder(System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Int32,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Updates the TabOrder for a list of Tabs
 </summary>
	<param name="tabs">The List of tabs to be updated</param>
	<param name="startIndex">The index to start updating from</param>
	<param name="increment">The increment to update each tabs TabOrder</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTabOrder(System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Updates the TabOrder for a list of Tabs
 </summary>
	<param name="tabs">The List of tabs to be updated</param>
	<param name="increment">The increment to update each tabs TabOrder</param>
	<history>
 	[cnurse]	06/09/2009	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.AddTab(DotNetNuke.Entities.Tabs.TabInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a tab
 </summary>
	<param name="objTab">The tab to be added</param>
	<remarks>The tab is added to the end of the current Level.</remarks>
	<history>
 	[cnurse]	04/30/2008	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.AddTab(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a tab
 </summary>
	<param name="objTab">The tab to be added</param>
	<param name="includeAllTabsModules">Flag that indicates whether to add the "AllTabs"
 Modules</param>
	<remarks>The tab is added to the end of the current Level.</remarks>
	<history>
 	[cnurse]	04/30/2008	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.AddTabAfter(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a tab after the specified tab
 </summary>
	<param name="objTab">The tab to be added</param>
	<param name="afterTabId">Id of the tab after which this tab is added</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.AddTabBefore(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a tab before the specified tab
 </summary>
	<param name="objTab">The tab to be added</param>
	<param name="beforeTabId">Id of the tab before which this tab is added</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.CopyTab(System.Int32,System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Copies the modules from one tab to another
 </summary>
	<param name="PortalId">The Id iof the portal</param>
	<param name="FromTabId">The Id of the tab to copy modules from.</param>
	<param name="ToTabId">The Id of the tab to copy modules to.</param>
	<param name="asReference">A flag indicating whether the module should be copied as a reference</param>
	<history>
 	[cnurse]	04/30/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTab(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a tab premanently from the database
 </summary>
	<param name="TabId">TabId of the tab to be deleted</param>
	<param name="PortalId">PortalId of the portal</param>
	<remarks>
	</remarks>
	<history>
 	[Vicenç]	19/09/2004	Added skin deassignment before deleting the tab.
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTab(System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a tab premanently from the database
 </summary>
	<param name="TabId">TabId of the tab to be deleted</param>
	<param name="PortalId">PortalId of the portal</param>
	<remarks>
	</remarks>
	<history>
 	[Vicenç]	19/09/2004	Added skin deassignment before deleting the tab.
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabSettings(System.Int32)">
	<summary>
 read all settings for a tab from TabSettings table
 </summary>
	<param name="TabId">ID of the Tab to query</param>
	<returns>(cached) hashtable containing all settings</returns>
	<history>
    [jlucarino] 2009-08-31 Created
 </history>
</member><member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTabSetting(System.Int32,System.String,System.String)">
	<summary>
 Adds or updates a tab's setting value
 </summary>
	<param name="TabId">ID of the tab to update</param>
	<param name="SettingName">name of the setting property</param>
	<param name="SettingValue">value of the setting (String).</param>
	<remarks>empty SettingValue will remove the setting, if not preserveIfEmpty is true</remarks>
	<history>
    [jlucarino] 2009-10-01 Created
 </history>
</member><member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTabSetting(System.Int32,System.String)">
	<summary>
 Delete a Setting of a tab instance
 </summary>
	<param name="TabId">ID of the affected tab</param>
	<param name="SettingName">Name of the setting to be deleted</param>
	<history>
    [jlucarino] 2009-10-01 Created
 </history>
</member><member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTabSettings(System.Int32)">
	<summary>
 Delete all Settings of a tab instance
 </summary>
	<param name="TabId">ID of the affected tab</param>
	<history>
    [jlucarino] 2009-10-01 Created
 </history>
</member><member name="M:DotNetNuke.Entities.Tabs.TabController.DeserializeTabPermissions(System.Xml.XmlNodeList,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Deserializes tab permissions
 </summary>
	<param name="nodeTabPermissions">Node for tab permissions</param>
	<param name="objTab">Tab being processed</param>
	<param name="IsAdminTemplate">Flag to indicate if we are parsing admin template</param>
	<remarks>
	</remarks>
	<history>
 	[Vicenç]	15/10/2004	Created
     [cnurse]    10/02/2007  Moved from PortalController
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsByPortalCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetTabsByPortalCallBack gets a Dictionary of Tabs by 
 Portal from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.DeserializePanes(System.Xml.XmlNode,System.Int32,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 Processes all panes and modules in the template file
 </summary>
	<param name="nodePanes">Template file node for the panes is current tab</param>
	<param name="PortalId">PortalId of the new portal</param>
	<param name="TabId">Tab being processed</param>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	03/09/2004	Created
 	[VMasanas]	15/10/2004	Modified for new skin structure
		[cnurse]	15/10/2004	Modified to allow for merging template
								with existing pages
     [cnurse]    10/02/2007  Moved from PortalController
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Tabs.TabController.SerializeTab(System.Xml.XmlDocument,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
	<summary>
 SerializeTab
 </summary>
	<param name="xmlTab">The Xml Document to use for the Tab</param>
	<param name="objTab">The TabInfo object to serialize</param>
	<param name="includeContent">A flag used to determine if the Module content is included</param>
</member><member name="M:DotNetNuke.Entities.Tabs.TabController.SerializeTab(System.Xml.XmlDocument,System.Collections.Hashtable,DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Portals.PortalInfo,System.Boolean)">
	<summary>
 SerializeTab
 </summary>
	<param name="xmlTab">The Xml Document to use for the Tab</param>
	<param name="hTabs">A Hashtable used to store the names of the tabs</param>
	<param name="objTab">The TabInfo object to serialize</param>
	<param name="objPortal">The Portal object to which the tab belongs</param>
	<param name="includeContent">A flag used to determine if the Module content is included</param>
</member><member name="M:DotNetNuke.UI.Navigation.AddChildActions(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.Containers.IActionControl)">
 -----------------------------------------------------------------------------
 <summary>
 Recursive function to add module's actions to the DNNNodeCollection based off of passed in ModuleActions
 </summary>
	<param name="objParentAction">Parent action</param>
	<param name="objParentNode">Parent node</param>
	<param name="objActionControl">ActionControl to base actions off of</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.AddChildActions(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.Containers.IActionControl,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Recursive function to add module's actions to the DNNNodeCollection based off of passed in ModuleActions
 </summary>
	<param name="objParentAction">Parent action</param>
	<param name="objParentNode">Parent node</param>
	<param name="objActionControl">ActionControl to base actions off of</param>
	<param name="intDepth">How many levels deep should be populated</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	5/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.AddNode(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.UI.WebControls.DNNNodeCollection,System.Collections.Hashtable,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.UI.Navigation.ToolTipSource)">
 -----------------------------------------------------------------------------
 <summary>
 Assigns common properties from passed in tab to newly created DNNNode that is added to the passed in DNNNodeCollection
 </summary>
	<param name="objTab">Tab to base DNNNode off of</param>
	<param name="objNodes">Node collection to append new node to</param>
	<param name="objBreadCrumbs">Hashtable of breadcrumb IDs to efficiently determine node's BreadCrumb property</param>
	<param name="objPortalSettings">Portal settings object to determine if node is selected</param>
	<remarks>
 Logic moved to separate sub to make GetNavigationNodes cleaner
 </remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetActionNode(System.String,System.String,DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 Allows for DNNNode object to be easily obtained based off of passed in ID
 </summary>
	<param name="strID">NodeID to retrieve</param>
	<param name="strNamespace">Namespace for node collection (usually control's ClientID)</param>
	<param name="objActionRoot">Root Action object used in searching</param>
	<param name="objControl">ActionControl to base actions off of</param>
	<returns>DNNNode</returns>
	<remarks>
 Primary purpose of this is to obtain the DNNNode needed for the events exposed by the NavigationProvider
 </remarks>
	<history>
 	[Jon Henning]	5/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetActionNodes(DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 This function provides a central location to obtain a generic node collection of the actions associated 
 to a module based off of the current user's context
 </summary>
	<param name="objActionRoot">Root module action</param>
	<param name="objControl">ActionControl to base actions off of</param>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetActionNodes(DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.Control,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 This function provides a central location to obtain a generic node collection of the actions associated 
 to a module based off of the current user's context
 </summary>
	<param name="objActionRoot">Root module action</param>
	<param name="objControl">ActionControl to base actions off of</param>
	<param name="intDepth">How many levels deep should be populated</param>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	5/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetActionNodes(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.UI.WebControls.DNNNode,System.Web.UI.Control,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 This function provides a central location to obtain a generic node collection of the actions associated 
 to a module based off of the current user's context
 </summary>
	<param name="objActionRoot">Root module action</param>
	<param name="objRootNode">Root node on which to populate children</param>
	<param name="objControl">ActionControl to base actions off of</param>
	<param name="intDepth">How many levels deep should be populated</param>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	5/15/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetNavigationNode(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Allows for DNNNode object to be easily obtained based off of passed in ID
 </summary>
	<param name="strID">NodeID to retrieve</param>
	<param name="strNamespace">Namespace for node collection (usually control's ClientID)</param>
	<returns>DNNNode</returns>
	<remarks>
 Primary purpose of this is to obtain the DNNNode needed for the events exposed by the NavigationProvider
 </remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetNavigationNodes(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This function provides a central location to obtain a generic node collection of the pages/tabs included in
 the current context's (user) navigation hierarchy
 </summary>
	<param name="strNamespace">Namespace (typically control's ClientID) of node collection to create</param>
	<returns>Collection of DNNNodes</returns>
	<remarks>
 Returns all navigation nodes for a given user 
 </remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetNavigationNodes(System.String,DotNetNuke.UI.Navigation.ToolTipSource,System.Int32,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 This function provides a central location to obtain a generic node collection of the pages/tabs included in
 the current context's (user) navigation hierarchy
 </summary>
	<param name="strNamespace">Namespace (typically control's ClientID) of node collection to create</param>
	<param name="eToolTips">Enumerator to determine what text to display in the tooltips</param>
	<param name="intStartTabId">If using Populate On Demand, then this is the tab id of the root element to retrieve (-1 for no POD)</param>
	<param name="intDepth">If Populate On Demand is enabled, then this parameter determines the number of nodes to retrieve beneath the starting tab passed in (intStartTabId) (-1 for no POD)</param>
	<param name="intNavNodeOptions">Bitwise integer containing values to determine what nodes to display (self, siblings, parent)</param>
	<returns>Collection of DNNNodes</returns>
	<remarks>
 Returns a subset of navigation nodes based off of passed in starting node id and depth
 </remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Navigation.GetNavigationNodes(DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.Navigation.ToolTipSource,System.Int32,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 This function provides a central location to obtain a generic node collection of the pages/tabs included in
 the current context's (user) navigation hierarchy
 </summary>
	<param name="objRootNode">Node in which to add children to</param>
	<param name="eToolTips">Enumerator to determine what text to display in the tooltips</param>
	<param name="intStartTabId">If using Populate On Demand, then this is the tab id of the root element to retrieve (-1 for no POD)</param>
	<param name="intDepth">If Populate On Demand is enabled, then this parameter determines the number of nodes to retrieve beneath the starting tab passed in (intStartTabId) (-1 for no POD)</param>
	<param name="intNavNodeOptions">Bitwise integer containing values to determine what nodes to display (self, siblings, parent)</param>
	<returns>Collection of DNNNodes</returns>
	<remarks>
 Returns a subset of navigation nodes based off of passed in starting node id and depth
 </remarks>
	<history>
 	[Jon Henning]	8/9/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.NavDataSourceView.Select">
	<summary>
 Starting with the rootNode, recursively build a list of
 PageInfo nodes, create PageHierarchyData
 objects, add them all to the PageHierarchicalEnumerable,
 and return the list.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.HasChildren">
	<summary>
 Indicates whether the hierarchical data node that the IHierarchyData object represents has any child nodes.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Path">
	<summary>
 Gets the hierarchical path of the node.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Item">
	<summary>
 Gets the hierarchical data node that the IHierarchyData object represents.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Type">
	<summary>
 Gets the name of the type of Object contained in the Item property.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetChildren">
	<summary>
 Gets an enumeration object that represents all the child nodes of the current hierarchical node. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetParent">
	<summary>
 Gets an enumeration object that represents the parent node of the current hierarchical node. 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Name">
	<summary>
 Returns node name
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Value">
	<summary>
 Returns value path of node
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.ImageUrl">
	<summary>
 Returns nodes image
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.NavigateUrl">
	<summary>
 Returns node navigation url
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Description">
	<summary>
 Returns Node description
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetSafeValue(System.String,System.String)">
	<summary>
 Helper function to handle cases where property is null (Nothing)
 </summary>
	<param name="Value">Value to evaluate for null</param>
	<param name="Def">If null, return this default</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetValuePath(DotNetNuke.UI.WebControls.DNNNode)">
	<summary>
 Computes valuepath necessary for ASP.NET controls to guarantee uniqueness
 </summary>
	<param name="objNode"></param>
	<returns>ValuePath</returns>
	<remarks>Not sure if it is ok to hardcode the "\" separator, but also not sure where I would get it from</remarks>
</member><member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchicalEnumerable.GetHierarchyData(System.Object)">
	<summary>
 Handles enumeration
 </summary>
	<param name="enumeratedItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.UI.WebControls.LanguagesListTypeAttribute.#ctor(DotNetNuke.Services.Localization.LanguagesListType)">
	<summary>
 Initializes a new instance of the LanguagesListTypeAttribute class.
 </summary>
	<param name="type">The type of List</param>
</member><member name="M:DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs.#ctor(DotNetNuke.UI.WebControls.EditorInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new PropertyEditorItemEventArgs
 </summary>
	<param name="editor">The editor created</param>
	<history>
     [cnurse]	02/20/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs.Editor">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the proeprty has changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      PropertyEditorItemEventArgs
 -----------------------------------------------------------------------------
 <summary>
 The PropertyEditorItemEventArgs class is a cusom EventArgs class for
 handling Event Args 
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextEditControl.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a TextEditControl
 </summary>
	<history>
     [cnurse]	02/24/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextEditControl.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a TextEditControl
 </summary>
	<param name="type">The type of the property</param>
	<history>
     [cnurse]	02/22/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextEditControl.OldStringValue">
 -----------------------------------------------------------------------------
 <summary>
 OldStringValue returns the Boolean representation of the OldValue
 </summary>
	<value>A String representing the OldValue</value>
	<history>
     [cnurse]	06/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.TextEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.TextEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.TextEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      TextEditControl
 -----------------------------------------------------------------------------
 <summary>
 The TextEditControl control provides a standard UI component for editing 
 string/text properties.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/21/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.VersionEditControl.StringValue">
 -----------------------------------------------------------------------------
 <summary>
 StringValue is the value of the control expressed as a String
 </summary>
	<value>A string representing the Value</value>
	<history>
     [cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VersionEditControl.OnDataChanged(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
 Event
 </summary>
	<history>
     [cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VersionEditControl.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs just before the control is rendered.  It forces a postback to the
 Control.
 </summary>
	<history>
     [cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VersionEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.VersionEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderViewMode renders the View (readonly) mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.VersionEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      VersionEditControl
 -----------------------------------------------------------------------------
 <summary>
 The VersionEditControl control provides a standard UI component for editing 
 System.Version properties.
 </summary>
	<history>
     [cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.PagingControlMode">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.UI.WebControls
 Project:    DotNetNuke
 Enum:       PagingControlMode
 -----------------------------------------------------------------------------
 <summary>
 The PagingControlMode Enum provides an enumeration of the modes of the Paging
 Control
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	03/12/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DualListBoxEventArgs.#ctor(System.Collections.Generic.List{System.String})">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new DualListBoxEventArgs
 </summary>
	<param name="items">The items</param>
	<history>
     [cnurse]	02/18/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DualListBoxEventArgs.Items">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Items
 </summary>
	<value>A List(Of String)</value>
	<history>
     [cnurse]	02/18/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DualListBoxEventArgs">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DualListBoxEventArgs
 -----------------------------------------------------------------------------
 <summary>
 The DualListBoxEventArgs class is a cusom EventArgs class for
 handling Event Args in the DualListBox.
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	02/18/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DualListBox.AvailableListBoxStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Available List Box Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	02/15/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DualListBox.ButtonStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Button Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	02/15/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DualListBox.ContainerStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Container Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	02/15/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DualListBox.HeaderStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Header Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	02/15/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DualListBox.SelectedListBoxStyle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of the Selected List Box Style
 </summary>
	<value>A Style object</value>
	<history>
     [cnurse]	02/15/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.AutoPostBack">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the column fires a postback when the control changes
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.SelectedStateKey">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the selected state of the DNNMultiStateBox (unless DataBound) 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.DataField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that the column should bind to
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.DesignMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Design Mode of the Column
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/24/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.Enabled">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the control is enabled (this is overridden if
 the EnabledField is set
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.EnabledField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that determines whether the control is Enabled
 changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.ItemType">
 -----------------------------------------------------------------------------
 <summary>
 The type of Template to Create
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.Text">
 -----------------------------------------------------------------------------
 <summary>
 The Text to display in a Header Template
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.ImagePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the image path of the DNNMultiStateBox 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.States">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the state collection of the DNNMultiStateBox 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.InstantiateIn(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 InstantiateIn is called when the Template is instantiated by the parent control
 </summary>
	<param name="container">The container control</param>
	<history>
     [cnurse]	02/16/2006	created
 </history>
</member><member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Called when the template item is Data Bound
 </summary>
	<history>
     [cnurse]	02/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNMultiStateBoxColumnTemplate
 -----------------------------------------------------------------------------
 <summary>
 The DNNMultiStateBoxColumnTemplate provides a Template for the DNNMultiStateBoxColumn
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the DNNMultiStateBoxColumn
 </summary>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.#ctor(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the MultiStateBoxColumn, with an optional AutoPostBack (where each change
 of state of the control causes a Post Back)
 </summary>
	<param name="autoPostBack">Optional set the control to postback</param>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.AutoPostBack">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the column fires a postback when the control changes
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.SelectedStateKey">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the selected state of the DNNMultiStateBox (unless DataBound) 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.DataField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that the column should bind to
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.Enabled">
 -----------------------------------------------------------------------------
 <summary>
 An flag that indicates whether the control is enabled (this is overridden if
 the EnabledField is set)
 changed
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.EnabledField">
 -----------------------------------------------------------------------------
 <summary>
 The Data Field that determines whether the control is Enabled
 changed
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/16/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.ImagePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the image path of the DNNMultiStateBox 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.States">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the state collection of the DNNMultiStateBox 
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/21/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a DNNMultiStateBoxColumnTemplate
 </summary>
	<returns>A DNNMultiStateBoxColumnTemplate</returns>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.Initialize">
 -----------------------------------------------------------------------------
 <summary>
 Initialises the Column
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.UI.WebControls
 Class:      DNNMultiStateBoxColumn
 -----------------------------------------------------------------------------
 <summary>
 The DNNMultiStateBoxColumn control provides a DNNMultiState Box column for a Data Grid
 </summary>
	<history>
     [cnurse]	02/16/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinObjectBase.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the portal Settings for this Skin Control
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinObjectBase.AdminMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether we are in Admin Mode
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinObjectBase.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the associated ModuleControl for this SkinControl
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinObjectBase">
 -----------------------------------------------------------------------------
 <summary>
 The SkinObject class defines a custom base class inherited by all
 skin and container objects within the Portal.
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.#ctor(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
     SkinFileProcessor class constructor.
 </summary>
	<remarks>
     This constructor parses a memory based skin
 </remarks>
	<history>
 	[cnurse]	3/21/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.#ctor(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
     SkinFileProcessor class constructor.
 </summary>
	<param name="SkinPath">File path to the portals upload directory.</param>
	<param name="SkinRoot">Specifies type of skin (Skins or Containers)</param>
	<param name="SkinName">Name of folder in which skin will reside (Zip file name)</param>
	<remarks>
     The constructor primes the file processor with path information and
     control data that should only be retrieved once.  It checks for the
     existentce of a skin level attribute file and read it in, if found.
     It also sorts through the complete list of controls and creates
     a hashtable which contains only the skin objects and their source paths.
     These are recognized by their ControlKey's which are formatted like
     tokens ("[TOKEN]").  The hashtable is required for speed as it will be
     processed for each token found in the source file by the Control Parser.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ProcessList(System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
     Perform processing on list of files to generate skin.
 </summary>
	<param name="FileList">ArrayList of files to be processed.</param>
	<returns>HTML formatted string of informational messages.</returns>
	<remarks>
	</remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile.#ctor(System.String,System.String,System.Xml.XmlDocument)">
 -----------------------------------------------------------------------------
 <summary>
     SkinFile class constructor.
 </summary>
	<param name="SkinRoot"></param>
	<param name="FileName"></param>
	<param name="SkinAttributes"></param>
	<remarks>
     The constructor primes the utility class with basic file information.
     It also checks for the existentce of a skinfile level attribute file
     and read it in, if found.  
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile.PrependASCXDirectives(System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
     Prepend ascx control directives to file contents.
 </summary>
	<param name="Registrations">ArrayList of registration directives.</param>
	<remarks>
     This procedure formats the @Control directive and prepends it and all
     registration directives to the file contents.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile">
 -----------------------------------------------------------------------------
 <summary>
     Utility class for processing of skin files.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.HTMLList">
 -----------------------------------------------------------------------------
 <summary>
     List of regular expressions for processing HTML syntax.
 </summary>
	<returns>ArrayList of Regex objects formatted for the Parser method.</returns>
	<remarks>
     Additional patterns can be added to this list (if necessary) if properly
     formatted to return <tag/>, <content/> and <endtag/> groups.  For future
     consideration, this list could be imported from a configuration file to
     provide for greater flexibility.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.CSSList">
 -----------------------------------------------------------------------------
 <summary>
     List of regular expressions for processing CSS syntax.
 </summary>
	<returns>ArrayList of Regex objects formatted for the Parser method.</returns>
	<remarks>
     Additional patterns can be added to this list (if necessary) if properly
     formatted to return <tag/>, <content/> and <endtag/> groups.  For future
     consideration, this list could be imported from a configuration file to
     provide for greater flexibility.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.Parse(System.String@,System.Collections.ArrayList@,System.String,DotNetNuke.UI.Skins.SkinParser)">
 -----------------------------------------------------------------------------
 <summary>
     Perform parsing on the specified source file.
 </summary>
	<param name="Source">Pointer to Source string to be parsed.</param>
	<param name="RegexList">ArrayList of properly formatted regular expression objects.</param>
	<param name="SkinPath">Path to use in replacement operation.</param>
	<remarks>
     This procedure iterates through the list of regular expression objects
     and invokes a handler for each match which uses the specified path.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.MatchHandler(System.Text.RegularExpressions.Match)">
 -----------------------------------------------------------------------------
 <summary>
     Process regular expression matches.
 </summary>
	<param name="m">Regular expression match for path information which requires processing.</param>
	<returns>Properly formatted path information.</returns>
	<remarks>
     The handler is invoked by the Regex.Replace method once for each match that
     it encounters.  The returned value of the handler is substituted for the
     original match.  So the handler properly formats the path information and
     returns it in favor of the improperly formatted match.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinFileProcessor.PathParser
 
 -----------------------------------------------------------------------------
 <summary>
     Parsing functionality for path replacement in new skin files.
 </summary>
	<remarks>
     This class encapsulates the data and methods necessary to appropriately
     handle all the path replacement parsing needs for new skin files. Parsing
     supported for CSS syntax and HTML syntax (which covers ASCX files also). 
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.Registrations">
 -----------------------------------------------------------------------------
 <summary>
     Registration directives generated as a result of the Parse method.
 </summary>
	<returns>ArrayList of formatted registration directives.</returns>
	<remarks>
     In addition to the updated file contents, the Parse method also
     creates this list of formatted registration directives which can
     be processed later.  They are not performed in place during the
     Parse method in order to preserve the formatting of the input file
     in case additional parsing might not anticipate the formatting of
     those directives.  Since they are properly formatted, it is better
     to exclude them from being subject to parsing.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.#ctor(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
     ControlParser class constructor.
 </summary>
	<remarks>
     The constructor processes accepts a hashtable of skin objects to process against.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.Parse(System.String@,System.Xml.XmlDocument)">
 -----------------------------------------------------------------------------
 <summary>
     Perform parsing on the specified source file using the specified attributes.
 </summary>
	<param name="Source">Pointer to Source string to be parsed.</param>
	<param name="Attributes">XML document containing token attribute information (can be empty).</param>
	<remarks>
     This procedure invokes a handler for each match of a formatted token.
     The attributes are first set because they will be referenced by the
     match handler.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.TokenMatchHandler(System.Text.RegularExpressions.Match)">
 -----------------------------------------------------------------------------
 <summary>
     Process regular expression matches.
 </summary>
	<param name="m">Regular expression match for token which requires processing.</param>
	<returns>Properly formatted token.</returns>
	<remarks>
     The handler is invoked by the Regex.Replace method once for each match that
     it encounters.  The returned value of the handler is substituted for the
     original match.  So the handler properly formats the replacement for the
     token and returns it instead.  If an unknown token is encountered, the token
     is unmodified.  This can happen if a token is used for a skin object which
     has not yet been installed.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinFileProcessor.ControlParser
 
 -----------------------------------------------------------------------------
 <summary>
     Parsing functionality for token replacement in new skin files.
 </summary>
	<remarks>
     This class encapsulates the data and methods necessary to appropriately
     handle all the token parsing needs for new skin files (which is appropriate
     only for HTML files).  The parser accomodates some ill formatting of tokens
     (ignoring whitespace and casing) and allows for naming of token instances
     if more than one instance of a particular control is desired on a skin.  The
     proper syntax for an instance is: "[TOKEN:INSTANCE]" where the instance can
     be any alphanumeric string.  Generated control ID's all take the
     form of "TOKENINSTANCE".
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.Registrations">
 -----------------------------------------------------------------------------
 <summary>
     Registration directives generated as a result of the Parse method.
 </summary>
	<returns>ArrayList of formatted registration directives.</returns>
	<remarks>
     In addition to the updated file contents, the Parse method also
     creates this list of formatted registration directives which can
     be processed later.  They are not performed in place during the
     Parse method in order to preserve the formatting of the input file
     in case additional parsing might not anticipate the formatting of
     those directives.  Since they are properly formatted, it is better
     to exclude them from being subject to parsing.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.#ctor(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
     ControlParser class constructor.
 </summary>
	<remarks>
     The constructor processes accepts a hashtable of skin objects to process against.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.Parse(System.String@)">
 -----------------------------------------------------------------------------
 <summary>
     Perform parsing on the specified source file.
 </summary>
	<param name="Source">Pointer to Source string to be parsed.</param>
	<remarks>
     This procedure invokes a handler for each match of a formatted object.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.ObjectMatchHandler(System.Text.RegularExpressions.Match)">
 -----------------------------------------------------------------------------
 <summary>
     Process regular expression matches.
 </summary>
	<param name="m">Regular expression match for object which requires processing.</param>
	<returns>Properly formatted token.</returns>
	<remarks>
     The handler is invoked by the Regex.Replace method once for each match that
     it encounters.  The returned value of the handler is substituted for the
     original match.  So the handler properly formats the replacement for the
     object and returns it instead.  If an unknown object is encountered, the object
     is unmodified.  This can happen if an object is a client-side object or 
     has not yet been installed.
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinFileProcessor.ObjectParser
 
 -----------------------------------------------------------------------------
 <summary>
     Parsing functionality for token replacement in new skin files.
 </summary>
	<remarks>
     This class encapsulates the data and methods necessary to appropriately
     handle all the object parsing needs for new skin files (which is appropriate
     only for HTML files).  The parser accomodates some ill formatting of objects
     (ignoring whitespace and casing) and allows for naming of object instances
     if more than one instance of a particular control is desired on a skin.  The
     proper syntax for an instance is: "[OBJECT:INSTANCE]" where the instance can
     be any alphanumeric string.  Generated control ID's all take the
     form of "OBJECTINSTANCE".
 </remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinFileProcessor">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinFileProcessor
 
 -----------------------------------------------------------------------------
 <summary>
     Handles processing of a list of uploaded skin files into a working skin.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.SkinController.IsGlobalSkin(System.String)">
	<summary>
 Determines if a given skin is defined as a global skin
 </summary>
	<param name="SkinSrc">This is the app relative path and filename of the skin to be checked.</param>
	<returns>True if the skin is located in the HostPath child directories.</returns>
	<remarks>This function performs a quick check to detect the type of skin that is
 passed as a parameter.  Using this method abstracts knowledge of the actual location
 of skins in the file system.
 </remarks>
	<history>
     [Joe Brinkman]	10/20/2007	Created
 </history>
</member><member name="T:DotNetNuke.UI.Skins.SkinController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinController
 
 -----------------------------------------------------------------------------
 <summary>
     Handles the Business Control Layer for Skins
 </summary>
	<remarks>
	</remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Skin.ControlPanel">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ControlPanel container.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Skin.Communicator">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModuleCommunicate instance for the skin
 </summary>
	<returns>The ModuleCommunicate instance for the Skin</returns>
	<history>
 	[cnurse]	01/12/2009  created
 </history>
</member><member name="P:DotNetNuke.UI.Skins.Skin.Panes">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Panes.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Skin.ActionEventListeners">
 -----------------------------------------------------------------------------
 <summary>
 Gets an ArrayList of ActionEventListeners
 </summary>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Skin.SkinPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path for this skin
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/05/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Skin.SkinSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Source for this skin
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/05/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.CheckExpired">
 -----------------------------------------------------------------------------
 <summary>
 CheckExpired checks whether the portal has expired
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.InjectControlPanel">
 -----------------------------------------------------------------------------
 <summary>
 InjectControlPanel injects the ControlPanel into the ControlPanel pane
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.LoadPanes">
 -----------------------------------------------------------------------------
 <summary>
 LoadPanes parses the Skin and loads the "Panes"
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.ProcessMasterModules">
 -----------------------------------------------------------------------------
 <summary>
 ProcessMasterModules processes all the master modules in the Active Tab's
 Modules Collection.
 </summary>
	<returns>A flag that indicates whether the modules were successfully processed.</returns>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.ProcessPanes">
 -----------------------------------------------------------------------------
 <summary>
 ProcessPanes processes the Attributes for the Panes
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.ProcessSlaveModule">
 -----------------------------------------------------------------------------
 <summary>
 ProcessSlaveModule processes the slave module specifeid by the "ctl=xxx" ControlKey.
 </summary>
	<returns>A flag that indicates whether the modules were successfully processed.</returns>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored from Skin
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.OnInit(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnInit runs when the Skin is initialised.
 </summary>
	<history>
 	[cnurse]	07/04/2005	Documented
     [cnurse]    12/05/2007  Refactored
     [cnurse]    04/17/2009  Refactored to use SkinAdapter
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.OnLoad(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs when the Skin is loaded.
 </summary>
	<history>
     [cnurse]    04/17/2009  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs just before the Skin is rendered.
 </summary>
	<history>
     [cnurse]    04/17/2009  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.OnUnLoad(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnUnLoad runs when the Skin is unloaded.
 </summary>
	<history>
     [cnurse]    04/17/2009  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.InjectModule(DotNetNuke.UI.Skins.Pane,DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 InjectModule injects the module into the Pane
 </summary>
	<param name="objModule">The module to inject</param>
	<param name="objPane">The pane</param>
	<history>
 	[cnurse]	12/04/2007  created
     [cnurse]    04/17/2009  Refactored to use SkinAdapter
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.RegisterModuleActionEvent(System.Int32,DotNetNuke.Entities.Modules.Actions.ActionEventHandler)">
 -----------------------------------------------------------------------------
 <summary>
 RegisterModuleActionEvent registers a Module Action Event
 </summary>
	<param name="ModuleID">The ID of the module</param>
	<param name="e">An Action Event Handler</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.LoadSkin(DotNetNuke.Framework.PageBase,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 LoadSkin loads the Skin
 </summary>
	<param name="Page">The Page that will contain the Skin</param>
	<param name="SkinPath">The path to the Skin file</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddModuleMessage(System.Web.UI.Control,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleMessage adds a Moduel Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="IconSrc">The Icon to diplay</param>
	<param name="Message">The Message Text</param>
	<param name="objControl">The current control</param>
	<param name="objModuleMessageType">The type of the message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(System.Web.UI.Control,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddPageMessage adds a Page Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="IconSrc">The Icon to diplay</param>
	<param name="Message">The Message Text</param>
	<param name="objControl">The current control</param>
	<param name="objModuleMessageType">The type of the message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddModuleMessage(System.Web.UI.Control,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleMessage adds a Moduel Message control to the Skin
 </summary>
	<param name="Message">The Message Text</param>
	<param name="objControl">The current control</param>
	<param name="objModuleMessageType">The type of the message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddModuleMessage(System.Web.UI.Control,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleMessage adds a Moduel Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="Message">The Message Text</param>
	<param name="objControl">The current control</param>
	<param name="objModuleMessageType">The type of the message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(System.Web.UI.Page,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddPageMessage adds a Page Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="IconSrc">The Icon to diplay</param>
	<param name="Message">The Message Text</param>
	<param name="objPage">The Page</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(DotNetNuke.UI.Skins.Skin,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddPageMessage adds a Page Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="IconSrc">The Icon to diplay</param>
	<param name="Message">The Message Text</param>
	<param name="objSkin">The skin</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(DotNetNuke.UI.Skins.Skin,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
 -----------------------------------------------------------------------------
 <summary>
 AddPageMessage adds a Page Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="Message">The Message Text</param>
	<param name="objSkin">The skin</param>
	<param name="objModuleMessageType">The type of the message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(System.Web.UI.Page,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
 -----------------------------------------------------------------------------
 <summary>
 AddPageMessage adds a Page Message control to the Skin
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="Message">The Message Text</param>
	<param name="objPage">The Page</param>
	<param name="objModuleMessageType">The type of the message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.GetModuleMessageControl(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleMessageControl gets an existing Message Control and sets its properties
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="Message">The Message Text</param>
	<param name="IconImage">The Message Icon</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.GetModuleMessageControl(System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleMessageControl gets an existing Message Control and sets its properties
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="Message">The Message Text</param>
	<param name="objModuleMessageType">The type of message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.GetModuleMessageControl(System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleMessageControl gets an existing Message Control and sets its properties
 </summary>
	<param name="Heading">The Message Heading</param>
	<param name="Message">The Message Text</param>
	<param name="IconImage">The Message Icon</param>
	<param name="objModuleMessageType">The type of message</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.GetParentSkin(DotNetNuke.Entities.Modules.PortalModuleBase)">
 -----------------------------------------------------------------------------
 <summary>
 GetParentSkin gets the Parent Skin for a control
 </summary>
	<param name="objModule">The control whose Parent Skin is requested</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.GetParentSkin(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 GetParentSkin gets the Parent Skin for a control
 </summary>
	<param name="objControl">The control whose Parent Skin is requested</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Skin.GetSkin(DotNetNuke.Framework.PageBase)">
 -----------------------------------------------------------------------------
 <summary>
 GetSkin gets the Skin
 </summary>
	<param name="Page">The Page</param>
	<history>
 	[cnurse]	12/04/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.Skin">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Skins
 Class	 : Skin
 -----------------------------------------------------------------------------
 <summary>
 Skin is the base for the Skins 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/04/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.Controls.ModuleMessage">
 -----------------------------------------------------------------------------
 <summary></summary>
	<remarks></remarks>
	<history>
 	[cniknet]	10/15/2004	Replaced public members with properties and removed
                             brackets from property names
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ContentPane">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Content Pane Control (Id="ContentPane")
 </summary>
	<returns>An HtmlContainerControl</returns>
	<history>
 	[cnurse]	12/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Portal Settings for the current Portal
 </summary>
	<returns>A PortalSettings object</returns>
	<history>
 	[cnurse]	12/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModuleControl object that this container is displaying
 </summary>
	<returns>A ModuleHost object</returns>
	<history>
 	[cnurse]	01/12/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ModuleConfiguration">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleInfo object that this container is displaying
 </summary>
	<returns>A ModuleInfo object</returns>
	<history>
 	[cnurse]	12/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ModuleHost">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModuleHost object that this container is displaying
 </summary>
	<returns>A ModuleHost object</returns>
	<history>
 	[cnurse]	01/12/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ParentSkin">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Parent Container for this container
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/05/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ContainerPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path for this container
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/05/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.Container.ContainerSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Source for this container
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	06/10/2009  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ProcessChildControls(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 ProcessChildControls parses all the controls in the container, and if the
 control is an action (IActionControl) it attaches the ModuleControl (IModuleControl)
 and an EventHandler to respond to the Actions Action event.  If the control is a
 Container Object (IContainerControl) it attaches the ModuleControl.
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ProcessContentPane">
 -----------------------------------------------------------------------------
 <summary>
 ProcessContentPane processes the ContentPane, setting its style and other 
 attributes.
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ProcessFooter">
 -----------------------------------------------------------------------------
 <summary>
 ProcessFooter adds an optional footer (and an End_Module comment)..
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ProcessHeader">
 -----------------------------------------------------------------------------
 <summary>
 ProcessHeader adds an optional header (and a Start_Module_ comment)..
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ProcessModule">
 -----------------------------------------------------------------------------
 <summary>
 ProcessModule processes the module which is attached to this container
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ProcessStylesheets(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 ProcessStylesheets processes the Module and Container stylesheets and adds
 them to the Page.
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.OnInit(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnInit runs when the Container is initialised.
 </summary>
	<history>
 	[cnurse]	07/04/2005	Documented
     [cnurse]    12/05/2007  Refactored
     [cnurse]    04/17/2009  Refactored to use ContainerAdapter
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.OnLoad(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs when the Container is loaded.
 </summary>
	<history>
     [cnurse]    04/17/2009  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs just before the Container is rendered.
 </summary>
	<history>
     [cnurse]    04/17/2009  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.OnUnLoad(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnUnLoad runs when the Container is unloaded.
 </summary>
	<history>
     [cnurse]    04/17/2009  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.Container.ModuleAction_Click(System.Object,DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 ModuleAction_Click runs when a ModuleAction is clicked.
 </summary>
	<remarks>The Module Action must be configured to fire an event (it may be configured 
 to redirect to a new url).  The event handler finds the Parent Container and invokes each
 registered ModuleActionEventListener delegate.
 
 Note: with the refactoring of this to the Container, this could be handled at the container level.
 However, for legacy purposes this is left this way, as many moodules would have registered their
 listeners on the Container directly, rather than through the helper method in PortalModuleBase.</remarks>
	<history>
 	[cnurse]	07/04/2005	Documented
     [cnurse]    12/05/2007  Moved from Container.vb
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.Container">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : Container
 -----------------------------------------------------------------------------
 <summary>
 Container is the base for the Containers 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/04/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of an attribute
 </summary>
	<param name="nav">Parent XPathNavigator</param>
	<param name="AttributeName">Thename of the Attribute</param>
	<returns></returns>
	<history>
 	[cnurse]	05/14/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValue(System.Xml.XPath.XPathNavigator,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of a node
 </summary>
	<param name="nav">Parent XPathNavigator</param>
	<param name="path">The Xpath expression to the value</param>
	<returns></returns>
	<history>
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValue(System.Xml.XmlNode,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<param name="DefaultValue">Default value to return</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Created
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueBoolean(System.Xml.XmlNode,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value (False) will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueBoolean(System.Xml.XmlNode,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<param name="DefaultValue">Default value to return</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueDate(System.Xml.XmlNode,System.String,System.DateTime)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<param name="DefaultValue">Default value to return</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueInt(System.Xml.XmlNode,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value (0) will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueInt(System.Xml.XmlNode,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<param name="DefaultValue">Default value to return</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueSingle(System.Xml.XmlNode,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value (0) will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueSingle(System.Xml.XmlNode,System.String,System.Single)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the value of node
 </summary>
	<param name="objNode">Parent node</param>
	<param name="NodeName">Child node to look for</param>
	<param name="DefaultValue">Default value to return</param>
	<returns></returns>
	<remarks>
 If the node does not exist or it causes any error the default value will be returned.
 </remarks>
	<history>
 	[VMasanas]	09/09/2004	Added new method to return converted values
 	[cnurse]	11/08/2004	moved from PortalController and made Public Shared
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetXmlWriterSettings(System.Xml.ConformanceLevel)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlWriterSettings object
 </summary>
	<param name="conformance">Conformance Level</param>
	<returns>An XmlWriterSettings</returns>
	<history>
 	[cnurse]	08/22/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.XMLEncode(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Xml Encodes HTML
 </summary>
	<param name="HTML">The HTML to encode</param>
	<returns></returns>
	<history>
		[cnurse]	09/29/2005	moved from Globals
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.XmlUtils.SerializeHashtable(System.Collections.Hashtable,System.Xml.XmlDocument,System.Xml.XmlNode,System.String,System.String,System.String)">
	<summary>
 Iterates items in a hashtable and generates XML nodes
 </summary>
	<param name="Hashtable">The Hashtable to iterate</param>
	<param name="XmlDocument">The XML document being generated</param>
	<param name="RootNode">The node to append the new nodes to</param>
	<param name="ElementName">The name of the new element created</param>
	<param name="KeyField">String representing hashtable Key</param>
	<param name="ValueField">String representing hashtable Value</param>
	<remarks></remarks>
	<history>
		[jlucarino]	09/18/2009	created
 </history>
</member><member name="T:DotNetNuke.Common.Utilities.XmlUtils">
 -----------------------------------------------------------------------------
 <summary>
 The XmlUtils class provides Shared/Static methods for manipulating xml files
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/08/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.UrlUtils.GetQSParamsForNavigateURL">
	<summary>
 getQSParamsForNavigateURL builds up a new querystring. This is necessary
 in order to prep for navigateUrl.
 we don't ever want a tabid, a ctl and a language parameter in the qs
 either, the portalid param is not allowed when the tab is a supertab 
 (because NavigateUrl adds the portalId param to the qs)
 </summary>
	<history>
     [erikvb]   20070814    added
 </history>
</member><member name="T:DotNetNuke.Services.Mail.SendBulkEmail">
 -----------------------------------------------------------------------------
 <summary>
 The SendBulkEMail Class is a helper class tht manages the sending of Email
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/13/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 	[sleupold]	8/15/2007	add localization of confirmation email 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Mail.Mail.SendMail(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Services.Mail.MessageType,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
		<summary>Send an email notification</summary>
	</summary>
	<param name="user">The user to whom the message is being sent</param>
	<param name="msgType">The type of message being sent</param>
	<param name="settings">Portal Settings</param>
	<returns></returns>
	<remarks></remarks>
	<history>
     [cnurse]        09/29/2005  Moved to Mail class
     [sLeupold]      02/07/2008 language used for admin mails corrected
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Mail.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
		<summary>Send a simple email.</summary>
	</summary>
	<param name="MailFrom"></param>
	<param name="MailTo"></param>
	<param name="Bcc"></param>
	<param name="Subject"></param>
	<param name="Body"></param>
	<param name="Attachment"></param>
	<param name="BodyType"></param>
	<param name="SMTPServer"></param>
	<param name="SMTPAuthentication"></param>
	<param name="SMTPUsername"></param>
	<param name="SMTPPassword"></param>
	<returns></returns>
	<remarks></remarks>
	<history>
     [cnurse]        09/29/2005  Moved to Mail class
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Mail.Mail.SendMail(System.String,System.String,System.String,System.String,DotNetNuke.Services.Mail.MailPriority,System.String,DotNetNuke.Services.Mail.MailFormat,System.Text.Encoding,System.String,System.String,System.String,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>Send a simple email.</summary>
	<param name="MailFrom"></param>
	<param name="MailTo"></param>
	<param name="Cc"></param>
	<param name="Bcc"></param>
	<param name="Priority"></param>
	<param name="Subject"></param>
	<param name="BodyFormat"></param>
	<param name="BodyEncoding"></param>
	<param name="Body"></param>
	<param name="Attachment"></param>
	<param name="SMTPServer"></param>
	<param name="SMTPAuthentication"></param>
	<param name="SMTPUsername"></param>
	<param name="SMTPPassword"></param>
	<returns></returns>
	<remarks></remarks>
	<history>
 	[Nik Kalyani]	10/15/2004	Replaced brackets in member names
     [cnurse]        09/29/2005  Moved to Mail class
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.Clean(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Clean removes any HTML Tags, Entities (and optionally any punctuation) from
 a string
 </summary>
	<remarks>
 Encoded Tags are getting decoded, as they are part of the content!
 </remarks>
	<param name="HTML">The Html to clean</param>
	<param name="RemovePunctuation">A flag indicating whether to remove punctuation</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	11/16/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatEmail(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Formats an Email address
 </summary>
	<param name="Email">The email address to format</param>
	<returns>The formatted email address</returns>
	<history>
		[cnurse]	09/29/2005	moved from Globals
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatEmail(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Formats an Email address
 </summary>
	<param name="Email">The email address to format</param>
	<param name="cloak">A flag that indicates whether the text should be cloaked</param>
	<returns>The formatted email address</returns>
	<history>
		[cnurse]	09/29/2005	moved from Globals
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatText(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FormatText replaces <br/> tags by LineFeed characters
 </summary>
	<remarks>
	</remarks>
	<param name="HTML">The HTML content to clean up</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	12/13/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatWebsite(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Format a domain name including link
 </summary>
	<param name="Website">The domain name to format</param>
	<returns>The formatted domain name</returns>
	<history>
		[cnurse]	09/29/2005	moved from Globals
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.Shorten(System.String,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Shorten returns the first (x) characters of a string
 </summary>
	<remarks>
	</remarks>
	<param name="txt">The text to reduces</param>
	<param name="length">The max number of characters to return</param>
	<param name="suffix">An optional suffic to append to the shortened string</param>
	<returns>The shortened string</returns>
	<history>
		[cnurse]	11/16/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripEntities(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 StripEntities removes the HTML Entities from the content
 </summary>
	<remarks>
	</remarks>
	<param name="HTML">The HTML content to clean up</param>
	<param name="RetainSpace">Indicates whether to replace the Entity by a space (true) or nothing (false)</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	11/16/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripTags(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 StripTags removes the HTML Tags from the content
 </summary>
	<remarks>
	</remarks>
	<param name="HTML">The HTML content to clean up</param>
	<param name="RetainSpace">Indicates whether to replace the Tag by a space (true) or nothing (false)</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	11/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripPunctuation(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 StripPunctuation removes the Punctuation from the content
 </summary>
	<remarks>
	</remarks>
	<param name="HTML">The HTML content to clean up</param>
	<param name="RetainSpace">Indicates whether to replace the Punctuation by a space (true) or nothing (false)</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	11/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripWhiteSpace(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 StripWhiteSpace removes the WhiteSpace from the content
 </summary>
	<remarks>
	</remarks>
	<param name="HTML">The HTML content to clean up</param>
	<param name="RetainSpace">Indicates whether to replace the WhiteSpace by a space (true) or nothing (false)</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	12/13/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripNonWord(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 StripNonWord removes any Non-Word Character from the content
 </summary>
	<remarks>
	</remarks>
	<param name="HTML">The HTML content to clean up</param>
	<param name="RetainSpace">Indicates whether to replace the Non-Word Character by a space (true) or nothing (false)</param>
	<returns>The cleaned up string</returns>
	<history>
		[cnurse]	1/28/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteError(System.Web.HttpResponse,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 WriteError outputs an Error Message during Install/Upgrade etc
 </summary>
	<remarks>
	</remarks>
	<param name="response">The ASP.Net Response object</param>
	<param name="file">The filename where the Error Occurred</param>
	<param name="message">The error message</param>
	<history>
		[cnurse]	02/21/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteFeedback(System.Web.HttpResponse,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 WriteFeedback outputs a Feedback Line during Install/Upgrade etc
 </summary>
	<remarks>
	</remarks>
	<param name="response">The ASP.Net Response object</param>
	<param name="indent">The indent for this feedback message</param>
	<param name="message">The feedback message</param>
	<history>
		[cnurse]	02/21/2005	created
     [gve] 	    07/14/2006	added extra overload (showtime) to show or hide the upgrade runtime
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteFeedback(System.Web.HttpResponse,System.Int32,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 WriteFeedback outputs a Feedback Line during Install/Upgrade etc
 </summary>
	<remarks>
	</remarks>
	<param name="response">The ASP.Net Response object</param>
	<param name="indent">The indent for this feedback message</param>
	<param name="message">The feedback message</param>
	<param name="showtime">Show the timespan before the message</param>
	<history>
		[cnurse]	02/21/2005	created
     [gve] 	    07/14/2006	added extra overload (showtime) to show or hide the upgrade runtime
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteFooter(System.Web.HttpResponse)">
 -----------------------------------------------------------------------------
 <summary>
 WriteFooter outputs the Footer during Install/Upgrade etc
 </summary>
	<remarks>
	</remarks>
	<param name="response">The ASP.Net Response object</param>
	<history>
		[cnurse]	02/21/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteHeader(System.Web.HttpResponse,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 WriteHeader outputs the Header during Install/Upgrade etc
 </summary>
	<remarks>
	</remarks>
	<param name="response">The ASP.Net Response object</param>
	<param name="mode">The mode Install/Upgrade etc</param>
	<history>
		[cnurse]	02/21/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Utilities.HtmlUtils">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Common.Utilities
 Project:    DotNetNuke
 Class:      HtmlUtils
 -----------------------------------------------------------------------------
 <summary>
 HtmlUtils is a Utility class that provides Html Utility methods
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.IsInstalled">
	<summary>
 IsInstalled looks at various file artifacts to determine if DotNetNuke has already been installed.
 </summary>
	<returns></returns>
	<remarks>
 If DotNetNuke has been installed, then we should treat database connection errors as real errors.  
 If DotNetNuke has not been installed, then we should expect to have database connection problems
 since the connection string may not have been configured yet, which can occur during the installation
 wizard.
 </remarks>
</member><member name="M:DotNetNuke.Common.Globals.BuildCrossTabDataSet(System.String,System.Data.IDataReader,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Globalization.CultureInfo)">
 -----------------------------------------------------------------------------
 <summary>
 converts a data reader with serialized fields into a typed data set
 </summary>
	<param name="DataSetName">Name of the dataset to be created</param>
	<param name="result">Data reader that contains all field values serialized</param>
	<param name="FixedColumns">List of fixed columns, delimited by commas. Columns must be contained in DataReader</param>
	<param name="VariableColumns">List of variable columns, delimited by commas. Columns must be contained in DataReader</param>
	<param name="KeyColumn">Name of the column, that contains the row ID. Column must be contained in DataReader</param>
	<param name="FieldColumn">Name of the column, that contains the field name. Column must be contained in DataReader</param>
	<param name="FieldTypeColumn">Name of the column, that contains the field type name. Column must be contained in DataReader</param>
	<param name="StringValueColumn">Name of the column, that contains the field value, if stored as string. Column must be contained in DataReader</param>
	<param name="NumericValueColumn">Name of the column, that contains the field value, if stored as number. Column must be contained in DataReader</param>
	<param name="culture">culture of the field values in data reader's string value column</param>
	<returns>The generated DataSet</returns>
	<history>
 	[sleupold]     08/24/2006	Created temporary clone of core function and added support for culture based parsing of numeric values
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GetApplicationName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ApplicationName for the MemberRole API.
 </summary>
	<remarks>
 This overload is used to get the current ApplcationName.  The Application
 Name is in the form Prefix_Id, where Prefix is the object qualifier
 for this instance of DotNetNuke, and Id is the current PortalId for normal
 users or glbSuperUserAppName for SuperUsers.
 </remarks>
	<history>
		[cnurse]	01/18/2005	documented and modifeid to handle a Prefix
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GetApplicationName(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ApplicationName for the MemberRole API.
 </summary>
	<remarks>
 This overload is used to build the Application Name from the Portal Id
 </remarks>
	<history>
		[cnurse]	01/18/2005	documented and modifeid to handle a Prefix
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GetSubFolderPath(System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the folder path under the root for the portal 
 </summary>
	<param name="strFileNamePath">The folder the absolute path</param>
	<remarks>
	</remarks>
	<history>
   [cnurse] 16/9/2004  Updated for localization, Help and 508
   [Philip Beadle] 6 October 2004 Moved to Globals from WebUpload.ascx.vb so can be accessed by URLControl.ascx
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GetTotalRecords(System.Data.IDataReader@)">
 -----------------------------------------------------------------------------
 <summary>
 The GetTotalRecords method gets the number of Records returned.
 </summary>
	<param name="dr">An <see cref="T:System.Data.IDataReader"/> containing the Total no of records</param>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	02/01/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GetStatus">
 -----------------------------------------------------------------------------
 <summary>
 GetStatus - determines whether an upgrade/install is required and sest the
 Database Version and Status accordingly
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/12/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.ImportFile(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ImportFile - converts a file url (/Portals/0/somefile.gif) to the appropriate 
 FileID=xx identification for use in importing portals, tabs and modules
 </summary>
	<remarks>
	</remarks>
	<returns>An UpgradeStatus enum Upgrade/Install/None</returns>
	<history>
 	[cnurse]	10/11/2007	moved from PortalController so the same 
                             logic can be used by Module and Tab templates
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.SetApplicationName(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Sets the ApplicationName for the MemberRole API
 </summary>
	<remarks>
 This overload takes a the PortalId
 </remarks>
	<param name="PortalID">The Portal Id</param>
	<history>
		[cnurse]	01/18/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.SetApplicationName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sets the ApplicationName for the MemberRole API
 </summary>
	<remarks>
 This overload takes a the PortalId
 </remarks>
	<param name="ApplicationName">The Application Name to set</param>
	<history>
		[cnurse]	01/18/2005	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.IsEditMode">
 -----------------------------------------------------------------------------
 <summary>
 Returns whether the current tab is in EditMode
 </summary>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	06/04/2009	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.IsLayoutMode">
 -----------------------------------------------------------------------------
 <summary>
 Returns whether the current tab is in LayoutMode
 </summary>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	9/16/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.ManageUploadDirectory(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 injects the upload directory into raw HTML for src and background tags
 </summary>
	<param name="strHTML">raw HTML text</param>
	<param name="strUploadDirectory">path of portal image directory</param>
	<returns>HTML with paths for images and background corrected</returns>
	<remarks>
	</remarks>
	<history>
 	[sleupold]	8/18/2007	corrected and refactored
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.ManageTokenUploadDirectory(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 injects the upload directory into raw HTML for a single token
 </summary>
	<param name="strHTML">raw HTML text</param>
	<param name="strUploadDirectory">path of portal image directory</param>
	<param name="strToken">token to be replaced</param>
	<returns>HTML with paths for images and background corrected</returns>
	<remarks>
 called by ManageUploadDirectory for each token.
 </remarks>
	<history>
 	[sleupold]	8/18/2007	created as refactoring of ManageUploadDirectory
                             added proper handling of subdirectory installations.
     [sleupold] 11/03/2007   case insensitivity added
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.FindControlRecursiveDown(System.Web.UI.Control,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Searches control hierarchy from top down to find a control matching the passed in name
 </summary>
	<param name="objParent">Root control to begin searching</param>
	<param name="strControlName">Name of control to look for</param>
	<returns></returns>
	<remarks>
 This differs from FindControlRecursive in that it looks down the control hierarchy, whereas, the 
 FindControlRecursive starts at the passed in control and walks the tree up.  Therefore, this function is 
 more a expensive task.
 </remarks>
	<history>
 	[Jon Henning]	9/17/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.CleanName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 CleanName - removes characters from Module/Tab names that are being used for file names
 in Module/Tab Import/Export.  
 </summary>
	<remarks>
	</remarks>
	<returns>A cleaned string</returns>
	<history>
 	[cnurse]	10/11/2007	moved from Import/Export Module user controls to avoid 
                             duplication and for use in new Import and Export Tab
                             user controls
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.AddHTTP(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Adds HTTP to URL if no other protocol specified
 </summary>
	<remarks>
	</remarks>
	<param name="strURL">The url</param>
	<returns>The formatted url</returns>
	<history>
		[cnurse]	12/16/2004	documented
     [cnurse]    05/06/2005  added chack for mailto: protocol
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.ApplicationURL">
 -----------------------------------------------------------------------------
 <summary>
 Generates the Application root url (including the tab/page)
 </summary>
	<remarks>
 This overload assumes the current page
 </remarks>
	<returns>The formatted root url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.ApplicationURL(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the Application root url (including the tab/page)
 </summary>
	<remarks>
 This overload takes the tabid (page id) as a parameter
 </remarks>
	<param name="TabID">The id of the tab/page</param>
	<returns>The formatted root url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the correctly formatted friendly url.
 </summary>
	<remarks>
 Assumes Default.aspx, and that portalsettings are saved to Context
 </remarks>
	<param name="tab">The current tab</param>
	<param name="path">The path to format.</param>
	<returns>The formatted (friendly) url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the correctly formatted friendly url
 </summary>
	<remarks>
 This overload includes an optional page to include in the url.
 </remarks>
	<param name="tab">The current tab</param>
	<param name="path">The path to format.</param>
	<param name="pageName">The page to include in the url.</param>
	<returns>The formatted (friendly) url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the correctly formatted friendly url
 </summary>
	<remarks>
 This overload includes the portal settings for the site
 </remarks>
	<param name="tab">The current tab</param>
	<param name="path">The path to format.</param>
	<param name="settings">The portal Settings</param>
	<returns>The formatted (friendly) url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the correctly formatted friendly url
 </summary>
	<remarks>
 This overload includes an optional page to include in the url, and the portal 
 settings for the site
 </remarks>
	<param name="tab">The current tab</param>
	<param name="path">The path to format.</param>
	<param name="pageName">The page to include in the url.</param>
	<param name="settings">The portal Settings</param>
	<returns>The formatted (friendly) url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the correctly formatted friendly url
 </summary>
	<remarks>
 This overload includes an optional page to include in the url, and the portal 
 settings for the site
 </remarks>
	<param name="tab">The current tab</param>
	<param name="path">The path to format.</param>
	<param name="pageName">The page to include in the url.</param>
	<param name="portalAlias">The portal Alias for the site</param>
	<returns>The formatted (friendly) url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GetURLType(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the type of URl (T=other tab, F=file, U=URL, N=normal)
 </summary>
	<remarks>
	</remarks>
	<param name="URL">The url</param>
	<returns>The url type</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.ImportUrl(System.Int32,System.String)">
	<summary>
 Url's as internal links to Files, Tabs and Users should only be imported if
 those files, tabs and users exist. This function parses the url, and checks
 whether the internal links exist. 
 If the link does not exist, the function will return an empty string
 </summary>
	<param name="ModuleId">Integer</param>
	<param name="url">String</param>
	<returns>If an internal link does not exist, an empty string is returned, otherwise the passed in url is returned as is</returns>
	<history>
     [erikvb]    06/11/2008     corrected file check and added tab and member check
 </history>
</member><member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.String[])">
	<summary>
 Returns a full internal url
 </summary>
	<param name="TabID">The tab id linking to</param>
	<param name="IsSuperTab">Is the destination tab a host tab?</param>
	<param name="settings">the Portalsettings</param>
	<param name="ControlKey">an optional controlkey. If no controlkey is needed, pass "" </param>
	<param name="Language">an optional language. If language is an empty string, the current active culture will be added in the url.</param>
	<param name="AdditionalParameters">Any aditional querystring parameters. Use this format: "param1=value1", "param2=value2", ... , "paramN=valueN"</param>
	<returns>Returns a full internal url</returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Common.Globals.ResolveUrl(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Generates the correctly formatted url
 </summary>
	<remarks>
	</remarks>
	<param name="url">The url to format.</param>
	<returns>The formatted (resolved) url</returns>
	<history>
		[cnurse]	12/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.GenerateTabPath(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GenerateTabPath generates the TabPath used in Friendly URLS
 </summary>
	<remarks>
	</remarks>
	<param name="ParentId">The Id of the Parent Tab</param>
	<param name="TabName">The Name of the current Tab</param>
	<returns>The TabPath</returns>
	<history>
		[cnurse]	1/28/2005	documented
                             modified to remove characters not allowed in urls
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.DeserializeHashTableBase64(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 DeserializeHashTableBase64 deserializes a Hashtable using Binary Formatting
 </summary>
	<remarks>
 While this method of serializing is no longer supported (due to Medium Trust
 issue, it is still required for upgrade purposes.
 </remarks>
	<param name="Source">The String Source to deserialize</param>
	<returns>The deserialized Hashtable</returns>
	<history>
		[cnurse]	2/16/2005	moved to Globals
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.DeserializeHashTableXml(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 DeserializeHashTableXml deserializes a Hashtable using Xml Serialization
 </summary>
	<remarks>
 This is the preferred method of serialization under Medium Trust
 </remarks>
	<param name="Source">The String Source to deserialize</param>
	<returns>The deserialized Hashtable</returns>
	<history>
		[cnurse]	2/16/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.SerializeHashTableBase64(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeHashTableBase64 serializes a Hashtable using Binary Formatting
 </summary>
	<remarks>
 While this method of serializing is no longer supported (due to Medium Trust
 issue, it is still required for upgrade purposes.
 </remarks>
	<param name="Source">The Hashtable to serialize</param>
	<returns>The serialized String</returns>
	<history>
		[cnurse]	2/16/2005	moved to Globals
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.SerializeHashTableXml(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeHashTableXml serializes a Hashtable using Xml Serialization
 </summary>
	<remarks>
 This is the preferred method of serialization under Medium Trust
 </remarks>
	<param name="Source">The Hashtable to serialize</param>
	<returns>The serialized String</returns>
	<history>
		[cnurse]	2/16/2005	moved to Globals
     [cnurse]    01/19/2007  extracted to XmlUtils
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Globals.IsTabPreview">
 -----------------------------------------------------------------------------
 <summary>
 Returns whether the tab being displayed is in preview mode
 </summary>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	9/16/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Globals">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Common
 Project:    DotNetNuke
 Module:     Globals
 -----------------------------------------------------------------------------
 <summary>
 This module contains global utility functions, constants, and enumerations.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/16/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Utilities.DNNClientAPI.AddBodyOnloadEventHandler(System.Web.UI.Page,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Adds client side body.onload event handler 
 </summary>
	<param name="objPage">Current page rendering content</param>
	<param name="strJSFunction">Javascript function name to execute</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	8/3/2004	Created
		[Jon Henning]	4/25/2005	registering dnn namespace when this function is utilized
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Utilities.DNNClientAPI.EnableContainerDragAndDrop(System.Web.UI.Control,System.Web.UI.Control,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Allows any module to have drag and drop functionality enabled
 </summary>
	<param name="objTitle">Title element that responds to the click and dragged</param>
	<param name="objContainer"></param>
	<remarks>
 This sub also will send down information to notify the client of the panes that have been defined in the current skin.
 </remarks>
	<history>
 	[Jon Henning]	8/9/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Utilities.DNNClientAPI.EnableMinMax(System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Boolean,System.String,System.String,DotNetNuke.UI.Utilities.DNNClientAPI.MinMaxPersistanceType)">
 -----------------------------------------------------------------------------
 <summary>
 Allows a button and a content area to support client side min/max functionality
 </summary>
	<param name="objButton">Control that when clicked causes content area to be hidden/shown</param>
	<param name="objContent">Content area that is hidden/shown</param>
	<param name="intModuleId">Module id of button/content, used only for persistance type of Cookie</param>
	<param name="blnDefaultMin">If content area is to be defaulted to minimized pass in true</param>
	<param name="strMinIconLoc">Location of minimized icon</param>
	<param name="strMaxIconLoc">Location of maximized icon</param>
	<param name="ePersistanceType">How to store current state of min/max.  Cookie, Page, None</param>
	<remarks>
 This method's purpose is to provide a higher level of abstraction between the ClientAPI and the module developer.
 </remarks>
	<history>
 	[Jon Henning]	5/6/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Utilities.DNNClientAPI">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : ClientAPI
 
 -----------------------------------------------------------------------------
 <summary>
 Library responsible for interacting with DNN Client API.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	8/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.Calendar.InvokePopupCal(System.Web.UI.WebControls.TextBox)">
 -----------------------------------------------------------------------------
 <summary>
 Opens a popup Calendar
 </summary>
	<param name="Field">TextBox to return the date value</param>
	<returns></returns>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	12/09/2004	Added localized parameter strings: today, close, calendar
                             Use AbbreviatedDayName property instead of first 3 chars of day name
 	[VMasanas]	14/10/2004	Added support for First Day Of Week
     [VMasanas]  14/11/2004  Register client script to work with FriendlyURLs
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Role Id
 </summary>
	<value>An Integer representing the Id of the Role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.PortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Portal Id for the Role
 </summary>
	<value>An Integer representing the Id of the Portal</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleGroupID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the RoleGroup Id
 </summary>
	<value>An Integer representing the Id of the RoleGroup</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Role Name
 </summary>
	<value>A string representing the name of the role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Role Type
 </summary>
	<value>A enum representing the type of the role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.Description">
 -----------------------------------------------------------------------------
 <summary>
 Gets an sets the Description of the Role
 </summary>
	<value>A string representing the description of the role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.BillingFrequency">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Billing Frequency for the role
 </summary>
	<value>A String representing the Billing Frequency of the Role<br/>
		<ul>
			<list>N - None</list>
			<list>O - One time fee</list>
			<list>D - Daily</list>
			<list>W - Weekly</list>
			<list>M - Monthly</list>
			<list>Y - Yearly</list>
		</ul>
	</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.ServiceFee">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the fee for the role
 </summary>
	<value>A single number representing the fee for the role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.TrialFrequency">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Trial Frequency for the role
 </summary>
	<value>A String representing the Trial Frequency of the Role<br/>
		<ul>
			<list>N - None</list>
			<list>O - One time fee</list>
			<list>D - Daily</list>
			<list>W - Weekly</list>
			<list>M - Monthly</list>
			<list>Y - Yearly</list>
		</ul>
	</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.TrialPeriod">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the length of the trial period
 </summary>
	<value>An integer representing the length of the trial period</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.BillingPeriod">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the length of the billing period
 </summary>
	<value>An integer representing the length of the billing period</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.TrialFee">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the trial fee for the role
 </summary>
	<value>A single number representing the trial fee for the role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.IsPublic">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the role is public
 </summary>
	<value>A boolean (True/False)</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.AutoAssignment">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether users are automatically assigned to the role
 </summary>
	<value>A boolean (True/False)</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.RSVPCode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the RSVP Code for the role
 </summary>
	<value>A string representing the RSVP Code for the role</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.IconFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Icon File for the role
 </summary>
	<value>A string representing the Icon File for the role</value>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a RoleInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	03/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleInfo.GetSchema">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlSchema for the RoleInfo
 </summary>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleInfo.ReadXml(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a RoleInfo from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleInfo.WriteXml(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a RoleInfo to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter to use</param>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Roles.RoleInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Roles
 Class:      RoleInfo
 -----------------------------------------------------------------------------
 <summary>
 The RoleInfo class provides the Entity Layer Role object
 </summary>
	<history>
     [cnurse]    05/23/2005  made compatible with .NET 2.0
     [cnurse]    01/03/2006  added RoleGroupId property
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.AutoAssignUsers(DotNetNuke.Security.Roles.RoleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Auto Assign existing users to a role
 </summary>
	<param name="objRoleInfo">The Role to Auto assign</param>
	<history>
 	[cnurse]	05/23/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.AddRole(DotNetNuke.Security.Roles.RoleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This overload adds a role and optionally adds the info to the AspNet Roles
 </summary>
	<param name="objRoleInfo">The Role to Add</param>
	<returns>The Id of the new role</returns>
	<history>
 	[cnurse]	05/23/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteRole(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Delete a Role
 </summary>
	<param name="RoleId">The Id of the Role to delete</param>
	<param name="PortalId">The Id of the Portal</param>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetPortalRoles(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Get a list of roles for the Portal
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<returns>An ArrayList of RoleInfo objects</returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRole(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Fetch a single Role
 </summary>
	<param name="RoleID">The Id of the Role</param>
	<param name="PortalID">The Id of the Portal</param>
	<returns></returns>
	<remarks></remarks>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleByName(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Obtains a role given the role name
 </summary>
	<param name="PortalId">Portal indentifier</param>
	<param name="RoleName">Name of the role to be found</param>
	<returns>A RoleInfo object is the role is found</returns>
	<history>
 	[VMasanas]	27/08/2004	Created
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleNames(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Returns an array of rolenames for a Portal
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<returns>A String Array of Role Names</returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRoles">
 -----------------------------------------------------------------------------
 <summary>
 Gets an ArrayList of Roles
 </summary>
	<returns>An ArrayList of Roles</returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRolesByGroup(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Get the roles for a Role Group
 </summary>
	<param name="portalId">Id of the portal</param>
	<param name="roleGroupId">Id of the Role Group (If -1 all roles for the portal are
 retrieved).</param>
	<returns>An ArrayList of RoleInfo objects</returns>
	<history>
     [cnurse]	01/03/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRolesByUser(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a List of Roles for a given User
 </summary>
	<param name="UserId">The Id of the User</param>
	<param name="PortalId">The Id of the Portal</param>
	<returns>A String Array of Role Names</returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.UpdateRole(DotNetNuke.Security.Roles.RoleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Persists a role to the Data Store
 </summary>
	<param name="objRoleInfo">The role to persist</param>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.AddUserRole(System.Int32,System.Int32,System.Int32,System.DateTime)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a User to a Role
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<param name="RoleId">The Id of the Role</param>
	<param name="ExpiryDate">The expiry Date of the Role membership</param>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
     [cnurse]    05/12/2006  Now calls new overload with EffectiveDate = Now()
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.AddUserRole(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a User to a Role
 </summary>
	<remarks>Overload adds Effective Date</remarks>
	<param name="PortalID">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<param name="RoleId">The Id of the Role</param>
	<param name="EffectiveDate">The expiry Date of the Role membership</param>
	<param name="ExpiryDate">The expiry Date of the Role membership</param>
	<history>
     [cnurse]    05/12/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteUserRole(System.Int32,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Delete/Remove a User from a Role
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<param name="RoleId">The Id of the Role</param>
	<returns></returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRole(System.Int32,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a User/Role
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<param name="UserId">The Id of the user</param>
	<param name="RoleId">The Id of the Role</param>
	<returns>A UserRoleInfo object</returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRoles(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of UserRoles for a Portal
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<returns>An ArrayList of UserRoleInfo objects</returns>
	<history>
 	[Nik Kalyani]	10/15/2004	Created multiple signatures to eliminate Optional parameters
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRoles(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of UserRoles for a User
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<returns>An ArrayList of UserRoleInfo objects</returns>
	<history>
 	[Nik Kalyani]	10/15/2004	Created multiple signatures to eliminate Optional parameters
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRoles(System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of UserRoles for a User
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<returns>An ArrayList of UserRoleInfo objects</returns>
	<history>
 	[Nik Kalyani]	10/15/2004	Created multiple signatures to eliminate Optional parameters
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRolesByUsername(System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a List of UserRoles by UserName and RoleName
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<param name="Username">The username of the user</param>
	<param name="Rolename">The role name</param>
	<returns>An ArrayList of UserRoleInfo objects</returns>
	<history>
 	[cnurse]	05/24/2005	Documented
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRolesByRoleName(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Get the users in a role (as UserRole objects)
 </summary>
	<param name="portalId">Id of the portal (If -1 all roles for all portals are 
 retrieved.</param>
	<param name="roleName">The role to fetch users for</param>
	<returns>An ArrayList of UserRoleInfo objects</returns>
	<history>
     [cnurse]	01/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetUsersByRoleName(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Get the users in a role (as User objects)
 </summary>
	<param name="portalId">Id of the portal (If -1 all roles for all portals are 
 retrieved.</param>
	<param name="roleName">The role to fetch users for</param>
	<returns>An ArrayList of UserInfo objects</returns>
	<history>
     [cnurse]	01/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.UpdateUserRole(System.Int32,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Service (UserRole)
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<param name="RoleId">The Id of the Role</param>
	<history>
 	[Nik Kalyani]	10/15/2004	Created multiple signatures to eliminate Optional parameters
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.UpdateUserRole(System.Int32,System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Service (UserRole)
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<param name="UserId">The Id of the User</param>
	<param name="RoleId">The Id of the Role</param>
	<param name="Cancel">A flag that indicates whether to cancel (delete) the userrole</param>
	<history>
 	[Nik Kalyani]	10/15/2004	Created multiple signatures to eliminate Optional parameters
     [cnurse]    12/15/2005  Abstracted to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.SendNotification(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Security.Roles.RoleInfo,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Security.Roles.RoleController.UserRoleActions)">
 -----------------------------------------------------------------------------
 <summary>
 SendNotification sends an email notification to the user of the change in his/her role
 </summary>
	<remarks>
	</remarks>
	<param name="objUser">The User</param>
	<param name="objRole">The Role</param>
	<history>
 	[cnurse]	9/10/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
     [cnurse]    10/17/2007  Moved to RoleController
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.AddRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a Role Group
 </summary>
	<param name="objRoleGroupInfo">The RoleGroup to Add</param>
	<returns>The Id of the new role</returns>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.AddUserRole(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Security.Roles.RoleInfo,DotNetNuke.Entities.Portals.PortalSettings,System.DateTime,System.DateTime,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a User to a Role
 </summary>
	<param name="objUser">The user to assign</param>
	<param name="objRole">The role to add</param>
	<param name="PortalSettings">The PortalSettings of the Portal</param>
	<param name="effDate">The expiry Date of the Role membership</param>
	<param name="expDate">The expiry Date of the Role membership</param>
	<param name="UserId">The Id of the User assigning the role</param>
	<param name="notifyUser">A flag that indicates whether the user should be notified</param>
	<history>
     [cnurse]    10/17/2007  Created  (Refactored code from Security Roles user control)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteUserRole(System.Int32,DotNetNuke.Security.Roles.RoleInfo,DotNetNuke.Entities.Portals.PortalSettings,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Removes a User from a Role
 </summary>
	<param name="userId">The Id of the user to remove</param>
	<param name="objRole">The role to remove the use from</param>
	<param name="PortalSettings">The PortalSettings of the Portal</param>
	<param name="notifyUser">A flag that indicates whether the user should be notified</param>
	<history>
     [cnurse]    10/17/2007  Created  (Refactored code from Security Roles user control)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteUserRole(System.Int32,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Portals.PortalSettings,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Removes a User from a Role
 </summary>
	<param name="roleId">The Id of the role to remove the user from</param>
	<param name="objUser">The user to remove</param>
	<param name="PortalSettings">The PortalSettings of the Portal</param>
	<param name="notifyUser">A flag that indicates whether the user should be notified</param>
	<history>
     [cnurse]    10/17/2007  Created  (Refactored code from Security Roles user control)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteUserRole(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Security.Roles.RoleInfo,DotNetNuke.Entities.Portals.PortalSettings,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Removes a User from a Role
 </summary>
	<param name="objUser">The user to remove</param>
	<param name="objRole">The role to remove the use from</param>
	<param name="PortalSettings">The PortalSettings of the Portal</param>
	<param name="notifyUser">A flag that indicates whether the user should be notified</param>
	<history>
     [cnurse]    10/17/2007  Created  (Refactored code from Security Roles user control)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.CanRemoveUserFromRole(DotNetNuke.Entities.Portals.PortalSettings,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Determines if the specified user can be removed from a role
 </summary>
	<remarks>
 Roles such as "Registered Users" and "Administrators" can only
 be removed in certain circumstances
 </remarks>
	<param name="PortalSettings">A <see cref="T:DotNetNuke.Entities.Portals.PortalSettings">PortalSettings</see> structure representing the current portal settings</param>
	<param name="UserId">The Id of the User that should be checked for role removability</param>
	<param name="RoleId">The Id of the Role that should be checked for removability</param>
	<returns></returns>
	<history>
 	[anurse]	01/12/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.CanRemoveUserFromRole(DotNetNuke.Entities.Portals.PortalInfo,System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Determines if the specified user can be removed from a role
 </summary>
	<remarks>
 Roles such as "Registered Users" and "Administrators" can only
 be removed in certain circumstances
 </remarks>
	<param name="PortalInfo">A <see cref="T:DotNetNuke.Entities.Portals.PortalInfo">PortalInfo</see> structure representing the current portal</param>
	<param name="UserId">The Id of the User</param>
	<param name="RoleId">The Id of the Role that should be checked for removability</param>
	<returns></returns>
	<history>
 	[anurse]	01/12/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteRoleGroup(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a Role Group
 </summary>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.DeleteRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a Role Group
 </summary>
	<param name="objRoleGroupInfo">The RoleGroup to Delete</param>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleGroup(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Fetch a single RoleGroup
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<returns></returns>
	<remarks></remarks>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleGroupByName(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Fetch a single RoleGroup by Name
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<returns></returns>
	<remarks></remarks>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleGroups(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an ArrayList of RoleGroups
 </summary>
	<param name="PortalID">The Id of the Portal</param>
	<returns>An ArrayList of RoleGroups</returns>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.SerializeRoleGroups(System.Xml.XmlWriter,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Serializes the role groups
 </summary>
	<param name="writer">An XmlWriter</param>
	<param name="PortalID">The Id of the Portal</param>
	<history>
 	[cnurse]	03/18/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.SerializeRoles(System.Xml.XmlWriter,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Serializes the roles
 </summary>
	<param name="writer">An XmlWriter</param>
	<param name="PortalID">The Id of the Portal</param>
	<history>
 	[cnurse]	03/17/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleController.UpdateRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Role Group
 </summary>
	<param name="roleGroup">The RoleGroup to Update</param>
	<history>
 	[cnurse]	01/03/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Roles.RoleController">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Roles
 Class:      RoleController
 -----------------------------------------------------------------------------
 <summary>
 The RoleController class provides Business Layer methods for Roles
 </summary>
	<history>
     [cnurse]    05/23/2005  made compatible with .NET 2.0
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleComparer.Compare(System.Object,System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Compares two RoleInfo objects by performing a comparison of their rolenames
 </summary>
	<param name="x">One of the items to compare</param>
	<param name="y">One of the items to compare</param>
	<returns>An Integer that determines whether x is greater, smaller or equal to y </returns>
	<history>
 	[cnurse]	05/24/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Roles.RoleComparer">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Roles
 Class:      RoleComparer
 -----------------------------------------------------------------------------
 <summary>
 The RoleComparer class provides an Implementation of IComparer for 
 RoleInfo objects
 </summary>
	<history>
     [cnurse]    05/24/2005  Split into separate file and documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.PortalSecurity.FilterFlag">
-----------------------------------------------------------------------------
 <summary>
 The FilterFlag enum determines which filters are applied by the InputFilter
 function.  The Flags attribute allows the user to include multiple 
 enumerated values in a single variable by OR'ing the individual values
 together.
 </summary>
	<history>
 	[Joe Brinkman] 	8/15/2003	Created  Bug #000120, #000121
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.FilterStrings(System.String)">
-----------------------------------------------------------------------------
 <summary>
 This function uses Regex search strings to remove HTML tags which are 
 targeted in Cross-site scripting (XSS) attacks.  This function will evolve
 to provide more robust checking as additional holes are found.
 </summary>
	<param name="strInput">This is the string to be filtered</param>
	<returns>Filtered UserInput</returns>
	<remarks>
 This is a private function that is used internally by the FormatDisableScripting function
 </remarks>
	<history>
     [cathal]        3/06/2007   Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.FormatDisableScripting(System.String)">
-----------------------------------------------------------------------------
 <summary>
 This function uses Regex search strings to remove HTML tags which are 
 targeted in Cross-site scripting (XSS) attacks.  This function will evolve
 to provide more robust checking as additional holes are found.
 </summary>
	<param name="strInput">This is the string to be filtered</param>
	<returns>Filtered UserInput</returns>
	<remarks>
 This is a private function that is used internally by the InputFilter function
 </remarks>
	<history>
 	[Joe Brinkman] 	8/15/2003	Created Bug #000120
     [cathal]        3/06/2007   Added check for encoded content
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.FormatAngleBrackets(System.String)">
-----------------------------------------------------------------------------
 <summary>
 This filter removes angle brackets i.e. 
 </summary>
	<param name="strInput">This is the string to be filtered</param>
	<returns>Filtered UserInput</returns>
	<remarks>
 This is a private function that is used internally by the InputFilter function
 </remarks>
	<history>
 	[Cathal] 	6/1/2006	Created to fufill client request
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.FormatMultiLine(System.String)">
-----------------------------------------------------------------------------
 <summary>
 This filter removes CrLf characters and inserts br
 </summary>
	<param name="strInput">This is the string to be filtered</param>
	<returns>Filtered UserInput</returns>
	<remarks>
 This is a private function that is used internally by the InputFilter function
 </remarks>
	<history>
 	[Joe Brinkman] 	8/15/2003	Created Bug #000120
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.FormatRemoveSQL(System.String)">
-----------------------------------------------------------------------------
 <summary>
 This function verifies raw SQL statements to prevent SQL injection attacks 
 and replaces a similar function (PreventSQLInjection) from the Common.Globals.vb module
 </summary>
	<param name="strSQL">This is the string to be filtered</param>
	<returns>Filtered UserInput</returns>
	<remarks>
 This is a private function that is used internally by the InputFilter function
 </remarks>
	<history>
 	[Joe Brinkman] 	8/15/2003	Created Bug #000121
     [Tom Lucas]     3/8/2004    Fixed   Bug #000114 (Aardvark)
                     8/5/2009 added additional strings and performance tweak
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.IncludesMarkup(System.String)">
-----------------------------------------------------------------------------
 <summary>
 This function determines if the Input string contains any markup.
 </summary>
	<param name="strInput">This is the string to be checked</param>
	<returns>True if string contains Markup tag(s)</returns>
	<remarks>
 This is a private function that is used internally by the InputFilter function
 </remarks>
	<history>
 	[Joe Brinkman] 	8/15/2003	Created Bug #000120
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.BytesToHexString(System.Byte[])">
-----------------------------------------------------------------------------
 <summary>
 This function converts a byte array to a hex string
 </summary>
	<param name="bytes">An array of bytes</param>
	<returns>A string representing the hex converted value</returns>
	<remarks>
 This is a private function that is used internally by the CreateKey function
 </remarks>
	<history>
	</history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.CreateKey(System.Int32)">
-----------------------------------------------------------------------------
 <summary>
 This function creates a random key
 </summary>
	<param name="numBytes">This is the number of bytes for the key</param>
	<returns>A random string</returns>
	<remarks>
 This is a public function used for generating SHA1 keys 
 </remarks>
	<history>
	</history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.PortalSecurity.InputFilter(System.String,DotNetNuke.Security.PortalSecurity.FilterFlag)">
-----------------------------------------------------------------------------
 <summary>
 This function applies security filtering to the UserInput string.
 </summary>
	<param name="UserInput">This is the string to be filtered</param>
	<param name="FilterType">Flags which designate the filters to be applied</param>
	<returns>Filtered UserInput</returns>
	<history>
 	[Joe Brinkman] 	8/15/2003	Created Bug #000120, #000121
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionController.ClearPermissionCache(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 ClearPermissionCache clears the Tab Permission Cache
 </summary>
	<param name="tabId">The ID of the Tab</param>
	<history>
 	[cnurse]	01/15/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionController.DeleteTabPermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteTabPermissionsByUser deletes a user's Tab Permissions in the Database
 </summary>
	<param name="objUser">The user</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionController.GetTabPermissions(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetTabPermissions gets a TabPermissionCollection
 </summary>
	<param name="tabID">The ID of the tab</param>
	<param name="portalID">The ID of the portal</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionController.HasTabPermission(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HasTabPermission checks whether the current user has a specific Tab Permission
 </summary>
	<remarks>If you pass in a comma delimited list of permissions (eg "ADD,DELETE", this will return
 true if the user has any one of the permissions.</remarks>
	<param name="permissionKey">The Permission to check</param>
	<history>
 	[cnurse]	01/15/2008   Documented
 	[cnurse]	04/22/2009   Added multi-permisison support
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionController.HasTabPermission(DotNetNuke.Security.Permissions.TabPermissionCollection,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HasTabPermission checks whether the current user has a specific Tab Permission
 </summary>
	<remarks>If you pass in a comma delimited list of permissions (eg "ADD,DELETE", this will return
 true if the user has any one of the permissions.</remarks>
	<param name="objTabPermissions">The Permissions for the Tab</param>
	<param name="permissionKey">The Permission(s) to check</param>
	<history>
 	[cnurse]	01/15/2008   Documented
 	[cnurse]	04/22/2009   Added multi-permisison support
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionController.SaveTabPermissions(DotNetNuke.Entities.Tabs.TabInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveTabPermissions saves a Tab's permissions
 </summary>
	<param name="objTab">The Tab to update</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.TabPermissionController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : TabPermissionController
 -----------------------------------------------------------------------------
 <summary>
 TabPermissionController provides the Business Layer for Tab Permissions
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.TabPermissionCollection">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : TabPermissionCollection
 -----------------------------------------------------------------------------
 <summary>
 TabPermissionCollection provides the a custom collection for TabPermissionInfo
 objects
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionInfo.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new TabPermissionInfo
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new TabPermissionInfo
 </summary>
	<param name="permission">A PermissionInfo object</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.TabPermissionInfo.TabPermissionID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Tab Permission ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/15/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.TabPermissionInfo.TabID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Tab ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/15/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.TabPermissionInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a TabPermissionInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.TabPermissionInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.TabPermissionInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : TabPermissionInfo
 -----------------------------------------------------------------------------
 <summary>
 TabPermissionInfo provides the Entity Layer for Tab Permissions
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfo.ModuleDefID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Mdoule Definition ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionCode">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Permission Code
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Permission ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionKey">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Permission Key
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Permission Name
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionInfo.FillInternal(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillInternal fills a PermissionInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.PermissionInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : PermissionInfo
 -----------------------------------------------------------------------------
 <summary>
 PermissionInfo provides the Entity Layer for Permissions
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.ClearPermissionCache(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 ClearPermissionCache clears the Module Permission Cache
 </summary>
	<param name="moduleID">The ID of the Module</param>
	<history>
 	[cnurse]	01/15/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.DeleteModulePermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteModulePermissionsByUser deletes a user's Module Permission in the Database
 </summary>
	<param name="objUser">The user</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.GetModulePermissions(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModulePermissions gets a ModulePermissionCollection
 </summary>
	<param name="moduleID">The ID of the module</param>
	<param name="tabID">The ID of the tab</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.HasModulePermission(DotNetNuke.Security.Permissions.ModulePermissionCollection,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HasModulePermission checks whether the current user has a specific Module Permission
 </summary>
	<remarks>If you pass in a comma delimited list of permissions (eg "ADD,DELETE", this will return
 true if the user has any one of the permissions.</remarks>
	<param name="objModulePermissions">The Permissions for the Module</param>
	<param name="permissionKey">The Permission to check</param>
	<history>
 	[cnurse]	01/15/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.HasModuleAccess(DotNetNuke.Security.SecurityAccessLevel,System.String,DotNetNuke.Entities.Modules.ModuleInfo)">
-----------------------------------------------------------------------------
 <summary>
 Determines if user has the necessary permissions to access an item with the
 designated AccessLevel.
 </summary>
	<param name="AccessLevel">The SecurityAccessLevel required to access a portal module or module action.</param>
	<param name="permissionKey">If Security Access is Edit the permissionKey is the actual "edit" permisison required.</param>
	<param name="ModuleConfiguration">The ModuleInfo object for the associated module.</param>
	<returns>A boolean value indicating if the user has the necessary permissions</returns>
	<remarks>Every module control and module action has an associated permission level.  This
 function determines whether the user represented by UserName has sufficient permissions, as
 determined by the PortalSettings and ModuleSettings, to access a resource with the 
 designated AccessLevel.</remarks>
	<history>
     [cnurse]        02/27/2007  New overload
     [cnurse]        02/27/2007  Moved from PortalSecurity
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.SaveModulePermissions(DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveModulePermissions updates a Module's permissions
 </summary>
	<param name="objModule">The Module to update</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.ModulePermissionController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : ModulePermissionController
 -----------------------------------------------------------------------------
 <summary>
 ModulePermissionController provides the Business Layer for Module Permissions
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.ModulePermissionCollection">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : ModulePermissionCollection
 -----------------------------------------------------------------------------
 <summary>
 ModulePermissionCollection provides the a custom collection for ModulePermissionInfo
 objects
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new ModulePermissionInfo
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new ModulePermissionInfo
 </summary>
	<param name="permission">A PermissionInfo object</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.ModulePermissionInfo.ModulePermissionID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module Permission ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.ModulePermissionInfo.ModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.Equals(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Compares if two ModulePermissionInfo objects are equivalent/equal
 </summary>
	<param name="obj">a ModulePermissionObject</param>
	<returns>true if the permissions being passed represents the same permission
 in the current object
 </returns>
	<remarks>
 This function is needed to prevent adding duplicates to the ModulePermissionCollection.
 ModulePermissionCollection.Contains will use this method to check if a given permission
 is already included in the collection.
 </remarks>
	<history>
 	[Vicenç]	09/01/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ModulePermissionInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.ModulePermissionInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.ModulePermissionInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : ModulePermissionInfo
 -----------------------------------------------------------------------------
 <summary>
 ModulePermissionInfo provides the Entity Layer for Module Permissions
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.SaveFolderPermissions(DotNetNuke.Services.FileSystem.FolderInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveFolderPermissions updates a Folder's permissions
 </summary>
	<param name="folder">The Folder to update</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.FolderPermissionInfo.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new FolderPermissionInfo
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.FolderPermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new FolderPermissionInfo
 </summary>
	<param name="permission">A PermissionInfo object</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.FolderPermissionInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a FolderPermissionInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	05/23/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.FolderPermissionInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	05/23/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> class.
 </summary>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.#ctor(DotNetNuke.Services.Search.SearchResultsInfoCollection)">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> class containing the elements of the specified source collection.
 </summary>
	<param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> with which to initialize the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.#ctor(DotNetNuke.Services.Search.SearchResultsInfo[])">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> class containing the specified array of <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> objects.
 </summary>
	<param name="value">An array of <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> objects with which to initialize the collection. </param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.#ctor(System.Collections.ArrayList)">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> class containing the specified array of <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> objects.
 </summary>
	<param name="value">An array of <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> objects with which to initialize the collection. </param>
</member><member name="P:DotNetNuke.Services.Search.SearchResultsInfoCollection.Item(System.Int32)">
	<summary>
 Gets the <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> at the specified index in the collection.
 <para>
 In VB.Net, this property is the indexer for the <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> class.
 </para>
	</summary>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.Add(DotNetNuke.Services.Search.SearchResultsInfo)">
	<summary>
 Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> to the end of the collection.
 </summary>
	<param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.IndexOf(DotNetNuke.Services.Search.SearchResultsInfo)">
	<summary>
 Gets the index in the collection of the specified <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see>, if it exists in the collection.
 </summary>
	<param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> to locate in the collection.</param>
	<returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.Insert(System.Int32,DotNetNuke.Services.Search.SearchResultsInfo)">
	<summary>
 Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> to the collection at the designated index.
 </summary>
	<param name="index">An <see cref="T:System.Int32">Integer</see> to indicate the location to add the object to the collection.</param>
	<param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.Remove(DotNetNuke.Services.Search.SearchResultsInfo)">
	<summary>
 Remove the specified object of type <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> from the collection.
 </summary>
	<param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> to remove to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.Contains(DotNetNuke.Services.Search.SearchResultsInfo)">
	<summary>
 Gets a value indicating whether the collection contains the specified <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see>.
 </summary>
	<param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> to search for in the collection.</param>
	<returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.AddRange(DotNetNuke.Services.Search.SearchResultsInfo[])">
	<summary>
 Copies the elements of the specified <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> array to the end of the collection.
 </summary>
	<param name="value">An array of type <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> containing the objects to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.AddRange(System.Collections.ArrayList)">
	<summary>
 Copies the elements of the specified arraylist to the end of the collection.
 </summary>
	<param name="value">An arraylist of type <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> containing the objects to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.AddRange(DotNetNuke.Services.Search.SearchResultsInfoCollection)">
	<summary>
 Adds the contents of another <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> to the end of the collection.
 </summary>
	<param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">SearchResultsInfoCollection</see> containing the objects to add to the collection. </param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.CopyTo(DotNetNuke.Services.Search.SearchResultsInfo[],System.Int32)">
	<summary>
 Copies the collection objects to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
 </summary>
	<param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
	<param name="index">The index of the array at which to begin inserting.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchResultsInfoCollection.ToArray">
	<summary>
 Creates a one-dimensional <see cref="T:System.Array">Array</see> instance containing the collection items.
 </summary>
	<returns>Array of type SearchResultsInfo</returns>
</member><member name="T:DotNetNuke.Services.Search.SearchResultsInfoCollection">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke
 Class:      SearchResultsInfoCollection
 -----------------------------------------------------------------------------
 <summary>
 Represents a collection of <see cref="T:DotNetNuke.Services.Search.SearchResultsInfo">SearchResultsInfo</see> objects.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Search.SearchResultsInfo">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke
 Class:      SearchResultsInfo
 -----------------------------------------------------------------------------
 <summary>
 The SearchResultsInfo represents a Search Result Item
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.#ctor">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> class.
 </summary>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.#ctor(DotNetNuke.Services.Search.SearchItemInfoCollection)">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> class containing the elements of the specified source collection.
 </summary>
	<param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> with which to initialize the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.#ctor(DotNetNuke.Services.Search.SearchItemInfo[])">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> class containing the specified array of <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> objects.
 </summary>
	<param name="value">An array of <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> objects with which to initialize the collection. </param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.#ctor(System.Collections.ArrayList)">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollectionSearchItemInfoCollection</see> class containing the specified array of <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> objects.
 </summary>
	<param name="value">An arraylist of <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> objects with which to initialize the collection. </param>
</member><member name="P:DotNetNuke.Services.Search.SearchItemInfoCollection.Item(System.Int32)">
	<summary>
 Gets the <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> at the specified index in the collection.
 <para>
 In VB.Net, this property is the indexer for the <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> class.
 </para>
	</summary>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.Add(DotNetNuke.Services.Search.SearchItemInfo)">
	<summary>
 Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> to the end of the collection.
 </summary>
	<param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.IndexOf(DotNetNuke.Services.Search.SearchItemInfo)">
	<summary>
 Gets the index in the collection of the specified <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see>, if it exists in the collection.
 </summary>
	<param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> to locate in the collection.</param>
	<returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.Insert(System.Int32,DotNetNuke.Services.Search.SearchItemInfo)">
	<summary>
 Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> to the collection at the designated index.
 </summary>
	<param name="index">An <see cref="T:System.Int32">Integer</see> to indicate the location to add the object to the collection.</param>
	<param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.Remove(DotNetNuke.Services.Search.SearchItemInfo)">
	<summary>
 Remove the specified object of type <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> from the collection.
 </summary>
	<param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> to remove to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.Contains(DotNetNuke.Services.Search.SearchItemInfo)">
	<summary>
 Gets a value indicating whether the collection contains the specified <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see>.
 </summary>
	<param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> to search for in the collection.</param>
	<returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.AddRange(DotNetNuke.Services.Search.SearchItemInfo[])">
	<summary>
 Copies the elements of the specified <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> array to the end of the collection.
 </summary>
	<param name="value">An array of type <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> containing the objects to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.AddRange(System.Collections.ArrayList)">
	<summary>
 Copies the elements of the specified arraylist to the end of the collection.
 </summary>
	<param name="value">An arraylist of type <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> containing the objects to add to the collection.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.AddRange(DotNetNuke.Services.Search.SearchItemInfoCollection)">
	<summary>
 Adds the contents of another <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> to the end of the collection.
 </summary>
	<param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchItemInfoCollection">SearchItemInfoCollection</see> containing the objects to add to the collection. </param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.CopyTo(DotNetNuke.Services.Search.SearchItemInfo[],System.Int32)">
	<summary>
 Copies the collection objects to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
 </summary>
	<param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
	<param name="index">The index of the array at which to begin inserting.</param>
</member><member name="M:DotNetNuke.Services.Search.SearchItemInfoCollection.ToArray">
	<summary>
 Creates a one-dimensional <see cref="T:System.Array">Array</see> instance containing the collection items.
 </summary>
	<returns>Array of type SearchItemInfo</returns>
</member><member name="T:DotNetNuke.Services.Search.SearchItemInfoCollection">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke
 Class:      SearchItemInfoCollection
 -----------------------------------------------------------------------------
 <summary>
 Represents a collection of <see cref="T:DotNetNuke.Services.Search.SearchItemInfo">SearchItemInfo</see> objects.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Search.SearchItemInfo">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke
 Class:      SearchItemInfo
 -----------------------------------------------------------------------------
 <summary>
 The SearchItemInfo represents a Search Item
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchEngineScheduler.DoWork">
 -----------------------------------------------------------------------------
 <summary>
 DoWork runs the scheduled item
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Search.SearchEngineScheduler">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke
 Class:      SearchEngineScheduler
 -----------------------------------------------------------------------------
 <summary>
 The SearchEngineScheduler implements a SchedulerClient for the Indexing of
 portal content.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchEngine.IndexContent">
 -----------------------------------------------------------------------------
 <summary>
 IndexContent indexes all Portal content
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchEngine.IndexContent(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 IndexContent indexes the Portal's content
 </summary>
	<remarks>
	</remarks>
	<param name="PortalID">The Id of the Portal</param>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchEngine.GetContent(DotNetNuke.Services.Search.IndexingProvider)">
 -----------------------------------------------------------------------------
 <summary>
 GetContent gets all the content and passes it to the Indexer
 </summary>
	<remarks>
	</remarks>
	<param name="Indexer">The Index Provider that will index the content of the portal</param>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Search.SearchEngine.GetContent(System.Int32,DotNetNuke.Services.Search.IndexingProvider)">
 -----------------------------------------------------------------------------
 <summary>
 GetContent gets the Portal's content and passes it to the Indexer
 </summary>
	<remarks>
	</remarks>
	<param name="PortalID">The Id of the Portal</param>
	<param name="Indexer">The Index Provider that will index the content of the portal</param>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Search.SearchEngine">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Services.Search
 Project:    DotNetNuke
 Class:      SearchEngine
 -----------------------------------------------------------------------------
 <summary>
 The SearchEngine  manages the Indexing of the Portal content
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	11/15/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Utilities.DataCache">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Common.Utilities
 Class:      DataCache
 -----------------------------------------------------------------------------
 <summary>
 The DataCache class is a facade class for the CachingProvider Instance's
 </summary>
	<history>
     [cnurse]	12/01/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Portals.PortalTemplateValidator">
 -----------------------------------------------------------------------------
 <summary>
 The PortalTemplateValidator Class is used to validate the Portal Template
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a PortalInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalCallback(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetPortalCallback gets the Portal from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalDictionaryCallback(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetPortalDictioanryCallback gets the Portal Lookup Dictionary from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	07/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettingsDictionaryCallback(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetPortalSettingsDictionaryCallback gets a Dictionary of Portal Settings
 from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalsByName(System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetPortalsByName gets all the portals whose name matches a provided filter expression
 </summary>
	<remarks>
	</remarks>
	<param name="nameToMatch">The email address to use to find a match.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of PortalInfo objects.</returns>
	<history>
     [cnurse]	11/17/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.CreatePortal(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a new portal based on the portal template provided.
 </summary>
	<param name="PortalName">Name of the portal to be created</param>
	<returns>PortalId of the new portal if there are no errors, -1 otherwise.</returns>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	03/09/2004	Modified to support new template format.
                             Portal template file should be processed before admin.template
     [cnurse]    01/11/2005  Template parsing moved to CreatePortal
     [cnurse]    05/10/2006  Removed unneccessary use of Administrator properties
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseFiles(System.Xml.XmlNodeList,System.Int32,DotNetNuke.Services.FileSystem.FolderInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Processes all Files from the template
 </summary>
	<param name="nodeFiles">Template file node for the Files</param>
	<param name="PortalId">PortalId of the new portal</param>
	<history>
 	[cnurse]	11/09/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseFolders(System.Xml.XmlNode,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Processes all Folders from the template
 </summary>
	<param name="nodeFolders">Template file node for the Folders</param>
	<param name="PortalId">PortalId of the new portal</param>
	<history>
 	[cnurse]	11/09/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseFolderPermissions(System.Xml.XmlNodeList,System.Int32,DotNetNuke.Services.FileSystem.FolderInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Parses folder permissions
 </summary>
	<param name="nodeFolderPermissions">Node for folder permissions</param>
	<param name="PortalID">PortalId of new portal</param>
	<param name="folder">The folder being processed</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/09/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParsePortalSettings(System.Xml.XmlNode,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Processes the settings node
 </summary>
	<param name="nodeSettings">Template file node for the settings</param>
	<param name="PortalId">PortalId of the new portal</param>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	27/08/2004	Created
 	[VMasanas]	15/10/2004	Modified for new skin structure
     [cnurse]    11/21/2004  Modified to use GetNodeValueDate for ExpiryDate
     [VMasanas]  02/21/2005  Modified to not overwrite ExpiryDate if not present
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseProfileDefinitions(System.Xml.XmlNode,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Processes all Profile Definitions from the template
 </summary>
	<param name="nodeProfileDefinitions">Template file node for the Profile Definitions</param>
	<param name="PortalId">PortalId of the new portal</param>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseTabs(System.Xml.XmlNode,System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Processes all tabs from the template
 </summary>
	<param name="nodeTabs">Template file node for the tabs</param>
	<param name="PortalId">PortalId of the new portal</param>
	<param name="IsAdminTemplate">True when processing admin template, false when processing portal template</param>
	<param name="mergeTabs">Flag to determine whether Module content is merged.</param>
	<param name="IsNewPortal">Flag to determine is the template is applied to an existing portal or a new one.</param>
	<remarks>
 When a special tab is found (HomeTab, UserTab, LoginTab, AdminTab) portal information will be updated.
 </remarks>
	<history>
 	[VMasanas]	26/08/2004	Removed code to allow multiple tabs with same name.
 	[VMasanas]	15/10/2004	Modified for new skin structure
		[cnurse]	15/10/2004	Modified to allow for merging template
								with existing pages
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseTab(System.Xml.XmlNode,System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Processes a single tab from the template
 </summary>
	<param name="nodeTab">Template file node for the tabs</param>
	<param name="PortalId">PortalId of the new portal</param>
	<param name="IsAdminTemplate">True when processing admin template, false when processing portal template</param>
	<param name="mergeTabs">Flag to determine whether Module content is merged.</param>
	<param name="hModules">Used to control if modules are true modules or instances</param>
	<param name="hTabs">Supporting object to build the tab hierarchy</param>
	<param name="IsNewPortal">Flag to determine is the template is applied to an existing portal or a new one.</param>
	<remarks>
 When a special tab is found (HomeTab, UserTab, LoginTab, AdminTab) portal information will be updated.
 </remarks>
	<history>
 	[VMasanas]	26/08/2004	Removed code to allow multiple tabs with same name.
 	[VMasanas]	15/10/2004	Modified for new skin structure
		[cnurse]	15/10/2004	Modified to allow for merging template
								with existing pages
     [cnurse]    11/21/2204  modified to use GetNodeValueDate for Start and End Dates
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.AddPortalAlias(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a new portal alias
 </summary>
	<param name="PortalId">Id of the portal</param>
	<param name="PortalAlias">Portal Alias to be created</param>
	<remarks>
	</remarks>
	<history>
     [cnurse]    01/11/2005  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.CreatePortal(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a new portal.
 </summary>
	<param name="PortalName">Name of the portal to be created</param>
	<param name="FirstName">Portal Administrator's first name</param>
	<param name="LastName">Portal Administrator's last name</param>
	<param name="Username">Portal Administrator's username</param>
	<param name="Password">Portal Administrator's password</param>
	<param name="Email">Portal Administrator's email</param>
	<param name="Description">Description for the new portal</param>
	<param name="KeyWords">KeyWords for the new portal</param>
	<param name="TemplatePath">Path where the templates are stored</param>
	<param name="TemplateFile">Template file</param>
	<param name="PortalAlias">Portal Alias String</param>
	<param name="ServerPath">The Path to the root of the Application</param>
	<param name="ChildPath">The Path to the Child Portal Folder</param>
	<param name="IsChildPortal">True if this is a child portal</param>
	<returns>PortalId of the new portal if there are no errors, -1 otherwise.</returns>
	<remarks>
 After the selected portal template is parsed the admin template ("admin.template") will be
 also processed. The admin template should only contain the "Admin" menu since it's the same
 on all portals. The selected portal template can contain a <settings/> node to specify portal
 properties and a <roles/> node to define the roles that will be created on the portal by default.
 </remarks>
	<history>
 	[cnurse]	11/08/2004	created (most of this code was moved from SignUp.ascx.vb)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.CreatePortal(System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a new portal.
 </summary>
	<param name="PortalName">Name of the portal to be created</param>
	<param name="objAdminUser">Portal Administrator</param>
	<param name="Description">Description for the new portal</param>
	<param name="KeyWords">KeyWords for the new portal</param>
	<param name="TemplatePath">Path where the templates are stored</param>
	<param name="TemplateFile">Template file</param>
	<param name="PortalAlias">Portal Alias String</param>
	<param name="ServerPath">The Path to the root of the Application</param>
	<param name="ChildPath">The Path to the Child Portal Folder</param>
	<param name="IsChildPortal">True if this is a child portal</param>
	<returns>PortalId of the new portal if there are no errors, -1 otherwise.</returns>
	<remarks>
 After the selected portal template is parsed the admin template ("admin.template") will be
 also processed. The admin template should only contain the "Admin" menu since it's the same
 on all portals. The selected portal template can contain a <settings/> node to specify portal
 properties and a <roles/> node to define the roles that will be created on the portal by default.
 </remarks>
	<history>
 	[cnurse]	05/12/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortalInfo(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a portal permanently
 </summary>
	<param name="PortalId">PortalId of the portal to be deleted</param>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	03/09/2004	Created
 	[VMasanas]	26/10/2004	Remove dependent data (skins, modules)
     [cnurse]    24/11/2006  Removal of Modules moved to sproc
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortal(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets information of a portal
 </summary>
	<param name="PortalId">Id of the portal</param>
	<returns>PortalInfo object with portal definition</returns>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortals">
 -----------------------------------------------------------------------------
 <summary>
 Gets information from all portals
 </summary>
	<returns>ArrayList of PortalInfo objects</returns>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSpaceUsedBytes">
 -----------------------------------------------------------------------------
 <summary>
 Gets the space used at the host level
 </summary>
	<returns>Space used in bytes</returns>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	19/04/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSpaceUsedBytes(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the space used by a portal in bytes
 </summary>
	<param name="PortalId">Id of the portal</param>
	<returns>Space used in bytes</returns>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	07/04/2006	Created
     [VMasanas]  11/05/2006  Use file size stored on the db. This is necessary
         to take into account the new secure file storage options
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.HasSpaceAvailable(System.Int32,System.Int64)">
 -----------------------------------------------------------------------------
 <summary>
 Verifies if there's enough space to upload a new file on the given portal
 </summary>
	<param name="PortalId">Id of the portal</param>
	<param name="fileSizeBytes">Size of the file being uploaded</param>
	<returns>True if there's enough space available to upload the file</returns>
	<remarks>
	</remarks>
	<history>
 	[VMasanas]	19/04/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ParseTemplate(System.Int32,System.String,System.String,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Processess a template file for the new portal. This method will be called twice: for the portal template and for the admin template
 </summary>
	<param name="PortalId">PortalId of the new portal</param>
	<param name="TemplatePath">Path for the folder where templates are stored</param>
	<param name="TemplateFile">Template file to process</param>
	<param name="AdministratorId">UserId for the portal administrator. This is used to assign roles to this user</param>
	<param name="mergeTabs">Flag to determine whether Module content is merged.</param>
	<param name="IsNewPortal">Flag to determine is the template is applied to an existing portal or a new one.</param>
	<remarks>
 The roles and settings nodes will only be processed on the portal template file.
 </remarks>
	<history>
 	[VMasanas]	27/08/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.ProcessResourceFile(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Processes the resource file for the template file selected
 </summary>
	<param name="portalPath">New portal's folder</param>
	<param name="TemplateFile">Selected template file</param>
	<remarks>
 The resource file is a zip file with the same name as the selected template file and with
 an extension of .resources (to unable this file being downloaded).
 For example: for template file "portal.template" a resource file "portal.template.resources" can be defined.
 </remarks>
	<history>
 	[VMasanas]	10/09/2004	Created
     [cnurse]    11/08/2004  Moved from SignUp to PortalController
     [cnurse]    03/04/2005  made Public
     [cnurse]    05/20/2005  moved most of processing to new method in FileSystemUtils
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalInfo(DotNetNuke.Entities.Portals.PortalInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates basic portal information
 </summary>
	<param name="Portal"></param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/13/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalInfo(System.Int32,System.String,System.String,System.String,System.DateTime,System.Int32,System.Int32,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Updates basic portal information
 </summary>
	<param name="PortalId"></param>
	<param name="PortalName"></param>
	<param name="LogoFile"></param>
	<param name="FooterText"></param>
	<param name="ExpiryDate"></param>
	<param name="UserRegistration"></param>
	<param name="BannerAdvertising"></param>
	<param name="Currency"></param>
	<param name="AdministratorId"></param>
	<param name="HostFee"></param>
	<param name="HostSpace"></param>
	<param name="PaymentProcessor"></param>
	<param name="ProcessorUserId"></param>
	<param name="ProcessorPassword"></param>
	<param name="Description"></param>
	<param name="KeyWords"></param>
	<param name="BackgroundFile"></param>
	<param name="SiteLogHistory"></param>
	<param name="HomeTabId"></param>
	<param name="LoginTabId"></param>
	<param name="UserTabId"></param>
	<param name="DefaultLanguage"></param>
	<param name="TimeZoneOffset"></param>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalAliasController.GetPortalAliasLookupCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetPortalAliasLookupCallBack gets a Dictionary of Host Settings from 
 the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	07/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleInfo.DesktopModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ID of the Associated Desktop Module
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleInfo.DesktopModule">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Associated Desktop Module
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleInfo.ModuleDefID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ID of the Associated Module Definition
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleInfo.ModuleDefinition">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Associated Module Definition
 </summary>
	<returns>A ModuleDefinitionInfo</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ModuleInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.ModuleInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : ModuleInfo
 -----------------------------------------------------------------------------
 <summary>
 ModuleInfo provides the Entity Layer for Modules
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ModuleDefID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module Definition ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DefaultCacheTime">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Default Cache Time
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DesktopModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the associated Desktop Module ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.FriendlyName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Friendly Name
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ModuleControls">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Dictionary of ModuleControls that are part of this definition
 </summary>
	<returns>A Dictionary(Of String, ModuleControlInfo)</returns>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.Permissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Dictionary of Permissions that are part of this definition
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ModuleDefinitionInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/11/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.GetSchema">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlSchema for the ModuleDefinitionInfo
 </summary>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ReadModuleControls(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads the ModuleControls from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ReadXml(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a ModuleDefinitionInfo from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.WriteXml(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a ModuleDefinitionInfo to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules.Definitions
 Class	 : ModuleDefinitionInfo
 -----------------------------------------------------------------------------
 <summary>
 ModuleDefinitionInfo provides the Entity Layer for Module Definitions
 </summary>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinitionsCallBack gets a Dictionary of Module Definitions from 
 the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/13/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinitionByID gets a Module Definition by its ID
 </summary>
	<param name="moduleDefID">The ID of the Module Definition</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByFriendlyName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinitionByFriendlyName gets a Module Definition by its Friendly
 Name
 </summary>
	<param name="friendlyName">The friendly name</param>
	<history>
 	[cnurse]	10/30/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByFriendlyName(System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinitionByFriendlyName gets a Module Definition by its Friendly
 Name (and DesktopModuleID)
 </summary>
	<param name="friendlyName">The friendly name</param>
	<param name="desktopModuleID">The ID of the Dekstop Module</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitions">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinitions gets a Dictionary of Module Definitions.
 </summary>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleDefinitionsByDesktopModuleID gets a Dictionary of Module Definitions
 with a particular DesktopModuleID, keyed by the FriendlyName.
 </summary>
	<param name="desktopModuleID">The ID of the Desktop Module</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.SaveModuleDefinition(DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 SaveModuleDefinition saves the Module Definition to the database
 </summary>
	<param name="moduleDefinition">The Module Definition to save</param>
	<param name="saveChildren">A flag that determines whether the child objects are also saved</param>
	<param name="clearCache">A flag that determines whether to clear the host cache</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.DeleteModuleDefinition(DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteModuleDefinition deletes a Module Definition By ID
 </summary>
	<param name="objModuleDefinition">The Module Definition to delete</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.DeleteModuleDefinition(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteModuleDefinition deletes a Module Definition By ID
 </summary>
	<param name="moduleDefinitionId">The ID of the Module Definition to delete</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules.Definitions
 Class	 : ModuleDefinitionController
 -----------------------------------------------------------------------------
 <summary>
 ModuleDefinitionController provides the Business Layer for Module Definitions
 </summary>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.AddContent(System.Xml.XmlNode,DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Adds module content to the node module
 </summary>
	<param name="nodeModule">Node where to add the content</param>
	<param name="objModule">Module</param>
	<remarks>
	</remarks>
	<history>
 	[vmasanas]	25/10/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetTabModulesCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetTabModulesCallBack gets a Dictionary of Modules by 
 Tab from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.SerializeModule(System.Xml.XmlDocument,DotNetNuke.Entities.Modules.ModuleInfo,System.Boolean)">
	<summary>
 SerializeModule
 </summary>
	<param name="xmlModule">The Xml Document to use for the Module</param>
	<param name="objModule">The ModuleInfo object to serialize</param>
	<param name="includeContent">A flak that determines whether the content of the module is serialised.</param>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.AddModule(DotNetNuke.Entities.Modules.ModuleInfo)">
	<summary>
 add a module to a page
 </summary>
	<param name="objModule">moduleInfo for the module to create</param>
	<returns>ID of the created module</returns>
	<history>
    [sleupold] 2007-09-24 documented
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyModule(System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 CopyModule copies a Module from one Tab to another optionally including all the 
	TabModule settings
 </summary>
	<remarks>
	</remarks>
	<param name="moduleId">The Id of the module to copy</param>
	<param name="fromTabId">The Id of the source tab</param>
	<param name="toTabId">The Id of the destination tab</param>
	<param name="toPaneName">The name of the Pane on the destination tab where the module will end up</param>
	<param name="includeSettings">A flag to indicate whether the settings are copied to the new Tab</param>
	<history>
 	[cnurse]	10/21/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyModule(System.Int32,System.Int32,System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 CopyModule copies a Module from one Tab to a collection of Tabs optionally
	including the TabModule settings
 </summary>
	<remarks>
	</remarks>
	<param name="moduleId">The Id of the module to copy</param>
	<param name="fromTabId">The Id of the source tab</param>
	<param name="toTabs">An ArrayList of TabItem objects</param>
	<param name="includeSettings">A flag to indicate whether the settings are copied to the new Tab</param>
	<history>
 	[cnurse]	2004-10-22	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyTabModuleSettings(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 CopyTabModuleSettings copies the TabModuleSettings from one instance to another
 </summary>
	<remarks>
	</remarks>
	<param name="fromModule">The module to copy from</param>
	<param name="toModule">The module to copy to</param>
	<history>
 	[cnurse]	2005-01-11	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteAllModules(System.Int32,System.Int32,System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo})">
 -----------------------------------------------------------------------------
 <summary>
 DeleteAllModules deletes all instances of a Module (from a collection).  This overload
 soft deletes the instances
 </summary>
	<param name="moduleId">The Id of the module to copy</param>
	<param name="tabId">The Id of the current tab</param>
	<param name="fromTabs">An ArrayList of TabItem objects</param>
	<history>
 	[cnurse]	2009-03-24	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteAllModules(System.Int32,System.Int32,System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Boolean,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteAllModules deletes all instances of a Module (from a collection), optionally excluding the
	current instance, and optionally including deleting the Module itself.
 </summary>
	<remarks>
	Note - the base module is not removed unless both the flags are set, indicating
	to delete all instances AND to delete the Base Module
 </remarks>
	<param name="moduleId">The Id of the module to copy</param>
	<param name="tabId">The Id of the current tab</param>
	<param name="softDelete">A flag that determines whether the instance should be soft-deleted</param>
	<param name="fromTabs">An ArrayList of TabItem objects</param>
	<param name="includeCurrent">A flag to indicate whether to delete from the current tab
		as identified ny tabId</param>
	<param name="deleteBaseModule">A flag to indicate whether to delete the Module itself</param>
	<history>
 	[cnurse]	2004-10-22	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteModule(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Delete a module instance permanently from the database
 </summary>
	<param name="ModuleId">ID of the module instance</param>
	<history>
    [sleupold]   1007-09-24 documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteTabModule(System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Delete a module reference permanently from the database.
 if there are no other references, the module instance is deleted as well
 </summary>
	<param name="tabId">ID of the page</param>
	<param name="moduleId">ID of the module instance</param>
	<param name="softDelete">A flag that determines whether the instance should be soft-deleted</param>
	<history>
    [sleupold]   1007-09-24 documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetAllModules">
 -----------------------------------------------------------------------------
 <summary>
 get info of all modules in any portal of the installation
 </summary>
	<returns>moduleInfo of all modules</returns>
	<remarks>created for upgrade purposes</remarks>
	<history>
    [sleupold] 2007-09-24 documented
</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModule(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 get a Module object
 </summary>
	<param name="moduleID">ID of the module</param>
	<returns>a ModuleInfo object - note that this method will always hit the database as no TabID cachekey is provided</returns>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModule(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 get a Module object
 </summary>
	<param name="moduleID">ID of the module</param>
	<param name="tabID">ID of the page</param>
	<returns>a ModuleInfo object</returns>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModule(System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 get a Module object
 </summary>
	<param name="moduleID">ID of the module</param>
	<param name="tabID">ID of the page</param>
	<param name="ignoreCache">flag, if data shall not be taken from cache</param>
	<returns>ArrayList of ModuleInfo objects</returns>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModules(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 get all Module objects of a portal
 </summary>
	<param name="portalID">ID of the portal</param>
	<returns>ArrayList of ModuleInfo objects</returns>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetAllTabsModules(System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 get Module objects of a portal, either only those, to be placed on all tabs or not
 </summary>
	<param name="portalID">ID of the portal</param>
	<param name="allTabs">specify, whether to return modules to be shown on all tabs or those to be shown on specified tabs</param>
	<returns>ArrayList of TabModuleInfo objects</returns>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModuleByDefinition(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Get ModuleInfo object of first module instance with a given friendly name of the module definition
 </summary>
	<param name="PortalId">ID of the portal, where to look for the module</param>
	<param name="FriendlyName">friendly name of module definition</param>
	<returns>ModuleInfo of first module instance</returns>
	<remarks>preferably used for admin and host modules</remarks>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetSearchModules(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 For a portal get a list of all active module and tabmodule references that support iSearchable
 </summary>
	<param name="portalID">ID of the portal to be searched</param>
	<returns>Arraylist of ModuleInfo for modules supporting search.</returns>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetTabModules(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Get all Module references on a tab
 </summary>
	<param name="TabId"></param>
	<returns>Dictionary of ModuleID and ModuleInfo</returns>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.MoveModule(System.Int32,System.Int32,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 MoveModule moes a Module from one Tab to another including all the 
	TabModule settings
 </summary>
	<param name="moduleId">The Id of the module to move</param>
	<param name="fromTabId">The Id of the source tab</param>
	<param name="toTabId">The Id of the destination tab</param>
	<param name="toPaneName">The name of the Pane on the destination tab where the module will end up</param>
	<history>
 	[cnurse]	10/21/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateModule(DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Update module settings and permissions in database from ModuleInfo
 </summary>
	<param name="objModule">ModuleInfo of the module to update</param>
	<history>
    [sleupold]   2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateModuleOrder(System.Int32,System.Int32,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 set/change the module position within a pane on a page
 </summary>
	<param name="TabId">ID of the page</param>
	<param name="ModuleId">ID of the module on the page</param>
	<param name="ModuleOrder">position within the controls list on page, -1 if to be added at the end</param>
	<param name="PaneName">name of the pane, the module is placed in on the page</param>
	<history>
    [sleupold] 2007-09-24 commented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateTabModuleOrder(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 set/change all module's positions within a page
 </summary>
	<param name="TabId">ID of the page</param>
	<history>
    [sleupold]   2007-09-24 documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModuleTabs(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Get a list of all TabModule references of a module instance
 </summary>
	<param name="ModuleID">ID of the Module</param>
	<returns>ArrayList of ModuleInfo</returns>
	<history>
    [sleupold]   2007-09-24 documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModuleSettings(System.Int32)">
	<summary>
 read all settings for a module from ModuleSettings table
 </summary>
	<param name="ModuleId">ID of the module</param>
	<returns>(cached) hashtable containing all settings</returns>
	<remarks>TabModuleSettings are not included</remarks>
	<history>
    [sleupold] 2007-09-24 commented
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateModuleSetting(System.Int32,System.String,System.String)">
	<summary>
 Adds or updates a module's setting value
 </summary>
	<param name="ModuleId">ID of the module, the setting belongs to</param>
	<param name="SettingName">name of the setting property</param>
	<param name="SettingValue">value of the setting (String).</param>
	<remarks>empty SettingValue will remove the setting, if not preserveIfEmpty is true</remarks>
	<history>
    [sleupold] 2007-09-24 added removal for empty settings
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteModuleSetting(System.Int32,System.String)">
	<summary>
 Delete a Setting of a module instance
 </summary>
	<param name="ModuleId">ID of the affected module</param>
	<param name="SettingName">Name of the setting to be deleted</param>
	<history>
    [sleupold] 2007-09-24 documented
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteModuleSettings(System.Int32)">
	<summary>
 Delete all Settings of a module instance
 </summary>
	<param name="ModuleId">ID of the affected module</param>
	<history>
    [sleupold] 2007-09-24 documented
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.GetTabModuleSettings(System.Int32)">
	<summary>
 read all settings for a module on a page from TabModuleSettings Table
 </summary>
	<param name="TabModuleId">ID of the tabModule</param>
	<returns>(cached) hashtable containing all settings</returns>
	<remarks>ModuleSettings are not included</remarks>
	<history>
    [sleupold] 2007-09-24 documented
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateTabModuleSetting(System.Int32,System.String,System.String)">
	<summary>
 Adds or updates a module's setting value
 </summary>
	<param name="TabModuleId">ID of the tabmodule, the setting belongs to</param>
	<param name="SettingName">name of the setting property</param>
	<param name="SettingValue">value of the setting (String).</param>
	<remarks>empty SettingValue will relove the setting</remarks>
	<history>
    [sleupold] 2007-09-24 added removal for empty settings
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteTabModuleSetting(System.Int32,System.String)">
	<summary>
 Delete a specific setting of a tabmodule reference
 </summary>
	<param name="TabModuleId">ID of the affected tabmodule</param>
	<param name="SettingName">Name of the setting to remove</param>
	<history>
    [sleupold] 2007-09-24 documented
 </history>
</member><member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteTabModuleSettings(System.Int32)">
	<summary>
 Delete all settings of a tabmodule reference
 </summary>
	<param name="TabModuleId">ID of the affected tabmodule</param>
	<history>
    [sleupold] 2007-09-24 documented
 </history>
</member><member name="T:DotNetNuke.Entities.Modules.ModuleController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : ModuleController
 -----------------------------------------------------------------------------
 <summary>
 ModuleController provides the Business Layer for Modules
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ModuleControlID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module Control ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ModuleDefID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module Definition ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ControlTitle">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Control Title
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ControlType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Control Type
 </summary>
	<returns>A SecurityAccessLevel</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.IconFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Icon  Source
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.HelpURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Help URL
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ViewOrder">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the View Order
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ModuleControlInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.GetSchema">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlSchema for the ModuleControlInfo
 </summary>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.ReadXml(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a ModuleControlInfo from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.WriteXml(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a ModuleControlInfo to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.ModuleControlInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : ModuleControlInfo
 -----------------------------------------------------------------------------
 <summary>
 ModuleControlInfo provides the Entity Layer for Module Controls
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControls">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleControls gets a Dictionary of Module Controls from 
 the Cache.
 </summary>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControlsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleControlsCallBack gets a Dictionary of Module Controls from 
 the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.AddModuleControl(DotNetNuke.Entities.Modules.ModuleControlInfo)">
 -----------------------------------------------------------------------------
 <summary>
 AddModuleControl adds a new Module Control to the database
 </summary>
	<param name="objModuleControl">The Module Control to save</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.DeleteModuleControl(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteModuleControl deletes a Module Control in the database
 </summary>
	<param name="moduleControlID">The ID of the Module Control to delete</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControl(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleControl gets a single Module Control from the database
 </summary>
	<param name="moduleControlID">The ID of the Module Control to fetch</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControlsByModuleDefinitionID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleControl gets a Dictionary of Module Controls by Module Definition
 </summary>
	<param name="moduleDefID">The ID of the Module Definition</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControlByControlKey(System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModuleControlByControlKey gets a single Module Control from the database
 </summary>
	<param name="controlKey">The key for the control</param>
	<param name="moduleDefID">The ID of the Module Definition</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.SaveModuleControl(DotNetNuke.Entities.Modules.ModuleControlInfo,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 SaveModuleControl updates a Module Control in the database
 </summary>
	<param name="moduleControl">The Module Control to save</param>
	<param name="clearCache">A flag that determines whether to clear the host cache</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ModuleControlController.UpdateModuleControl(DotNetNuke.Entities.Modules.ModuleControlInfo)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateModuleControl updates a Module Control in the database
 </summary>
	<param name="objModuleControl">The Module Control to save</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.ModuleControlController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : ModuleControlController
 -----------------------------------------------------------------------------
 <summary>
 ModuleControlController provides the Business Layer for Module Controls
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Communications.IModuleCommunicator">
 -----------------------------------------------------------------------------
 <summary></summary>
	<remarks></remarks>
	<history>
 	[cniknet]	10/15/2004	Replaced public members with properties and removed
                             brackets from property names
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener.#ctor(System.Int32,DotNetNuke.Entities.Modules.Actions.ActionEventHandler)">
-----------------------------------------------------------------------------
 <summary>
	</summary>
	<param name="ModID"></param>
	<param name="e"></param>
	<remarks></remarks>
	<history>
 	[jbrinkman] 	12/27/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener.ModuleID">
-----------------------------------------------------------------------------
 <summary>
	</summary>
	<value></value>
	<remarks></remarks>
	<history>
 	[jbrinkman] 	12/27/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener.ActionEvent">
-----------------------------------------------------------------------------
 <summary>
	</summary>
	<value></value>
	<remarks></remarks>
	<history>
 	[jbrinkman] 	12/27/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Class		: ModuleActionEventListener

-----------------------------------------------------------------------------
 <summary>
	</summary>
	<remarks></remarks>
	<history>
 	[jbrinkman] 	12/27/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.#ctor">
-----------------------------------------------------------------------------
 <summary>
 Initializes a new, empty instance of the <see cref="T:DotNetNuke.ModuleActionCollection"/> class.
 </summary>
	<remarks>The default constructor creates an empty collection of <see cref="T:DotNetNuke.ModuleAction"/>
  objects.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.#ctor(DotNetNuke.Entities.Modules.Actions.ModuleActionCollection)">
-----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.ModuleActionCollection"/>
  class containing the elements of the specified source collection.
 </summary>
	<param name="value">A <see cref="T:DotNetNuke.ModuleActionCollection"/> with which to initialize the collection.</param>
	<remarks>This overloaded constructor copies the <see cref="T:DotNetNuke.ModuleAction"/>s
  from the indicated collection.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.#ctor(DotNetNuke.Entities.Modules.Actions.ModuleAction[])">
 -----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.ModuleActionCollection"/>
  class containing the specified array of <see cref="T:DotNetNuke.ModuleAction"/> objects.
 </summary>
	<param name="value">An array of <see cref="T:DotNetNuke.ModuleAction"/> objects 
 with which to initialize the collection. </param>
	<remarks>This overloaded constructor copies the <see cref="T:DotNetNuke.ModuleAction"/>s
  from the indicated array.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Item(System.Int32)">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets the <see cref="T:DotNetNuke.ModuleActionCollection"/> at the 
 specified index in the collection.
 <para>
 In VB.Net, this property is the indexer for the <see cref="T:DotNetNuke.ModuleActionCollection"/> class.
 </para>
	</summary>
	<param name="index">The index of the collection to access.</param>
	<value>A <see cref="T:DotNetNuke.ModuleAction"/> at each valid index.</value>
	<remarks>This method is an indexer that can be used to access the collection.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
-----------------------------------------------------------------------------
 <summary>
 Add an element of the specified <see cref="T:DotNetNuke.ModuleAction"/> to the end of the collection.
 </summary>
	<param name="value">An object of type <see cref="T:DotNetNuke.ModuleAction"/> to add to the collection.</param>
	<returns>The index of the newly added <see cref="T:DotNetNuke.ModuleAction"/></returns>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.SecurityAccessLevel,System.Boolean,System.Boolean)">
-----------------------------------------------------------------------------
 <summary>
 Add an element of the specified <see cref="T:DotNetNuke.ModuleAction"/> to the end of the collection.
 </summary>
	<param name="ID">This is the identifier to use for this action.</param>
	<param name="Title">This is the title that will be displayed for this action</param>
	<param name="CmdName">The command name passed to the client when this action is 
 clicked.</param>
	<param name="CmdArg">The command argument passed to the client when this action is 
 clicked.</param>
	<param name="Icon">The URL of the Icon to place next to this action</param>
	<param name="Url">The destination URL to redirect the client browser when this 
 action is clicked.</param>
	<param name="UseActionEvent">Determines whether client will receive an event
 notification</param>
	<param name="Secure">The security access level required for access to this action</param>
	<param name="Visible">Whether this action will be displayed</param>
	<returns>The index of the newly added <see cref="T:DotNetNuke.ModuleAction"/></returns>
	<remarks>This method creates a new <see cref="T:DotNetNuke.ModuleAction"/> with the specified
 values, adds it to the collection and returns the index of the newly created ModuleAction.</remarks>
	<history>
 	[Joe] 	10/18/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.SecurityAccessLevel,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Add an element of the specified <see cref="T:DotNetNuke.ModuleAction"/> to the end of the collection.
 </summary>
	<param name="ID">This is the identifier to use for this action.</param>
	<param name="Title">This is the title that will be displayed for this action</param>
	<param name="CmdName">The command name passed to the client when this action is 
 clicked.</param>
	<param name="CmdArg">The command argument passed to the client when this action is 
 clicked.</param>
	<param name="Icon">The URL of the Icon to place next to this action</param>
	<param name="Url">The destination URL to redirect the client browser when this 
 action is clicked.</param>
	<param name="ClientScript">Client side script to be run when the this action is 
 clicked.</param>
	<param name="UseActionEvent">Determines whether client will receive an event
 notification</param>
	<param name="Secure">The security access level required for access to this action</param>
	<param name="Visible">Whether this action will be displayed</param>
	<returns>The index of the newly added <see cref="T:DotNetNuke.ModuleAction"/></returns>
	<remarks>This method creates a new <see cref="T:DotNetNuke.ModuleAction"/> with the specified
 values, adds it to the collection and returns the index of the newly created ModuleAction.</remarks>
         ''' <history>
 	[jbrinkman]	5/22/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.AddRange(DotNetNuke.Entities.Modules.Actions.ModuleAction[])">
-----------------------------------------------------------------------------
 <summary>
 Copies the elements of the specified <see cref="T:DotNetNuke.ModuleAction"/>
  array to the end of the collection.
 </summary>
	<param name="value">An array of type <see cref="T:DotNetNuke.ModuleAction"/>
  containing the objects to add to the collection.</param>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.AddRange(DotNetNuke.Entities.Modules.Actions.ModuleActionCollection)">
-----------------------------------------------------------------------------
 <summary>
 Adds the contents of another <see cref="T:DotNetNuke.ModuleActionCollection"/>
  to the end of the collection.
 </summary>
	<param name="value">A <see cref="T:DotNetNuke.ModuleActionCollection"/> containing 
 the objects to add to the collection. </param>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Contains(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
-----------------------------------------------------------------------------
 <summary>
 Gets a value indicating whether the collection contains the specified <see cref="T:DotNetNuke.ModuleAction"/>.
 </summary>
	<param name="value">The <see cref="T:DotNetNuke.ModuleAction"/> to search for in the collection.</param>
	<returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
	<example>
		<code>
 ' Tests for the presence of a ModuleAction in the 
 ' collection, and retrieves its index if it is found.
 Dim testModuleAction = New ModuleAction(5, "Edit Action", "Edit")
 Dim itemIndex As Integer = -1
 If collection.Contains(testModuleAction) Then
    itemIndex = collection.IndexOf(testModuleAction)
 End If
 </code>
	</example>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.IndexOf(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
-----------------------------------------------------------------------------
 <summary>
 Gets the index in the collection of the specified <see cref="T:DotNetNuke.ModuleActionCollection"/>, 
 if it exists in the collection.
 </summary>
	<param name="value">The <see cref="T:DotNetNuke.ModuleAction"/> to locate in the collection.</param>
	<returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
	<example> This example tests for the presense of a ModuleAction in the
 collection, and retrieves its index if it is found.
 <code>
   Dim testModuleAction = New ModuleAction(5, "Edit Action", "Edit")
   Dim itemIndex As Integer = -1
   If collection.Contains(testModuleAction) Then
     itemIndex = collection.IndexOf(testModuleAction)
   End If
 </code>
	</example>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Insert(System.Int32,DotNetNuke.Entities.Modules.Actions.ModuleAction)">
-----------------------------------------------------------------------------
 <summary>
 Add an element of the specified <see cref="T:DotNetNuke.ModuleAction"/> to the 
 collection at the designated index.
 </summary>
	<param name="index">An <see cref="T:system.int32">Integer</see> to indicate the location to add the object to the collection.</param>
	<param name="value">An object of type <see cref="T:DotNetNuke.ModuleAction"/> to add to the collection.</param>
	<example>
		<code>
 ' Inserts a ModuleAction at index 0 of the collection. 
 collection.Insert(0, New ModuleAction(5, "Edit Action", "Edit"))
 </code>
	</example>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Remove(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
----------------------------------------------------------------------------- 
 <summary>
 Remove the specified object of type <see cref="T:DotNetNuke.ModuleAction"/> from the collection.
 </summary>
	<param name="value">An object of type <see cref="T:DotNetNuke.ModuleAction"/> to remove from the collection.</param>
	<example>
		<code>
 ' Removes the specified ModuleAction from the collection. 
 Dim testModuleAction = New ModuleAction(5, "Edit Action", "Edit")
 collection.Remove(testModuleAction)
 </code>
	</example>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Class		: ModuleActionCollection
-----------------------------------------------------------------------------
 <summary>
 Represents a collection of <see cref="T:DotNetNuke.ModuleAction"/> objects.
 </summary>
	<remarks>The ModuleActionCollection is a custom collection of ModuleActions.
 Each ModuleAction in the collection has it's own <see cref="P:DotNetNuke.ModuleAction.Actions"/>
  collection which provides the ability to create a heirarchy of ModuleActions.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleAction.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.SecurityAccessLevel,System.Boolean,System.Boolean)">
-----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.ModuleAction"/> class
 using the specified parameters
 </summary>
	<param name="ID">This is the identifier to use for this action.</param>
	<param name="Title">This is the title that will be displayed for this action</param>
	<param name="CmdName">The command name passed to the client when this action is 
 clicked.</param>
	<param name="CmdArg">The command argument passed to the client when this action is 
 clicked.</param>
	<param name="Icon">The URL of the Icon to place next to this action</param>
	<param name="Url">The destination URL to redirect the client browser when this 
 action is clicked.</param>
	<param name="UseActionEvent">Determines whether client will receive an event
 notification</param>
	<param name="Secure">The security access level required for access to this action</param>
	<param name="Visible">Whether this action will be displayed</param>
	<remarks>The moduleaction constructor is used to set the various properties of 
 the <see cref="T:DotNetNuke.ModuleAction"/> class at the time the instance is created.
 </remarks>
	<history>
 	[Joe] 	        10/26/2003	Created
 	[Nik Kalyani]	10/15/2004	Created multiple signatures to eliminate Optional parameters
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ModuleAction.HasChildren">
-----------------------------------------------------------------------------
 <summary>
 Determines whether the action node contains any child actions.
 </summary>
	<returns>True if child actions exist, false if child actions do not exist.</returns>
	<remarks>Each action may contain one or more child actions in the
 <see cref="P:DotNetNuke.ModuleAction.Actions"/> property.  When displayed via
 the <see cref="T:DotNetNuke.Containers.Actions"/> control, these subactions are
 shown as sub-menus.</remarks>
	<history>
 	[Joe] 	10/26/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Actions">
-----------------------------------------------------------------------------
 <summary>
 The Actions property allows the user to create a heirarchy of actions, with
 each action having sub-actions.
 </summary>
	<value>Returns a collection of ModuleActions.</value>
	<remarks>Each action may contain one or more child actions.  When displayed via
 the <see cref="T:DotNetNuke.Containers.Actions"/> control, these subactions are
 shown as sub-menus.  If other Action controls are implemented, then
 sub-actions may or may not be supported for that control type.</remarks>
	<history>
 	[Joe] 	10/26/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.ID">
-----------------------------------------------------------------------------
 <summary>
 A Module Action ID is a identifier that can be used in a Module Action Collection
 to find a specific Action. 
 </summary>
	<value>The integer ID of the current <see cref="T:DotNetNuke.ModuleAction"/>.</value>
	<remarks>When building a heirarchy of <see cref="T:DotNetNuke.ModuleAction">ModuleActions</see>, 
 the ID is used to link the child and parent actions.</remarks>
	<history>
 	[Joe] 	10/18/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Visible">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the current action should be displayed.
 </summary>
	<value>A boolean value that determines if the current action should be displayed</value>
	<remarks>If Visible is false, then the action is always hidden.  If Visible
 is true then the action may be visible depending on the security access rights
 specified by the <see cref="P:DotNetNuke.ModuleAction.Secure"/> property.  By
 utilizing a custom method in your module, you can encapsulate specific business
 rules to determine if the Action should be visible.</remarks>
	<history>
 	[Joe] 	10/26/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Secure">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets the value indicating the <see cref="T:DotnetNuke.SecurityAccessLevel"/> that is required
 to access this <see cref="T:DotNetNuke.ModuleAction"/>.
 </summary>
	<value>The value indicating the <see cref="T:DotnetNuke.SecurityAccessLevel"/> that is required
 to access this <see cref="T:DotNetNuke.ModuleAction"/></value>
	<remarks>The security access level determines the roles required by the current user in
 order to access this module action.</remarks>
	<history>
 	[jbrinkman] 	12/27/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.CommandName">
-----------------------------------------------------------------------------
 <summary>
 A Module Action CommandName represents a string used by the ModuleTitle to notify
 the parent module that a given Module Action was selected in the Module Menu.
 </summary>
	<value>The name of the command to perform.</value>
	<remarks>
 Use the CommandName property to determine the command to perform. The CommandName 
 property can contain any string set by the programmer. The programmer can then 
 identify the command name in code and perform the appropriate tasks.
 </remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.CommandArgument">
-----------------------------------------------------------------------------
 <summary>
 A Module Action CommandArgument provides additional information and 
 complements the CommandName.
 </summary>
	<value>A string that contains the argument for the command.</value>
	<remarks>
 The CommandArgument can contain any string set by the programmer. The 
 CommandArgument property complements the <see cref="P:DotNetNuke.ModuleAction.CommandName"/> 
  property by allowing you to provide any additional information for the command. 
 For example, you can set the CommandName property to "Sort" and set the 
 CommandArgument property to "Ascending" to specify a command to sort in ascending 
 order.
 </remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Title">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets the string that is displayed in the Module Menu
 that represents a given menu action.
 </summary>
	<value>The string value that is displayed to represent the module action.</value>
	<remarks>The title property is displayed by the Actions control for each module
 action.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Icon">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL for the icon file that is displayed for the given 
 <see cref="T:DotNetNuke.ModuleAction"/>.
 </summary>
	<value>The URL for the icon that is displayed with the module action.</value>
	<remarks>The URL for the icon is a simple string and is not checked for formatting.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Url">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets the URL to which the user is redirected when the 
 associated Module Menu Action is selected.  
 </summary>
	<value>The URL to which the user is redirected when the 
 associated Module Menu Action is selected.</value>
	<remarks>If the URL is present then the Module Action Event is not fired.  
 If the URL is empty then the Action Event is fired and is passed the value 
 of the associated Command property.</remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.ClientScript">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets javascript which will be run in the clients browser
 when the associated Module menu Action is selected. prior to a postback.
 </summary>
	<value>The Javascript which will be run during the menuClick event</value>
	<remarks>If the ClientScript property is present then it is called prior
 to the postback occuring. If the ClientScript returns false then the postback
 is canceled.  If the ClientScript is empty then the Action Event is fired and 
 is passed the value of the associated Command property.</remarks>
	<history>
 	[jbrinkman]	5/21/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.UseActionEvent">
	<summary>
 Gets or sets a value that determines if a local ActionEvent is fired when the 
 <see cref="T:DotNetNuke.ModuleAction"/> contains a URL. 
 </summary>
	<value>A boolean indicating whether to fire the ActionEvent.</value>
	<remarks>When a MenuAction is clicked, an event is fired within the Actions 
 control.  If the UseActionEvent is true then the Actions control will forward
 the event to the parent skin which will then attempt to raise the event to
 the appropriate module.  If the UseActionEvent is false, and the URL property
 is set, then the Actions control will redirect the response to the URL.  In
 all cases, an ActionEvent is raised if the URL is not set.</remarks>
	<history>
 	[jbrinkman] 	12/22/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.NewWindow">
-----------------------------------------------------------------------------
 <summary>
 Gets or sets a value that determines if a new window is opened when the 
 DoAction() method is called. 
 </summary>
	<value>A boolean indicating whether to open a new window.</value>
	<remarks></remarks>
	<history>
 	[jbrinkman] 	12/22/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Actions.ModuleAction">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Class		: ModuleAction
-----------------------------------------------------------------------------
 <summary>
 Each Module Action represents a separate functional action as defined by the
 associated module.
 </summary>
	<remarks>A module action is used to define a specific function for a given module.
 Each module can define one or more actions which the portal will present to the
 user.  These actions may be presented as a menu, a dropdown list or even a group
 of linkbuttons.
 <seealso cref="T:DotNetNuke.ModuleActionCollection"/></remarks>
	<history>
 	[Joe] 	10/9/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.DesktopModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ID of the Desktop Module
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.PackageID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ID of the Package for this Desktop Module
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.CodeSubDirectory">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the AppCode Folder Name of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	02/20/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.BusinessControllerClass">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the BusinessControllerClass of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.CompatibleVersions">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a Regular Expression that matches the versions of the core
 that this module is compatible with
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Dependencies">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a list of Dependencies for the module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Description">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the  Description of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.FolderName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Folder Name of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.FriendlyName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Friendly Name of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsAdmin">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Module is an Admin Module
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsPortable">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Module is Portable
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsPremium">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Module is a Premium Module
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsSearchable">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Module is Searchable
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsUpgradeable">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Module is Upgradable
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.ModuleDefinitions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Module Definitions for this Desktop Module
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.ModuleName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the  Name of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Permissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a list of Permissions for the module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.SupportedFeatures">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Supported Features of the Module
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Version">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Version of the Desktop Module
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ClearFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature)">
 -----------------------------------------------------------------------------
 <summary>
 Clears a Feature from the Features
 </summary>
	<param name="Feature">The feature to Clear</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.GetFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Feature from the Features
 </summary>
	<param name="Feature">The feature to Get</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.SetFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature)">
 -----------------------------------------------------------------------------
 <summary>
 Sets a Feature in the Features
 </summary>
	<param name="Feature">The feature to Set</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.UpdateFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Feature in the Features
 </summary>
	<param name="Feature">The feature to Set</param>
	<param name="IsSet">A Boolean indicating whether to set or clear the feature</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a DesktopModuleInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/11/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/11/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.GetSchema">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlSchema for the DesktopModule
 </summary>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ReadSupportedFeatures(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a Supported Features from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ReadModuleDefinitions(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a Module Definitions from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ReadXml(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a DesktopModuleInfo from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.WriteXml(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a DesktopModuleInfo to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter to use</param>
	<history>
 	[cnurse]	01/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.DesktopModuleInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : DesktopModuleInfo
 -----------------------------------------------------------------------------
 <summary>
 DesktopModuleInfo provides the Entity Layer for Desktop Modules
 </summary>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModulesByPortalCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModulesByPortalCallBack gets a Dictionary of Desktop Modules by 
 Portal from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/13/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.DeleteDesktopModule(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteDesktopModule deletes a Desktop Module
 </summary>
	<param name="moduleName">The Name of the Desktop Module to delete</param>
	<history>
 	[cnurse]	05/14/2009   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModule(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModule gets a Desktop Module by its ID
 </summary>
	<remarks>This method uses the cached Dictionary of DesktopModules.  It first checks
 if the DesktopModule is in the cache.  If it is not in the cache it then makes a call
 to the Dataprovider.</remarks>
	<param name="desktopModuleID">The ID of the Desktop Module to get</param>
	<param name="portalID">The ID of the portal</param>
	<history>
 	[cnurse]	01/13/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModuleByPackageID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModuleByPackageID gets a Desktop Module by its Package ID
 </summary>
	<param name="packageID">The ID of the Package</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModuleByModuleName(System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModuleByModuleName gets a Desktop Module by its Name
 </summary>
	<remarks>This method uses the cached Dictionary of DesktopModules.  It first checks
 if the DesktopModule is in the cache.  If it is not in the cache it then makes a call
 to the Dataprovider.</remarks>
	<param name="moduleName">The name of the Desktop Module to get</param>
	<param name="portalID">The ID of the portal</param>
	<history>
 	[cnurse]	01/13/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModules(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModules gets a Dictionary of Desktop Modules
 </summary>
	<param name="portalID">The ID of the Portal (Use PortalID = Null.NullInteger (-1) to get
 all the DesktopModules including Modules not allowed for the current portal</param>
	<history>
 	[cnurse]	01/13/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.SaveDesktopModule(DotNetNuke.Entities.Modules.DesktopModuleInfo,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 SaveDesktopModule saves the Desktop Module to the database
 </summary>
	<param name="desktopModule">The Desktop Module to save</param>
	<param name="saveChildren">A flag that determines whether the child objects are also saved</param>
	<param name="clearCache">A flag that determines whether to clear the host cache</param>
	<history>
 	[cnurse]	01/13/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.AddDesktopModule(DotNetNuke.Entities.Modules.DesktopModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 AddDesktopModule adds a new Desktop Module to the database
 </summary>
	<param name="objDesktopModule">The Desktop Module to save</param>
	<history>
 	[cnurse]	01/11/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.DeleteDesktopModule(DotNetNuke.Entities.Modules.DesktopModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteDesktopModule deletes a Desktop Module
 </summary>
	<param name="objDesktopModule">The Desktop Module to delete</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.DeleteDesktopModule(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteDesktopModule deletes a Desktop Module By ID
 </summary>
	<param name="desktopModuleID">The ID of the Desktop Module to delete</param>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.UpdateDesktopModule(DotNetNuke.Entities.Modules.DesktopModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateDesktopModule saves the Desktop Module to the database
 </summary>
	<param name="objDesktopModule">The Desktop Module to save</param>
	<history>
 	[cnurse]	01/11/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.DesktopModuleController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : DesktopModuleController
 -----------------------------------------------------------------------------
 <summary>
 DesktopModuleController provides the Busines Layer for Desktop Modules
 </summary>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.Actions.ActionEventArgs.#ctor(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.Entities.Modules.ModuleInfo)">
-----------------------------------------------------------------------------
 <summary>
	</summary>
	<param name="Action"></param>
	<param name="ModuleConfiguration"></param>
	<remarks></remarks>
	<history>
 	[Joe] 	10/26/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ActionEventArgs.Action">
-----------------------------------------------------------------------------
 <summary>
	</summary>
	<value></value>
	<remarks></remarks>
	<history>
 	[Joe] 	10/26/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.Actions.ActionEventArgs.ModuleConfiguration">
-----------------------------------------------------------------------------
 <summary>
	</summary>
	<value></value>
	<remarks></remarks>
	<history>
 	[jbrinkman] 	12/27/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Actions.ActionEventArgs">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Namespace   : DotNetNuke.Entities.Modules.Actions
 Class		: ActionEventArgs
-----------------------------------------------------------------------------
 <summary>
 ActionEventArgs provides a custom EventARgs class for Action Events
 </summary>
	<remarks></remarks>
	<history>
 	[Joe] 	10/26/2003	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Localization.CultureDropDownTypes">
	<summary>
		<para>CultureDropDownTypes allows the user to specify which culture name is displayed in the drop down list that is filled 
 by using one of the helper methods.</para>
	</summary>
</member><member name="P:DotNetNuke.Services.Localization.Localization.CurrentCulture">
 -----------------------------------------------------------------------------
 <summary>
 The CurrentCulture returns the current Culture being used
 is 'key'.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Localization.Localization.KeyName">
 -----------------------------------------------------------------------------
 <summary>
 The KeyName property returns and caches the name of the key attribute used to lookup resources.
 This can be configured by setting ResourceManagerKey property in the web.config file. The default value for this property
 is 'key'.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Localization.Localization.ShowMissingKeys">
 -----------------------------------------------------------------------------
 <summary>
 The ShowMissingKeys property returns the web.config setting that determines 
 whether to render a visual indicator that a key is missing
 is 'key'.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/20/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetLocalesCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetLocalesCallBack gets a Dictionary of Locales by 
 Portal from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetResourceFileName(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetResourceFileName is used to build the resource file name according to the
 language
 </summary>
	<param name="language">The language</param>
	<param name="ResourceFileRoot">The resource file root</param>
	<returns>The language specific resource file</returns>
	<history>
 	[cnurse]	10/06/2004	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.LocalizeDataControlField(System.Web.UI.WebControls.DataControlField,System.String)">
	<summary>
 Provides localization support for DataControlFields used in DetailsView and GridView controls
 </summary>
	<param name="controlField">The field control to localize</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<remarks>
 The header of the DataControlField is localized.
 It also localizes text for following controls: ButtonField, CheckBoxField, CommandField, HyperLinkField, ImageField
 </remarks>
</member><member name="M:DotNetNuke.Services.Localization.Localization.TimeZoneFile(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns the TimeZone file name for a given resource and language
 </summary>
	<param name="filename">Resource File</param>
	<param name="language">Language</param>
	<returns>Localized File Name</returns>
	<remarks>
	</remarks>
	<history>
 	[vmasanas]	04/10/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.TryGetFromResourceFile(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String@)">
 -----------------------------------------------------------------------------
 <summary>
 TryGetFromResourceFile is used to get the string from a resource file
 </summary>
	<remarks>This method searches a resource file for the key.  It first checks the 
 user's language, then the fallback language and finally the default language.
 </remarks>
	<param name="key">The resource key</param>
	<param name="resourceFile">The resource file to search</param>
	<param name="userLanguage">The user's language</param>
	<param name="fallbackLanguage">The fallback language for the user's language</param>
	<param name="defaultLanguage">The portal's default language</param>
	<param name="portalID">The id of the portal</param>
	<param name="resourceValue">The resulting resource value - returned by reference</param>
	<returns>True if successful, false if not found</returns>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.TryGetFromResourceFile(System.String,System.String,System.Int32,System.String@)">
 -----------------------------------------------------------------------------
 <summary>
 TryGetFromResourceFile is used to get the string from a resource file
 </summary>
	<remarks>This method searches a specific language version of the resource file for 
 the key.  It first checks the Portal version, then the Host version and finally
 the Application version</remarks>
	<param name="key">The resource key</param>
	<param name="resourceFile">The resource file to search</param>
	<param name="portalID">The id of the portal</param>
	<param name="resourceValue">The resulting resource value - returned by reference</param>
	<returns>True if successful, false if not found</returns>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.TryGetFromResourceFile(System.String,System.String,System.Int32,DotNetNuke.Services.Localization.Localization.CustomizedLocale,System.String@)">
 -----------------------------------------------------------------------------
 <summary>
 TryGetFromResourceFile is used to get the string from a specific resource file
 </summary>
	<remarks>This method searches a specific resource file for  the key.</remarks>
	<param name="key">The resource key</param>
	<param name="resourceFile">The resource file to search</param>
	<param name="portalID">The id of the portal</param>
	<param name="resourceValue">The resulting resource value - returned by reference</param>
	<param name="resourceType">An enumerated CustomizedLocale - Application - 0, 
 Host - 1, Portal - 2 - that identifies the file to search</param>
	<returns>True if successful, false if not found</returns>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.TryGetStringInternal(System.String,System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String@)">
 -----------------------------------------------------------------------------
 <summary>
 TryGetStringInternal is used to get the string from a resource file
 </summary>
	<remarks>This method searches a resource file for the key.  It first checks the 
 user's language, then the fallback language and finally the default language.
 </remarks>
	<param name="key">The resource key</param>
	<param name="userLanguage">The user's language</param>
	<param name="resourceFile">The resource file to search</param>
	<param name="objPortalSettings">The portal settings</param>
	<param name="resourceValue">The resulting resource value - returned by reference</param>
	<returns>True if successful, false if not found</returns>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<param name="objPortalSettings">The current portals Portal Settings</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<param name="ResourceFileRoot">The Local Resource root</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<param name="ResourceFileRoot">The Local Resource root</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<param name="ResourceFileRoot">The Local Resource root</param>
	<param name="strLanguage">A specific language to lookup the string</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<param name="ResourceFileRoot">The Local Resource root</param>
	<param name="objPortalSettings">The current portals Portal Settings</param>
	<param name="strLanguage">A specific language to lookup the string</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <overloads>One of six overloads</overloads>
	<summary>
 GetString gets the localized string corresponding to the resourcekey
 </summary>
	<param name="key">The resourcekey to find</param>
	<param name="resourceFileRoot">The Local Resource root</param>
	<param name="objPortalSettings">The current portals Portal Settings</param>
	<param name="userLanguage">A specific language to lookup the string</param>
	<param name="disableShowMissingKeys">Disables the show missing keys flag</param>
	<returns>The localized Text</returns>
	<history>
 	[cnurse]	10/06/2004	Documented
     [cnurse]    01/30/2008  Refactored to use Dictionaries and to cahe the portal and host 
                             customisations and language versions separately
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetStringUrl(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetStringUrl gets the localized string corresponding to the resourcekey
 </summary>
	<param name="name">The resourcekey to find</param>
	<param name="ResourceFileRoot">The Local Resource root</param>
	<returns>The localized Text</returns>
	<remarks>
 This function should be used to retrieve strings to be used on URLs.
 It is the same as <see cref="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.Web.UI.Control)">GetString(name,ResourceFileRoot</see> method
 but it disables the ShowMissingKey flag, so even it testing scenarios, the correct string
 is returned
 </remarks>
	<history>
 	[vmasanas]	11/21/2006	Added
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage.
 </summary>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Supported tags:
 - All fields from HostSettings table in the form of: [Host:<b>field</b>]
 - All properties defined in <see cref="T:DotNetNuke.PortalInfo"/> in the form of: [Portal:<b>property</b>]
 - [Portal:URL]: The base URL for the portal
 - All properties defined in <see cref="T:DotNetNuke.UserInfo"/> in the form of: [User:<b>property</b>]
 - All values stored in the user profile in the form of: [Profile:<b>key</b>]
 - [User:VerificationCode]: User verification code for verified registrations
 - [Date:Current]: Current date
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage.
 </summary>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Supported tags:
 - All fields from HostSettings table in the form of: [Host:<b>field</b>]
 - All properties defined in <see cref="T:DotNetNuke.PortalInfo"/> in the form of: [Portal:<b>property</b>]
 - [Portal:URL]: The base URL for the portal
 - All properties defined in <see cref="T:DotNetNuke.UserInfo"/> in the form of: [User:<b>property</b>]
 - All values stored in the user profile in the form of: [Profile:<b>key</b>]
 - [User:VerificationCode]: User verification code for verified registrations
 - [Date:Current]: Current date
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
         ''' Gets a SystemMessage.
 </summary>
	<param name="strLanguage">A specific language to get the SystemMessage for.</param>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Supported tags:
 - All fields from HostSettings table in the form of: [Host:<b>field</b>]
 - All properties defined in <see cref="T:DotNetNuke.PortalInfo"/> in the form of: [Portal:<b>property</b>]
 - [Portal:URL]: The base URL for the portal
 - All properties defined in <see cref="T:DotNetNuke.UserInfo"/> in the form of: [User:<b>property</b>]
 - All values stored in the user profile in the form of: [Profile:<b>key</b>]
 - [User:VerificationCode]: User verification code for verified registrations
 - [Date:Current]: Current date
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage.
 </summary>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Supported tags:
 - All fields from HostSettings table in the form of: [Host:<b>field</b>]
 - All properties defined in <see cref="T:DotNetNuke.PortalInfo"/> in the form of: [Portal:<b>property</b>]
 - [Portal:URL]: The base URL for the portal
 - All properties defined in <see cref="T:DotNetNuke.UserInfo"/> in the form of: [User:<b>property</b>]
 - All values stored in the user profile in the form of: [Profile:<b>key</b>]
 - [User:VerificationCode]: User verification code for verified registrations
 - [Date:Current]: Current date
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage.
 </summary>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Supported tags:
 - All fields from HostSettings table in the form of: [Host:<b>field</b>]
 - All properties defined in <see cref="T:DotNetNuke.PortalInfo"/> in the form of: [Portal:<b>property</b>]
 - [Portal:URL]: The base URL for the portal
 - All properties defined in <see cref="T:DotNetNuke.UserInfo"/> in the form of: [User:<b>property</b>]
 - All values stored in the user profile in the form of: [Profile:<b>key</b>]
 - [User:VerificationCode]: User verification code for verified registrations
 - [Date:Current]: Current date
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage passing extra custom parameters to personalize.
 </summary>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<param name="Custom">An ArrayList with replacements for custom tags.</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
 will be used to find the replacement value in <b>Custom</b> parameter.
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
     [cnurse]    10/06/2004  Moved from SystemMessages to Localization
     [DanCaron]  10/27/2004  Simplified Profile replacement, added Membership replacement
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage passing extra custom parameters to personalize.
 </summary>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<param name="Custom">An ArrayList with replacements for custom tags.</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
 will be used to find the replacement value in <b>Custom</b> parameter.
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
     [cnurse]    10/06/2004  Moved from SystemMessages to Localization
     [DanCaron]  10/27/2004  Simplified Profile replacement, added Membership replacement
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage passing extra custom parameters to personalize.
 </summary>
	<param name="strLanguage">A specific language to get the SystemMessage for.</param>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<param name="Custom">An ArrayList with replacements for custom tags.</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
 will be used to find the replacement value in <b>Custom</b> parameter.
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
     [cnurse]    10/06/2004  Moved from SystemMessages to Localization
     [DanCaron]  10/27/2004  Simplified Profile replacement, added Membership replacement
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage passing extra custom parameters to personalize.
 </summary>
	<param name="strLanguage">A specific language to get the SystemMessage for.</param>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<param name="Custom">An ArrayList with replacements for custom tags.</param>
	<param name="CustomCaption">prefix for custom tags</param>
	<param name="AccessingUserID">UserID of the user accessing the system message</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
 will be used to find the replacement value in <b>Custom</b> parameter.
 </remarks>
	<history>
 	[Vicenç]	05/07/2004	Documented
     [cnurse]    10/06/2004  Moved from SystemMessages to Localization
     [DanCaron]  10/27/2004  Simplified Profile replacement, added Membership replacement
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList,System.Collections.IDictionary,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SystemMessage passing extra custom parameters to personalize.
 </summary>
	<param name="strLanguage">A specific language to get the SystemMessage for.</param>
	<param name="objPortal">The portal settings for the portal to which the message will affect.</param>
	<param name="MessageName">The message tag which identifies the SystemMessage.</param>
	<param name="objUser">Reference to the user used to personalize the message.</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<param name="CustomArray">An ArrayList with replacements for custom tags.</param>
	<param name="CustomDictionary">An IDictionary with replacements for custom tags.</param>
	<param name="CustomCaption">prefix for custom tags</param>
	<param name="AccessingUserID">UserID of the user accessing the system message</param>
	<returns>The message body with all tags replaced.</returns>
	<remarks>
 Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
 will be used to find the replacement value in <b>Custom</b> parameter.
 </remarks>
	<history>
     [cnurse]    09/09/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.LoadCultureDropDownList(System.Web.UI.WebControls.DropDownList,DotNetNuke.Services.Localization.CultureDropDownTypes,System.String)">
	<summary>
		<para>LoadCultureDropDownList loads a DropDownList with the list of supported cultures
 based on the languages defined in the supported locales file</para>
	</summary>
	<param name="list">DropDownList to load</param>
	<param name="displayType">Format of the culture to display. Must be one the CultureDropDownTypes values. 
 <see cref="T:DotNetNuke.Services.Localization.CultureDropDownTypes"/> for list of allowable values</param>
	<param name="selectedValue">Name of the default culture to select</param>
</member><member name="M:DotNetNuke.Services.Localization.Localization.LoadTimeZoneDropDownList(System.Web.UI.WebControls.DropDownList,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 LoadTimeZoneDropDownList loads a drop down list with the Timezones
 </summary>
	<param name="list">The list to load</param>
	<param name="language">Language</param>
	<param name="selectedValue">The selected Time Zone</param>
	<history>
 	[cnurse]	10/29/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.LocalizeControlTitle(DotNetNuke.UI.Modules.IModuleControl)">
 -----------------------------------------------------------------------------
 <summary>
 Localizes ModuleControl Titles
 </summary>
	<param name="moduleControl">ModuleControl</param>
	<returns>
 Localized control title if found
 </returns>
	<remarks>
 Resource keys are: ControlTitle_[key].Text
 Key MUST be lowercase in the resource file
 </remarks>
	<history>
 	[vmasanas]	08/11/2004	Created
     [cnurse]    11/28/2008  Modified Signature
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.LocalizeDataGrid(System.Web.UI.WebControls.DataGrid@,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 LocalizeDataGrid creates localized Headers for a DataGrid
 </summary>
	<param name="grid">Grid to localize</param>
	<param name="ResourceFile">The root name of the Resource File where the localized
   text can be found</param>
	<history>
 	[cnurse]	9/10/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.Localization.LocalizeDetailsView(System.Web.UI.WebControls.DetailsView@,System.String)">
	<summary>
 Localizes headers and fields on a DetailsView control
 </summary>
	<param name="detailsView"></param>
	<param name="resourceFile">The root name of the resource file where the localized
  texts can be found</param>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Localization.Localization.LocalizeGridView(System.Web.UI.WebControls.GridView@,System.String)">
	<summary>
 Localizes headers and fields on a GridView control
 </summary>
	<param name="gridView">Grid to localize</param>
	<param name="resourceFile">The root name of the resource file where the localized
  texts can be found</param>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Localization.Localization.LocalizeRole(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Localizes the "Built In" Roles
 </summary>
	<remarks>
 Localizes:
 -DesktopTabs
 -BreadCrumbs
 </remarks>
	<history>
 	[cnurse]	02/01/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Localization.Locale">
	<summary>
		<para>The Locale class is a custom business object that represents a locale, which is the language and country combination.</para>
	</summary>
</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.AuthenticationID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the ID of the Authentication System
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.PackageID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the PackageID for the Authentication System
 </summary>
	<history>
 	[cnurse]	07/31/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.IsEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets a flag that determines whether the Authentication System is enabled
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.AuthenticationType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the type (name) of the Authentication System (eg DNN, OpenID, LiveID)
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.SettingsControlSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the url for the Settings Control
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.LoginControlSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the url for the Login Control
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.LogoffControlSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the url for the Logoff Control
 </summary>
	<history>
 	[cnurse]	07/23/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a RoleInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	03/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationInfo">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationInfo class provides the Entity Layer for the 
 Authentication Systems.
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.RoleGroupID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the RoleGroup Id
 </summary>
	<value>An Integer representing the Id of the RoleGroup</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.PortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Portal Id for the RoleGroup
 </summary>
	<value>An Integer representing the Id of the Portal</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.RoleGroupName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the RoleGroup Name
 </summary>
	<value>A string representing the Name of the RoleGroup</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.Description">
 -----------------------------------------------------------------------------
 <summary>
 Gets an sets the Description of the RoleGroup
 </summary>
	<value>A string representing the description of the RoleGroup</value>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.Roles">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Roles for this Role Group
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a RoleGroupInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	03/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/17/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.GetSchema">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlSchema for the RoleGroupInfo
 </summary>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.ReadRoles(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a Roles from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.ReadXml(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a RoleGroupInfo from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.WriteXml(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a RoleGroupInfo to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter to use</param>
	<history>
 	[cnurse]	03/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Roles.RoleGroupInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Roles
 Class:      RoleGroupInfo
 -----------------------------------------------------------------------------
 <summary>
 The RoleGroupInfo class provides the Entity Layer RoleGroup object
 </summary>
	<history>
     [cnurse]    01/03/2006  made compatible with .NET 2.0
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Syndication.RssHandler.PopulateChannel(System.String,System.String)">
	<summary>
 This method
 </summary>
	<param name="channelName"></param>
	<param name="userName"></param>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Syndication.RssHandler.GetRssItem(DotNetNuke.Services.Search.SearchResultsInfo)">
	<summary>
 Creates an RSS Item
 </summary>
	<param name="SearchItem"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Syndication.RssHandler.RssHandler_PreRender(System.Object,System.EventArgs)">
	<summary>
 The PreRender event is used to set the Caching Policy for the Feed.  This mimics the behavior from the 
 OutputCache directive in the old Rss.aspx file.  @OutputCache Duration="60" VaryByParam="moduleid" 
 </summary>
	<param name="source"></param>
	<param name="e"></param>
	<remarks></remarks>
</member><member name="M:DotNetNuke.UI.Skins.Pane.#ctor(System.Web.UI.HtmlControls.HtmlContainerControl)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new Pane object from the Control in the Skin
 </summary>
	<param name="pane">The HtmlContainerControl in the Skin.</param>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Pane.#ctor(System.String,System.Web.UI.HtmlControls.HtmlContainerControl)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new Pane object from the Control in the Skin
 </summary>
	<param name="name">The name (ID) of the HtmlContainerControl</param>
	<param name="pane">The HtmlContainerControl in the Skin.</param>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Pane.Containers">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Containers.
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Pane.Name">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the name (ID) of the Pane
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Pane.PaneControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the HtmlContainerControl
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Skins.Pane.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PortalSettings of the Portal
 </summary>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Pane.LoadContainerByPath(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 LoadContainerByPath gets the Container from its Url(Path)
 </summary>
	<param name="ContainerPath">The Url to the Container control</param>
	<returns>A Container</returns>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Pane.LoadModuleContainer(DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 LoadModuleContainer gets the Container for a Module
 </summary>
	<param name="objModule">The Module</param>
	<returns>A Container</returns>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Pane.ModuleMoveToPanePostBack(DotNetNuke.UI.Utilities.ClientAPIPostBackEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 ModuleMoveToPanePostBack excutes when a module is moved by Drag-and-Drop
 </summary>
	<param name="args">A ClientAPIPostBackEventArgs object</param>
	<history>
 	[cnurse]	12/05/2007	Moved from Skin.vb
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Pane.InjectModule(DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 InjectModule injects a Module (and its container) into the Pane
 </summary>
	<param name="objModule">The Module</param>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Pane.ProcessPane">
 -----------------------------------------------------------------------------
 <summary>
 ProcessPane processes the Attributes for the PaneControl
 </summary>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.Pane">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Skins
 Class	 : Pane
 -----------------------------------------------------------------------------
 <summary>
 The Pane class represents a Pane within the Skin
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.ISkinControl">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Skins
 Class	 : ISkinControl
 -----------------------------------------------------------------------------
 <summary>
 ISkinControl provides a common INterface for Skin Controls
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.Actions">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Actions for this module context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.Configuration">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Module Configuration (ModuleInfo) for this context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 The EditMode property is used to determine whether the user is in the 
 Administrator role
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.HelpURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the HelpUrl for this context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.IsEditable">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the module is Editable (in Admin mode)
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.ModuleId">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the module ID for this context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.Settings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the settings for this context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.TabId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the tab ID for this context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.TabModuleId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the tabnmodule ID for this context
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new ModuleInstanceContext
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.#ctor(DotNetNuke.UI.Modules.IModuleControl)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new ModuleInstanceContext
 </summary>
	<param name="moduleControl">The Module Control for this context</param>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.IsHostMenu">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether this module is on a Host Menu
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the portal Settings for this module
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.PortalAlias">
 -----------------------------------------------------------------------------
 <summary>
 Gets the portal Alias for this module
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.PortalId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the portal Id for this module
 </summary>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.EditUrl">
 -----------------------------------------------------------------------------
 <summary>
 Builds the URL for an "Edit" control
 </summary>
	<history>
   [cnurse]   03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.EditUrl(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Builds the URL for an "Edit" control
 </summary>
	<param name="ControlKey">The key for the Control (ctl=key)</param>
	<history>
   [cnurse]   03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.EditUrl(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Builds the URL for an "Edit" control
 </summary>
	<param name="KeyName">The name of Querysstring Paramater</param>
	<param name="KeyValue">The value of a Querystring Parameter</param>
	<history>
   [cnurse]   03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.EditUrl(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Builds the URL for an "Edit" control
 </summary>
	<param name="ControlKey">The key for the Control (ctl=key)</param>
	<param name="KeyName">The name of Querysstring Paramater</param>
	<param name="KeyValue">The value of a Querystring Parameter</param>
	<history>
   [cnurse]   03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.EditUrl(System.String,System.String,System.String,System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Builds the URL for an "Edit" control
 </summary>
	<param name="ControlKey">The key for the Control (ctl=key)</param>
	<param name="KeyName">The name of Querysstring Paramater</param>
	<param name="KeyValue">The value of a Querystring Parameter</param>
	<param name="AdditionalParameters">A collection of extra Parameters</param>
	<history>
   [cnurse]   03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.GetNextActionID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Next Action ID
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.AddHelpActions">
 -----------------------------------------------------------------------------
 <summary>
 AddHelpActions Adds the Help actions to the Action Menu
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	05/12/2005	Documented
     [cnurse]    01/19/2006  Moved from ActionBase
     [cnurse]    12/24/2007  Renamed (from SetHelpVisibility)
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.AddMenuMoveActions">
 -----------------------------------------------------------------------------
 <summary>
 AddMenuMoveActions Adds the Move actions to the Action Menu
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    01/04/2008  Refactored from LoadActions
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.GetActionsCount(System.Int32,DotNetNuke.Entities.Modules.Actions.ModuleActionCollection)">
 -----------------------------------------------------------------------------
 <summary>
 GetActionsCount gets the current number of actions
 </summary>
	<param name="actions">The actions collection to count.</param>
	<param name="count">The current count</param>
	<history>
     [cnurse]    01/04/2008  Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.LoadActions(System.Web.HttpRequest)">
 -----------------------------------------------------------------------------
 <summary>
 LoadActions loads the Actions collections
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    01/19/2006  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.ModuleInstanceContext">
	<summary>
 Provides context data for a particular instance of a module
 </summary>
</member><member name="T:DotNetNuke.UI.Modules.IModuleControl">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : IModuleControl
 -----------------------------------------------------------------------------
 <summary>
 IModuleControl provides a common Interface for Module Controls
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleControlBase.Control">
 -----------------------------------------------------------------------------
 <summary>
 Gets the underlying base control for this ModuleControl
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/17/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleControlBase.ControlPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path for this control (used primarily for UserControls)
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleControlBase.ControlName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleControlBase.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the local resource file for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleControlBase.ModuleContext">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Module Context for this control
 </summary>
	<returns>A ModuleInstanceContext</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.ModuleControlBase">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : ModuleControlBase
 -----------------------------------------------------------------------------
 <summary>
 ModuleControlBase is a base class for Module Controls that inherits from the
 Control base class.  As with all MontrolControl base classes it implements
 IModuleControl.
 </summary>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.#ctor(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.UI.Skins.Skin)">
 -----------------------------------------------------------------------------
 <summary>
 Creates a Module Host control using the ModuleConfiguration for the Module
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleHost.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets the attached ModuleControl
 </summary>
	<returns>An IModuleControl</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleHost.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the current POrtal Settings
 </summary>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.DisplayContent">
 ----------------------------------------------------------------------------
 <summary>
 Gets a flag that indicates whether the Module Content should be displayed
 </summary>
	<returns>A Boolean</returns>
	<history>
 [cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.IsViewMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets a flag that indicates whether the Module is in View Mode
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.LoadModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 LoadModuleControl loads the ModuleControl (PortalModuelBase)
 </summary>
	<history>
 	[cnurse]	12/15/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.LoadUpdatePanel">
 -----------------------------------------------------------------------------
 <summary>
 LoadUpdatePanel optionally loads an AJAX Update Panel
 </summary>
	<history>
 	[cnurse]	12/16/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.SupportsCaching">
 -----------------------------------------------------------------------------
 <summary>
 Gets a flag that indicates whether the Module Instance supports Caching
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.TryLoadCached">
 -----------------------------------------------------------------------------
 <summary>
 Trys to load previously cached Module Content
 </summary>
	<returns>A Boolean that indicates whether the cahed content was loaded</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 CreateChildControls builds the control tree
 </summary>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.ModuleHost.RenderContents(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderContents renders the contents of the control to the output stream
 </summary>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.ModuleHost">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : ModuleHost
 -----------------------------------------------------------------------------
 <summary>
 ModuleHost hosts a Module Control (or its cached Content).
 </summary>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.ModuleCachingType">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : ModuleCachingType
 -----------------------------------------------------------------------------
 <summary>
 ModuleCachingType is an enum that provides the caching types for Module Content
 </summary>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.Control">
 -----------------------------------------------------------------------------
 <summary>
 Gets the underlying base control for this ModuleControl
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/17/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.ControlPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path for this control (used primarily for UserControls)
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.ControlName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the local resource file for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.ModuleContext">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Module Context for this control
 </summary>
	<returns>A ModuleInstanceContext</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.ModuleUserControlBase">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : ModuleUserControlBase
 -----------------------------------------------------------------------------
 <summary>
 ModuleUserControlBase is a base class for Module Controls that inherits from the
 UserControl base class.  As with all MontrolControl base classes it implements
 IModuleControl.
 </summary>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Modules.CachedModuleControl.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new CachedModuleControl
 </summary>
	<param name="cachedContent">The cached Content for this control</param>
	<history>
 	[cnurse]	12/17/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.CachedModuleControl.Control">
 -----------------------------------------------------------------------------
 <summary>
 Gets the underlying base control for this ModuleControl
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/17/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.CachedModuleControl.ControlPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path for this control (used primarily for UserControls)
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.CachedModuleControl.ControlName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.CachedModuleControl.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the local resource file for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Modules.CachedModuleControl.ModuleContext">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Module Context for this control
 </summary>
	<returns>A ModuleInstanceContext</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.CachedModuleControl">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : CachedModuleControl
 -----------------------------------------------------------------------------
 <summary>
 CachedModuleControl represents a cached "ModuleControl".  It inherits from
 Literal and implements the IModuleControl interface
 </summary>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.ActionRoot">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ActionRoot
 </summary>
	<returns>A ModuleActionCollection</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.ProviderControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Provider Control
 </summary>
	<returns>A NavigationProvider</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.ExpandDepth">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Expansion Depth for the Control
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.PathSystemScript">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Path to the Script Library for the provider
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.PopulateNodesFromClient">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets whether the Menu should be populated from the client
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.ProviderName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Name of the provider to use
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.BindMenu(DotNetNuke.UI.WebControls.DNNNodeCollection)">
 -----------------------------------------------------------------------------
 <summary>
 BindMenu binds the Navigation Provider to the Node Collection
 </summary>
	<param name="objNodes">The Nodes collection to bind</param>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.ProcessNodes(DotNetNuke.UI.WebControls.DNNNode)">
 -----------------------------------------------------------------------------
 <summary>
 ProcessNodes proceses a single node and its children
 </summary>
	<param name="objParent">The Node to process</param>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.SetMenuDefaults">
 -----------------------------------------------------------------------------
 <summary>
 SetMenuDefaults sets up the default values
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.BindMenu">
 -----------------------------------------------------------------------------
 <summary>
 BindMenu binds the Navigation Provider to the Node Collection
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnAction raises the Action Event
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnInit(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnInit runs during the controls initialisation phase
 </summary>
	<history>
 	[cnurse]	01/02/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnLoad(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs during the controls load phase
 </summary>
	<history>
 	[cnurse]	01/02/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs during the controls pre-render phase
 </summary>
	<history>
 	[cnurse]	01/02/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.MenuItem_Click(DotNetNuke.Modules.NavigationProvider.NavigationEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 MenuItem_Click handles the Menu Click event
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionsMenu.ProviderControl_PopulateOnDemand(DotNetNuke.Modules.NavigationProvider.NavigationEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 ProviderControl_PopulateOnDemand handles the Populate On Demand Event
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.ActionManager">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ActionManager instance for this Action control
 </summary>
	<returns>An ActionManager object</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionsMenu.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleControl instance for this Action control
 </summary>
	<returns>An IModuleControl object</returns>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.ActionsMenu">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : ActionsMenu
 -----------------------------------------------------------------------------
 <summary>
 ActionsMenu provides a menu for a collection of actions.
 </summary>
	<remarks>
 ActionsMenu inherits from CompositeControl, and implements the IActionControl 
 Interface. It uses the Navigation Providers to implement the Menu.
 </remarks>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.IActionControl">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : IActionControl
 -----------------------------------------------------------------------------
 <summary>
 IActionControl provides a common INterface for Action Controls
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.ModuleActions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModuleActionCollection to bind to the list
 </summary>
	<value>A ModuleActionCollection</value>
	<history>
 	[cnurse]	12/23/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.ButtonSeparator">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Separator between Buttons
 </summary>
	<remarks>Defaults to 2 non-breaking spaces</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	12/23/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.CommandName">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Command Name
 </summary>
	<remarks>Maps to ModuleActionType in DotNetNuke.Entities.Modules.Actions</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	12/23/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.DisplayIcon">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the icon is displayed
 </summary>
	<remarks>Defaults to False</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	12/23/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.DisplayLink">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the link is displayed
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	12/23/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.ImageURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Icon used
 </summary>
	<remarks>Defaults to the icon defined in Action</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	12/23/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionButtonList.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnAction raises the Action Event
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionButtonList.OnLoad(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnLoad runs when the control is loaded into the Control Tree
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionButtonList.ActionButtonClick(System.Object,DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 ActionButtonClick handles the Action event of the contained ActionCommandButton(s)
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.ActionManager">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ActionManager instance for this Action control
 </summary>
	<returns>An ActionManager object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButtonList.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleControl instance for this Action control
 </summary>
	<returns>An IModuleControl object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.ActionButtonList">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : ActionButtonList
 -----------------------------------------------------------------------------
 <summary>
 ActionButtonList provides a list of buttons for a group of actions of the same type.
 </summary>
	<remarks>
 ActionButtonList inherits from CompositeControl, and implements the IActionControl 
 Interface.  It uses a single ActionCommandButton for each Action.
 </remarks>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.#ctor(DotNetNuke.UI.Containers.IActionControl)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new ActionManager
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionManager.ActionControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Action Control that is connected to this ActionManager instance
 </summary>
	<returns>An IActionControl object</returns>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionManager.ModuleContext">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModuleInstanceContext instance that is connected to this ActionManager 
 instance
 </summary>
	<returns>A ModuleInstanceContext object</returns>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.ClearCache(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 ClearCache clears the Module cache
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.Delete(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 Delete deletes the associated Module
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.DoAction(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 DoAction redirects to the Url associated with the Action
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.MoveToPane(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 MoveToPane moves the Module to the relevant Pane
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.MoveUpDown(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 MoveUpDown moves the Module within its Pane.
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.DisplayControl(DotNetNuke.UI.WebControls.DNNNodeCollection)">
 -----------------------------------------------------------------------------
 <summary>
 DisplayControl determines whether the associated Action control should be 
 displayed
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.GetAction(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetAction gets the action associated with the commandName
 </summary>
	<param name="commandName">The command name</param>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.GetAction(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetAction gets the action associated with the id
 </summary>
	<param name="id">The Id</param>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.GetClientScriptURL(DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.WebControls.WebControl)">
 -----------------------------------------------------------------------------
 <summary>
 GetClientScriptURL gets the client script to attach to the control's client 
 side onclick event
 </summary>
	<param name="action">The Action</param>
	<param name="control">The Control</param>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.IsVisible(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 IsVisible determines whether the action control is Visible
 </summary>
	<param name="action">The Action</param>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.ProcessAction(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ProcessAction processes the action
 </summary>
	<param name="id">The Id of the Action</param>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionManager.ProcessAction(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
 -----------------------------------------------------------------------------
 <summary>
 ProcessAction processes the action
 </summary>
	<param name="action">The Action</param>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.ActionManager">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : ActionManager
 -----------------------------------------------------------------------------
 <summary>
 ActionManager is a helper class that provides common Action Behaviours that can 
 be used by any IActionControl implementation
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionCommandButton.ModuleAction">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleAction for this Action control
 </summary>
	<returns>A ModuleAction object</returns>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionCommandButton.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 CreateChildControls builds the control tree
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionCommandButton.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnAction raises the Action Event
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionCommandButton.OnButtonClick(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnButtonClick runs when the underlying CommandButton is clicked
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionCommandButton.OnPreRender(System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnPreRender runs when just before the Render phase of the Page Lifecycle
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionCommandButton.ActionManager">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ActionManager instance for this Action control
 </summary>
	<returns>An ActionManager object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionCommandButton.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleControl instance for this Action control
 </summary>
	<returns>An IModuleControl object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.ActionCommandButton">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : ActionCommandButton
 -----------------------------------------------------------------------------
 <summary>
 ActionCommandButton provides a button for a single action.
 </summary>
	<remarks>
 ActionBase inherits from CommandButton, and implements the IActionControl Interface.
 </remarks>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionBase.Actions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Actions Collection
 </summary>
	<returns>A ModuleActionCollection</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionBase.ActionRoot">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ActionRoot
 </summary>
	<returns>A ModuleActionCollection</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionBase.ModuleContext">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ModuleContext
 </summary>
	<returns>A ModuleInstanceContext</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionBase.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PortalSettings
 </summary>
	<returns>A PortalSettings object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionBase.DisplayControl(DotNetNuke.UI.WebControls.DNNNodeCollection)">
 -----------------------------------------------------------------------------
 <summary>
 DisplayControl determines whether the control should be displayed
 </summary>
	<history>
 	[cnurse]	12/23/2007  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionBase.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 OnAction raises the Action Event for this control
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionBase.ProcessAction(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ProcessAction processes the action event
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionBase.Page_Load(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Page_Load runs when the class is loaded
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	05/12/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionBase.ActionManager">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ActionManager instance for this Action control
 </summary>
	<returns>An ActionManager object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionBase.ModuleControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ModuleControl instance for this Action control
 </summary>
	<returns>An IModuleControl object</returns>
	<history>
 	[cnurse]	12/15/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.ActionBase">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : ActionBase
 -----------------------------------------------------------------------------
 <summary>
 ActionBase is an abstract base control for Action objects that inherit from UserControl.
 </summary>
	<remarks>
 ActionBase inherits from UserControl, and implements the IActionControl Interface
 </remarks>
	<history>
 	[cnurse]	10/07/2004	Documented
     [cnurse]    12/15/2007  Refactored 
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Skins.Controls.LanguagePropertyAccess.getQSParams(System.String)">
	<summary>
 getQSParams builds up a new querystring. This is necessary
 in order to prep for navigateUrl.
 we don't ever want a tabid, a ctl and a language parameter in the qs
 also, the portalid param is not allowed when the tab is a supertab 
 (because NavigateUrl adds the portalId param to the qs)
 </summary>
	<history>
     [erikvb]   20070814    added
 </history>
</member><member name="M:DotNetNuke.UI.Skins.Controls.LanguagePropertyAccess.newUrl(System.String)">
	<summary>
 newUrl returns the new URL based on the new language. 
 Basically it is just a call to NavigateUrl, with stripped qs parameters
 </summary>
	<param name="newLanguage"></param>
	<history>
     [erikvb]   20070814    added
 </history>
</member><member name="P:DotNetNuke.UI.Containers.ActionButton.CommandName">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Command Name
 </summary>
	<remarks>Maps to ModuleActionType in DotNetNuke.Entities.Modules.Actions</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	6/29/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButton.CssClass">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the CSS Class
 </summary>
	<remarks>Defaults to 'CommandButton'</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	6/29/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButton.DisplayLink">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the link is displayed
 </summary>
	<remarks>Defaults to True</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	6/29/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButton.DisplayIcon">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets whether the icon is displayed
 </summary>
	<remarks>Defaults to False</remarks>
	<value>A Boolean</value>
	<history>
 	[cnurse]	6/29/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButton.IconFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Icon used
 </summary>
	<remarks>Defaults to the icon defined in Action</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	6/29/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.Containers.ActionButton.ButtonSeparator">
 -----------------------------------------------------------------------------
 <summary>
 Gets or sets the Separator between Buttons
 </summary>
	<remarks>Defaults to 2 non-breaking spaces</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	6/29/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionButton.Action_Click(System.Object,DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
 -----------------------------------------------------------------------------
 <summary>
 Action_Click responds to an Action Event in the contained actionButtonList
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.Containers.ActionButton.CreateChildControls">
 -----------------------------------------------------------------------------
 <summary>
 CreateChildControls builds the control tree
 </summary>
	<history>
 	[cnurse]	12/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.ActionButton">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Containers
 Class	 : ActionButton
 -----------------------------------------------------------------------------
 <summary>
 ActionButton provides a button (or group of buttons) for action(s).
 </summary>
	<remarks>
 ActionBase inherits from UserControl, and implements the IActionControl Interface.
 </remarks>
	<history>
 	[cnurse]	10/07/2004	Documented
     [cnurse]    12/15/2007  Deprectaed and Refactored to use ActionButtonList 
                             by Containment
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Initialize.CacheMappedDirectory">
 -----------------------------------------------------------------------------
 <summary>
 CacheMappedDirectory caches the Portal Mapped Directory(s)
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    1/27/2005   Moved back to App_Start from Caching Module
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Initialize.CheckVersion(System.Web.HttpApplication)">
 -----------------------------------------------------------------------------
 <summary>
 CheckVersion determines whether the App is synchronized with the DB
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    2/17/2005   created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Initialize.LogStart">
 -----------------------------------------------------------------------------
 <summary>
 LogStart logs the Application Start Event
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    1/27/2005   Moved back to App_Start from Logging Module
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Initialize.StartScheduler">
 -----------------------------------------------------------------------------
 <summary>
 StartScheduler starts the Scheduler
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    1/27/2005   Moved back to App_Start from Scheduling Module
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Initialize.LogEnd">
 -----------------------------------------------------------------------------
 <summary>
 LogEnd logs the Application Start Event
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    1/28/2005   Moved back to App_End from Logging Module
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Initialize.StopScheduler">
 -----------------------------------------------------------------------------
 <summary>
 StopScheduler stops the Scheduler
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]    1/28/2005   Moved back to App_End from Scheduling Module
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Profile.ProfileProviderConfig.CanEditProviderProperties">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Provider Properties can be edited
 </summary>
	<returns>A Boolean</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Profile.ProfileProviderConfig">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Profile
 Class:      ProfileProviderConfig
 -----------------------------------------------------------------------------
 <summary>
 The ProfileProviderConfig class provides a wrapper to the Profile providers
 configuration
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/09/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.CanEditProviderProperties">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Provider Properties can be edited
 </summary>
	<returns>A Boolean</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.MaxInvalidPasswordAttempts">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the maximum number of invlaid attempts to login are allowed
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.MinNonAlphanumericCharacters">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Mimimum no of Non AlphNumeric characters required
 </summary>
	<returns>An Integer.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.MinPasswordLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Mimimum Password Length
 </summary>
	<returns>An Integer.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordAttemptWindow">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the window in minutes that the maxium attempts are tracked for
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordFormat">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Password Format
 </summary>
	<returns>A PasswordFormat enumeration.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordResetEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Users's Password can be reset
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordRetrievalEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Users's Password can be retrieved
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordStrengthRegularExpression">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a Regular Expression that deermines the strength of the password
 </summary>
	<returns>A String.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.RequiresQuestionAndAnswer">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether a Question/Answer is required for Password retrieval
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.RequiresUniqueEmail">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether a Unique Email is required
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	02/06/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Membership.MembershipProviderConfig">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Membership
 Class:      MembershipProviderConfig
 -----------------------------------------------------------------------------
 <summary>
 The MembershipProviderConfig class provides a wrapper to the Membership providers
 configuration
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Scheduling.ScheduleStatusSortRemainingTimeDescending">
 -----------------------------------------------------------------------------
 <summary>
 The ScheduleStatusSortRemainingTimeDescending Class is a custom IComparer Implementation
 used to sort the Schedule Items
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/28/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Scheduling.ScheduleHistorySortStartDate">
 -----------------------------------------------------------------------------
 <summary>
 The ScheduleHistorySortStartDate Class is a custom IComparer Implementation
 used to sort the Schedule Items
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	9/28/2004	Updated to reflect design changes for Help, 508 support
                       and localisation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.#ctor(DotNetNuke.Services.Installer.InstallerInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallPackage instance as defined by the
 Parameters
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallPackage instance
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.PackageID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ID of this package
 </summary>
	<value>An Integer</value>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.PortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the ID of this portal
 </summary>
	<value>An Integer</value>
	<history>
 	[cnurse]	09/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Owner">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Owner of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/26/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Organization">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Organisation for this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/26/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Url">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Url for this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/26/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Email">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Email for this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/26/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Description">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Description of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Files">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Files that are included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.FriendlyName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the FriendlyName of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.InstallerInfo">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated InstallerInfo
 </summary>
	<value>An InstallerInfo object</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.InstalledVersion">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Installed Version of the Package
 </summary>
	<value>A System.Version</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.InstallMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets the InstallMode
 </summary>
	<value>An InstallMode value</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.IsSystemPackage">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets whether this package is a "system" Package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/19/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Package is Valid
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.License">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the License of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Log">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Logger
 </summary>
	<value>An Logger object</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Manifest">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Manifest of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Name">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.ReleaseNotes">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the ReleaseNotes of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/07/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.PackageType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Type of this package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Version">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Version of this package
 </summary>
	<value>A System.Version</value>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.AttachInstallerInfo(DotNetNuke.Services.Installer.InstallerInfo)">
 -----------------------------------------------------------------------------
 <summary>
 The AttachInstallerInfo method attachs an InstallerInfo instance to the Package
 </summary>
	<param name="installer">The InstallerInfo instance to attach</param>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.PackageInfo">
 -----------------------------------------------------------------------------
 <summary>
 The PackageInfo class represents a single Installer Package
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.PackageController">
 -----------------------------------------------------------------------------
 <summary>
 The PackageController class provides the business class for the packages
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.Logger.ErrorClass">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Css Class used for Error Log Entries
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.Logger.HighlightClass">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Css Class used for Log Entries that should be highlighted
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.Logger.Logs">
 -----------------------------------------------------------------------------
 <summary>
 Gets a List of Log Entries
 </summary>
	<value>A List of LogEntrys</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.Logger.NormalClass">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Css Class used for normal Log Entries
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.Logger.Valid">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Flag that indicates whether the Installation was Valid
 </summary>
	<value>A List of LogEntrys</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.AddFailure(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The AddFailure method adds a new LogEntry of type Failure to the Logs collection
 </summary>
	<remarks>This method also sets the Valid flag to false</remarks>
	<param name="failure">The description of the LogEntry</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.AddFailure(System.Exception)">
 -----------------------------------------------------------------------------
 <summary>
 The AddFailure method adds a new LogEntry of type Failure to the Logs collection
 </summary>
	<remarks>This method also sets the Valid flag to false</remarks>
	<param name="ex">The Exception</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.AddInfo(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The AddInfo method adds a new LogEntry of type Info to the Logs collection
 </summary>
	<param name="info">The description of the LogEntry</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.AddWarning(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The AddWarning method adds a new LogEntry of type Warning to the Logs collection
 </summary>
	<param name="warning">The description of the LogEntry</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.EndJob(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The EndJob method adds a new LogEntry of type EndJob to the Logs collection
 </summary>
	<param name="job">The description of the LogEntry</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.GetLogsTable">
 -----------------------------------------------------------------------------
 <summary>
 GetLogsTable formats log entries in an HtmlTable
 </summary>
	<history>
   [jbrinkman] 24/11/2004  Created new method.  Moved from WebUpload.ascx.vb
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.Logger.StartJob(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The StartJob method adds a new LogEntry of type StartJob to the Logs collection
 </summary>
	<param name="job">The description of the LogEntry</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Log.Logger">
 -----------------------------------------------------------------------------
 <summary>
 The Logger class provides an Installer Log
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Log.LogEntry.#ctor(DotNetNuke.Services.Installer.Log.LogType,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor builds a LogEntry from its type and description
 </summary>
	<remarks>
	</remarks>
	<param name="description">The description (detail) of the entry</param>
	<param name="type">The type of LogEntry</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.LogEntry.Type">
 -----------------------------------------------------------------------------
 <summary>
 Gets the type of LogEntry
 </summary>
	<value>A LogType</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Log.LogEntry.Description">
 -----------------------------------------------------------------------------
 <summary>
 Gets the description of LogEntry
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Log.LogEntry">
 -----------------------------------------------------------------------------
 <summary>
 The LogEntry class provides a single entry for the Installer Log
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(ICSharpCode.SharpZipLib.Zip.ZipInputStream,ICSharpCode.SharpZipLib.Zip.ZipEntry,DotNetNuke.Services.Installer.InstallerInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallFile instance from a ZipInputStream and a ZipEntry
 </summary>
	<remarks>The ZipInputStream is read into a byte array (Buffer), and the ZipEntry is used to
 set up the properties of the InstallFile class.</remarks>
	<param name="zip">The ZipInputStream</param>
	<param name="entry">The ZipEntry</param>
	<param name="info">An INstallerInfo instance</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallFile instance
 </summary>
	<param name="fileName">The fileName of the File</param>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String,DotNetNuke.Services.Installer.InstallerInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallFile instance
 </summary>
	<param name="fileName">The fileName of the File</param>
	<param name="info">An INstallerInfo instance</param>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String,System.String,DotNetNuke.Services.Installer.InstallerInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallFile instance
 </summary>
	<param name="fileName">The fileName of the File</param>
	<param name="info">An INstallerInfo instance</param>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallFile instance
 </summary>
	<param name="fileName">The file name of the File</param>
	<param name="filePath">The file path of the file</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.Action">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Action for this file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	09/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.BackupFileName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the location of the backup file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	08/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.BackupPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the location of the backup folder
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	08/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.Extension">
 -----------------------------------------------------------------------------
 <summary>
 Gets the File Extension of the file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.FullName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Full Name of the file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.InstallerInfo">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated InstallerInfo
 </summary>
	<value>An InstallerInfo object</value>
	<history>
 	[cnurse]	08/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.Name">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name of the file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.Path">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path of the file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.SourceFileName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the source file name
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	01/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.TempFileName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the location of the temporary file
 </summary>
	<value>A string</value>
	<history>
 	[cnurse]	08/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.Type">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Type of the file
 </summary>
	<value>An InstallFileType Enumeration</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallFile.Version">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Version of the file
 </summary>
	<value>A System.Version</value>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.ParseFileName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The ParseFileName parses the ZipEntry metadata
 </summary>
	<param name="fileName">A String representing the file name</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.ReadZip(ICSharpCode.SharpZipLib.Zip.ZipInputStream,ICSharpCode.SharpZipLib.Zip.ZipEntry)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadZip method reads the zip stream and parses the ZipEntry metadata
 </summary>
	<param name="unzip">A ZipStream containing the file content</param>
	<param name="entry">A ZipEntry containing the file metadata</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallFile.SetVersion(System.Version)">
 -----------------------------------------------------------------------------
 <summary>
 The SetVersion method sets the version of the file
 </summary>
	<param name="version">The version of the file</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.InstallFile">
 -----------------------------------------------------------------------------
 <summary>
 The InstallFile class represents a single file in an Installer Package
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.BasePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the BasePath for the files
 </summary>
	<remarks>The Base Path is relative to the WebRoot</remarks>
	<value>A String</value>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("files")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.Files">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Files that are included in this component
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.DefaultPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the default Path for the file - if not present in the manifest
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/10/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("file")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.PhysicalBasePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PhysicalBasePath for the files
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.DeleteFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Packages files are deleted when uninstalling the
 package
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.SupportsManifestOnlyInstall">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Installer supports Manifest only installs
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.CommitFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The CommitFile method commits a single file.
 </summary>
	<param name="insFile">The InstallFile to commit</param>
	<history>
 	[cnurse]	08/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.DeleteFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteFile method deletes a single file.
 </summary>
	<param name="insFile">The InstallFile to delete</param>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.InstallFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The InstallFile method installs a single file.
 </summary>
	<param name="insFile">The InstallFile to install</param>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a flag that determines what type of file this installer supports
 </summary>
	<param name="type">The type of file being processed</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ProcessFile method determines what to do with parsed "file" node
 </summary>
	<param name="file">The file represented by the node</param>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadCustomManifest method reads the custom manifest items (that subclasses
 of FileInstaller may need)
 </summary>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ReadManifestItem(System.Xml.XPath.XPathNavigator,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifestItem method reads a single node
 </summary>
	<param name="nav">The XPathNavigator representing the node</param>
	<param name="checkFileExists">Flag that determines whether a check should be made</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.RollbackFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The RollbackFile method rolls back the install of a single file.
 </summary>
	<remarks>For new installs this removes the added file.  For upgrades it restores the
 backup file created during install</remarks>
	<param name="installFile">The InstallFile to commit</param>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.UnInstallFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstallFile method unInstalls a single file.
 </summary>
	<param name="unInstallFile">The InstallFile to unInstall.</param>
	<history>
 	[cnurse]	01/07/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Files this is not neccessary</remarks>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the file component
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file for the file compoent.
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the file component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the file component
 </summary>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.FileInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The FileInstaller installs File Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.InstallerFactory.GetInstaller(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The GetInstaller method instantiates the relevant Component Installer
 </summary>
	<param name="installerType">The type of Installer</param>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.InstallerFactory.GetInstaller(System.Xml.XPath.XPathNavigator,DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 The GetInstaller method instantiates the relevant Component Installer
 </summary>
	<param name="manifestNav">The manifest (XPathNavigator) for the component</param>
	<param name="package">The associated PackageInfo instance</param>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.InstallerFactory">
 -----------------------------------------------------------------------------
 <summary>
 The InstallerFactory is a factory class that is used to instantiate the
 appropriate Component Installer
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.InstallScript">
 -----------------------------------------------------------------------------
 <summary>
 Gets the base Install Script (if present)
 </summary>
	<value>An InstallFile</value>
	<history>
 	[cnurse]	05/20/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.InstallScripts">
 -----------------------------------------------------------------------------
 <summary>
 Gets the collection of Install Scripts
 </summary>
	<value>A List(Of InstallFile)</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.UnInstallScripts">
 -----------------------------------------------------------------------------
 <summary>
 Gets the collection of UnInstall Scripts
 </summary>
	<value>A List(Of InstallFile)</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("scripts")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("script")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.UpgradeScript">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Upgrade Script (if present)
 </summary>
	<value>An InstallFile</value>
	<history>
 	[cnurse]	07/14/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a flag that determines what type of file this installer supports
 </summary>
	<param name="type">The type of file being processed</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ProcessFile method determines what to do with parsed "file" node
 </summary>
	<param name="file">The file represented by the node</param>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Files this is not neccessary</remarks>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the script component
 </summary>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the script component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the script component
 </summary>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ScriptInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The ScriptInstaller installs Script Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.InstallConfig">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Install config changes
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.TargetConfig">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Target Config XmlDocument
 </summary>
	<value>An XmlDocument</value>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.TargetFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Target Config file to change
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.UnInstallConfig">
 -----------------------------------------------------------------------------
 <summary>
 Gets the UnInstall config changes
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the config component
 </summary>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file for the config compoent.
 </summary>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the file component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the config component
 </summary>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ConfigInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The ConfigInstaller installs Config changes
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.DeleteAuthentiation">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteAuthentiation method deletes the Authentication System
 from the data Store.
 </summary>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Authentication systems this is not neccessary</remarks>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the authentication component
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file for the Authentication compoent.
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the authentication component
 </summary>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationInstaller installs Authentication Service Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("assemblies")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.DefaultPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the default Path for the file - if not present in the manifest
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/10/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("assembly")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.PhysicalBasePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PhysicalBasePath for the assemblies
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.DeleteFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteFile method deletes a single assembly.
 </summary>
	<param name="file">The InstallFile to delete</param>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a flag that determines what type of file this installer supports
 </summary>
	<param name="type">The type of file being processed</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.InstallFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The InstallFile method installs a single assembly.
 </summary>
	<param name="file">The InstallFile to install</param>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.AssemblyInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The AssemblyInstaller installs Assembly Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Completed">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Completed flag
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.InstallMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets the InstallMode
 </summary>
	<value>An InstallMode value</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Log">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Logger
 </summary>
	<value>An Logger object</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Package">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Package
 </summary>
	<value>An PackageInfo object</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.PackageFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Files that are included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.PhysicalSitePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Physical Path to the root of the Site (eg D:\Websites\DotNetNuke")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.SupportsManifestOnlyInstall">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Installer supports Manifest only installs
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Type">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Type of the component
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Version">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Version of the Component
 </summary>
	<value>A System.Version</value>
	<history>
 	[cnurse]	02/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase">
 -----------------------------------------------------------------------------
 <summary>
 The ComponentInstallerBase is a base class for all Component Installers
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallerInfo instance
 </summary>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(System.String,DotNetNuke.Services.Installer.InstallMode)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallerInfo instance from a 
 string representing the physical path to the root of the site
 </summary>
	<param name="sitePath">The physical path to the root of the site</param>
	<history>
 	[cnurse]	02/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(System.IO.Stream,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallerInfo instance from a Stream and a
 string representing the physical path to the root of the site
 </summary>
	<param name="inputStream">The Stream to use to create this InstallerInfo instance</param>
	<param name="sitePath">The physical path to the root of the site</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallerInfo instance from a string representing
 the physical path to the temporary install folder and a string representing 
 the physical path to the root of the site
 </summary>
	<param name="tempFolder">The physical path to the zip file containg the package</param>
	<param name="manifest">The manifest filename</param>
	<param name="sitePath">The physical path to the root of the site</param>
	<history>
 	[cnurse]	08/13/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallerInfo instance from a PackageInfo object
 </summary>
	<param name="package">The PackageInfo instance</param>
	<param name="sitePath">The physical path to the root of the site</param>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.Files">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Files that are included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.HasValidFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the package contains Valid Files
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	09/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.Installed">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Package is installed
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	09/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.InstallMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets the InstallMode
 </summary>
	<value>A InstallMode value</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.InvalidFileExtensions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Invalid File Extensions
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/12/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.IgnoreWhiteList">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the File Extension WhiteList is ignored
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	05/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.IsLegacyMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Installer is in legacy mode
 </summary>
	<history>
 	[cnurse]	08/20/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the InstallerInfo instance is Valid
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	08/13/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.Log">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Logger
 </summary>
	<value>A Logger</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.ManifestFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Manifest File for the Package
 </summary>
	<value>An InstallFile</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.PackageID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Id of the package after installation (-1 if fail)
 </summary>
	<value>An Integer</value>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.PhysicalSitePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Physical Path to the root of the Site (eg D:\Websites\DotNetNuke")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.PortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Id of the current portal (-1 if Host)
 </summary>
	<value>An Integer</value>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.RepairInstall">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Package Install is being repaird
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	09/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.SecurityAccessLevel">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the security Access Level of the user that is calling the INstaller
 </summary>
	<value>A SecurityAccessLevel enumeration</value>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.InstallerInfo.TempInstallFolder">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Temporary Install Folder used to unzip the archive (and to place the 
 backups of existing files) during InstallMode
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.InstallerInfo.ReadZipStream(System.IO.Stream,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadZipStream reads a zip stream, and loads the Files Dictionary
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.InstallerInfo">
 -----------------------------------------------------------------------------
 <summary>
 The InstallerInfo class holds all the information associated with a
 Installation.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.#ctor(System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new Installer instance from a string representing
 the physical path to the temporary install folder and a string representing 
 the physical path to the root of the site
 </summary>
	<param name="tempFolder">The physical path to the zip file containg the package</param>
	<param name="manifest">The manifest filename</param>
	<param name="physicalSitePath">The physical path to the root of the site</param>
	<param name="loadManifest">Flag that determines whether the manifest will be loaded</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.#ctor(System.IO.Stream,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new Installer instance from a Stream and a
 string representing the physical path to the root of the site
 </summary>
	<param name="inputStream">The Stream to use to create this InstallerInfo instance</param>
	<param name="physicalSitePath">The physical path to the root of the site</param>
	<param name="loadManifest">Flag that determines whether the manifest will be loaded</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.#ctor(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new Installer instance from a Stream and a
 string representing the physical path to the root of the site
 </summary>
	<param name="inputStream">The Stream to use to create this InstallerInfo instance</param>
	<param name="physicalSitePath">The physical path to the root of the site</param>
	<param name="loadManifest">Flag that determines whether the manifest will be loaded</param>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new Installer instance from a PackageInfo object
 </summary>
	<param name="package">The PackageInfo instance</param>
	<param name="physicalSitePath">The physical path to the root of the site</param>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installer.InstallerInfo">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated InstallerInfo object
 </summary>
	<value>An InstallerInfo</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installer.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the associated InstallerInfo is valid
 </summary>
	<value>True - if valid, False if not</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installer.LegacyError">
	<summary>
 Gets and sets whether there are any errors in parsing legacy packages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.Services.Installer.Installer.Packages">
 -----------------------------------------------------------------------------
 <summary>
 Gets a SortedList of Packages that are included in the Package Zip
 </summary>
	<value>A SortedList(Of Integer, PackageInstaller)</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installer.TempInstallFolder">
 -----------------------------------------------------------------------------
 <summary>
 Gets 
 </summary>
	<value>A Dictionary(Of String, PackageInstaller)</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.InstallPackages">
 -----------------------------------------------------------------------------
 <summary>
 The InstallPackages method installs the packages
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.LogInstallEvent(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Logs the Install event to the Event Log
 </summary>
	<param name="package">The name of the package</param>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.ProcessPackages(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ProcessPackages method processes the packages nodes in the manifest
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.UnInstallPackages(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstallPackages method uninstalls the packages
 </summary>
	<param name="deleteFiles">A flag that indicates whether the files should be
 deleted</param>
	<history>
 	[cnurse]	07/25/2007  created
     [cnurse]    01/31/2008  added deleteFiles parameter
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the feature.
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.ReadManifest(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file and parses it into packages.
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installer.UnInstall(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the feature
 </summary>
	<param name="deleteFiles">A flag that indicates whether the files should be
 deleted</param>
	<history>
 	[cnurse]	07/25/2007  created
     [cnurse]    01/31/2008  added deleteFiles parameter
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installer">
 -----------------------------------------------------------------------------
 <summary>
 The Installer class provides a single entrypoint for Package Installation
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.TypeDependency">
 -----------------------------------------------------------------------------
 <summary>
 The TypeDependency determines whether the dependent type is installed
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.PermissionsDependency">
 -----------------------------------------------------------------------------
 <summary>
 The PermissionsDependency determines whether the DotNetNuke site has the
 corretc permissions
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.PackageDependency">
 -----------------------------------------------------------------------------
 <summary>
 The PackageDependency determines whether the dependent package is installed
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.IDependency">
 -----------------------------------------------------------------------------
 <summary>
 The IDependency Interface defines the contract for a Package Dependency
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Dependencies.DependencyFactory.GetDependency(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The GetDependency method instantiates (and returns) the relevant Dependency
 </summary>
	<param name="dependencyNav">The manifest (XPathNavigator) for the dependency</param>
	<history>
 	[cnurse]	09/02/2007  created
     [bdukes]    03/04/2009  added case-insensitivity to type attribute, added InvalidDependency for dependencies that can't be created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.DependencyFactory">
 -----------------------------------------------------------------------------
 <summary>
 The DependencyFactory is a factory class that is used to instantiate the
 appropriate Dependency
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.DependencyBase">
 -----------------------------------------------------------------------------
 <summary>
 The DependencyBase is a base class for Installer Dependencies
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Dependencies.CoreVersionDependency">
 -----------------------------------------------------------------------------
 <summary>
 The CoreVersionDependency determines whether the CoreVersion is correct
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/02/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageType.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new InstallPackage instance
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageType.Description">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Description of this package type
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	09/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageType.EditorControlSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets the EditorControlSrc of this package type
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/04/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageType.PackageType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name of this package type
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	09/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageType.SecurityAccessLevel">
 -----------------------------------------------------------------------------
 <summary>
 Gets the security Access Level required to install this package type
 </summary>
	<value>A SecurityAccessLevel enumeration</value>
	<history>
 	[cnurse]	09/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.PackageType">
 -----------------------------------------------------------------------------
 <summary>
 The PackageType class represents a single Installer Package Type
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("skinFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("skinFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.PhysicalBasePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PhysicalBasePath for the skin files
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.RootPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the root folder for the Skin
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets the collection of Skin Files
 </summary>
	<value>A List(Of InstallFile)</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinNameNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the SkinName Node ("skinName")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinRoot">
 -----------------------------------------------------------------------------
 <summary>
 Gets the RootName of the Skin
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Type of the Skin
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.DeleteSkinPackage">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteSkinPackage method deletes the Skin Package
 from the data Store.
 </summary>
	<history>
 	[cnurse]	02/08/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ProcessFile method determines what to do with parsed "file" node
 </summary>
	<param name="file">The file represented by the node</param>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadCustomManifest method reads the custom manifest items
 </summary>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.UnInstallFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstallFile method unInstalls a single file.
 </summary>
	<param name="unInstallFile">The InstallFile to unInstall.</param>
	<history>
 	[cnurse]	02/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the skin component
 </summary>
	<history>
 	[cnurse]	02/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	02/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the skin component
 </summary>
	<history>
 	[cnurse]	02/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.SkinInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The SkinInstaller installs Skin Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("containerFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("containerFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.SkinNameNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the SkinName Node ("containerName")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.SkinRoot">
 -----------------------------------------------------------------------------
 <summary>
 Gets the RootName of the Skin
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.SkinType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Type of the Skin
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ContainerInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The ContainerInstaller installs Container Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	08/23/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.CleanupInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.CleanupFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The CleanupFile method cleansup a single file.
 </summary>
	<param name="insFile">The InstallFile to clean up</param>
	<history>
 	[cnurse]	09/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ProcessFile method determines what to do with parsed "file" node
 </summary>
	<param name="file">The file represented by the node</param>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.RollbackFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The RollbackFile method rolls back the cleanup of a single file.
 </summary>
	<param name="installFile">The InstallFile to commit</param>
	<history>
 	[cnurse]	09/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Clenup this is not neccessary</remarks>
	<history>
 	[cnurse]	09/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method cleansup the files
 </summary>
	<history>
 	[cnurse]	09/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the file component
 </summary>
	<remarks>There is no uninstall for this component</remarks>
	<history>
 	[cnurse]	09/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.CleanupInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The CleanupInstaller cleans up (removes) files from previous versions
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	09/05/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.StreamToStream(System.IO.Stream,System.IO.Stream)">
 -----------------------------------------------------------------------------
 <summary>
 The StreamToStream method reads a source stream and wrtites it to a destination stream
 </summary>
	<param name="SourceStream">The Source Stream</param>
	<param name="DestStream">The Destination Stream</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.BackupFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
 -----------------------------------------------------------------------------
 <summary>
 The BackupFile method backs up a file to the backup folder
 </summary>
	<param name="installFile">The file to backup</param>
	<param name="basePath">The basePath to the file</param>
	<param name="log">A Logger to log the result</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.CopyFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
 -----------------------------------------------------------------------------
 <summary>
 The CopyFile method copies a file from the temporary extract location.
 </summary>
	<param name="installFile">The file to copy</param>
	<param name="basePath">The basePath to the file</param>
	<param name="log">A Logger to log the result</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.DeleteFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteFile method deletes a file.
 </summary>
	<param name="installFile">The file to delete</param>
	<param name="basePath">The basePath to the file</param>
	<param name="log">A Logger to log the result</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.DeleteFile(System.String,System.String,DotNetNuke.Services.Installer.Log.Logger)">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteFile method deletes a file.
 </summary>
	<param name="fileName">The file to delete</param>
	<param name="basePath">The basePath to the file</param>
	<param name="log">A Logger to log the result</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.GetLocalizedString(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The GetLocalizedString method provides a conveniencewrapper around the 
 Localization of Strings
 </summary>
	<param name="key">The localization key</param>
	<returns>The localized string</returns>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.InstallURL(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The InstallURL method provides a utility method to build the correct url
 to install a package (and return to where you came from)
 </summary>
	<param name="tabId">The id of the tab you are on</param>
	<param name="type">The type of package you are installing</param>
	<returns>The localized string</returns>
	<history>
 	[cnurse]	07/26/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.PackageWriterURL(DotNetNuke.UI.Modules.ModuleInstanceContext,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 The PackageWriterURL method provides a utility method to build the correct url
 to create a package (and return to where you came from)
 </summary>
	<param name="context">The ModuleContext of the module</param>
	<param name="packageId">The id of the package you are packaging</param>
	<returns>The localized string</returns>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.RestoreFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
 -----------------------------------------------------------------------------
 <summary>
 The RestoreFile method restores a file from the backup folder
 </summary>
	<param name="installFile">The file to restore</param>
	<param name="basePath">The basePath to the file</param>
	<param name="log">A Logger to log the result</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.UnInstallURL(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstallURL method provides a utility method to build the correct url
 to uninstall a package (and return to where you came from)
 </summary>
	<param name="tabId">The id of the tab you are on</param>
	<param name="packageId">The id of the package you are uninstalling</param>
	<returns>The localized string</returns>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Util.WriteStream(System.IO.Stream,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The WriteStream reads a source stream and writes it to a destination file
 </summary>
	<param name="SourceStream">The Source Stream</param>
	<param name="DestFileName">The Destination file</param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Util">
 -----------------------------------------------------------------------------
 <summary>
 The InstallerBase class is a Base Class for all Installer
	classes that need to use Localized Strings.  It provides these strings
	as localized Constants.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	07/05/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the XmlMerge class.
 </summary>
	<param name="version"></param>
	<param name="sender"></param>
	<param name="sourceFileName"></param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.IO.Stream,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the XmlMerge class.
 </summary>
	<param name="version"></param>
	<param name="sender"></param>
	<param name="sourceStream"></param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.IO.TextReader,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the XmlMerge class.
 </summary>
	<param name="version"></param>
	<param name="sender"></param>
	<param name="sourceReader"></param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.Xml.XmlDocument,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the XmlMerge class.
 </summary>
	<param name="version"></param>
	<param name="sender"></param>
	<param name="sourceDoc"></param>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.XmlMerge.SourceConfig">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Source for the Config file
 </summary>
	<value>An XmlDocument</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.XmlMerge.Sender">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Sender (source) of the changes to be merged
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.XmlMerge.TargetConfig">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Target Config file
 </summary>
	<value>An XmlDocument</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.XmlMerge.TargetFileName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the File Name of the Target Config file
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.XmlMerge.Version">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Version of the changes to be merged
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.UpdateConfig(System.Xml.XmlDocument)">
 -----------------------------------------------------------------------------
 <summary>
 The UpdateConfig method processes the source file and updates the Target
 Config Xml Document.
 </summary>
	<param name="target">An Xml Document represent the Target Xml File</param>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.UpdateConfig(System.Xml.XmlDocument,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The UpdateConfig method processes the source file and updates the Target
 Config file.
 </summary>
	<param name="target">An Xml Document represent the Target Xml File</param>
	<param name="fileName">The fileName for the Target Xml File - relative to the webroot</param>
	<history>
 	[cnurse]	08/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.XmlMerge.UpdateConfigs">
 -----------------------------------------------------------------------------
 <summary>
 The UpdateConfigs method processes the source file and updates the various config 
 files
 </summary>
	<history>
 	[cnurse]	08/03/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.XmlMerge">
 -----------------------------------------------------------------------------
 <summary>
 The XmlMerge class is a utility class for XmlSplicing config files
 </summary>
	<history>
 	[cnurse]	08/03/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.Control">
 -----------------------------------------------------------------------------
 <summary>
 Gets the underlying base control for this ModuleControl
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/17/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.ControlPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Path for this control (used primarily for UserControls)
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.ControlName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Name for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the local resource file for this control
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.ModuleContext">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Module Context for this control
 </summary>
	<returns>A ModuleInstanceContext</returns>
	<history>
 	[cnurse]	12/16/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.CacheMethod">
 -----------------------------------------------------------------------------
 <summary>
 The CacheMethod property is used to store the Method used for this Module's
 Cache
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 04/28/2005  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.EditMode">
 -----------------------------------------------------------------------------
 <summary>
 The EditMode property is used to determine whether the user is in the 
 Administrator role
 Cache
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 01/19/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.PortalModuleBase.AddActionHandler(DotNetNuke.Entities.Modules.Actions.ActionEventHandler)">
 -----------------------------------------------------------------------------
 <summary>
 Helper method that can be used to add an ActionEventHandler to the Skin for this 
 Module Control
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 17/9/2004  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.PortalModuleBase.GetNextActionID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Next Action ID
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 03/02/2006  Added Documentation
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.CacheDirectory">
 -----------------------------------------------------------------------------
 <summary>
 The CacheDirectory property is used to return the location of the "Cache"
 Directory for the Module
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 04/28/2005  Created
 </history>
 -----------------------------------------------------------------------------
 

</member><member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.CacheFileName">
 -----------------------------------------------------------------------------
 <summary>
 The CacheFileName property is used to store the FileName for this Module's
 Cache
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 04/28/2005  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.PortalModuleBase">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : PortalModuleBase
 
 -----------------------------------------------------------------------------
 <summary>
 The PortalModuleBase class defines a custom base class inherited by all
 desktop portal modules within the Portal.
 
 The PortalModuleBase class defines portal specific properties
 that are used by the portal framework to correctly display portal modules
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	09/17/2004	Added Documentation
								Modified LocalResourceFile to be Writeable
		[cnurse]	10/21/2004	Modified Settings property to get both
								TabModuleSettings and ModuleSettings
     [cnurse]    12/15/2007  Refactored to support the new IModuleControl 
                             Interface
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddressMethods">
	<summary>
 Addressing Methods (personalized or hidden)
 </summary>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Priority">
	<summary>
 Priority of emails to be sent
 </summary>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Subject">
	<summary>
 Subject of the emails to be sent
 </summary>
	<remarks>may contain tokens</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Body">
	<summary>
 body text of the email to be sent
 </summary>
	<remarks>may contain HTML tags and tokens. Side effect: sets BodyFormat autmatically</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.BodyFormat">
	<summary>format of body text for the email to be sent.</summary>
	<remarks>by default activated, if tokens are found in Body and subject.</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddressMethod">
	<summary>address method for the email to be sent (TO or BCC)</summary>
	<remarks>TO is default value</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.PortalAlias">
	<summary>portal alias http path to be used for links to images, ...</summary>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SendingUser">
	<summary>UserInfo of the user sending the mail</summary>
	<remarks>if not set explicitely, currentuser will be used</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.ReplyTo">
	<summary>email of the user to be shown in the mail as replyTo address</summary>
	<remarks>if not set explicitely, sendingUser will be used</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.RemoveDuplicates">
	<summary>shall duplicate email addresses be ignored? (default value: false)</summary>
	<remarks>Duplicate Users (e.g. from multiple role selections) will always be ignored.</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SuppressTokenReplace">
	<summary>Shall automatic TokenReplace be prohibited?</summary>
	<remarks>default value: false</remarks>
</member><member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.ReportRecipients">
	<summary>Shall List of recipients appended to confirmation report?</summary>
	<remarks>enabled by default.</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.initObjects">
	<summary>internal method to initialize used objects, depending on parameters of New() method</summary>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SendConfirmationMail(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
	<summary>Send bulkmail confirmation to admin</summary>
	<param name="numRecipients">number of email recipients</param>
	<param name="numMessages">number of messages sent, -1 if not determinable</param>
	<param name="numErrors">number of emails not sent</param>
	<param name="Subject">Subject of BulkMail sent (to be used as reference)</param>
	<param name="StartedAt">date/time, sendout started</param>
	<param name="MailErrors">mail error texts</param>
	<param name="RecipientList">List of recipients as formatted string</param>
	<remarks></remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.matchLanguageFilter(System.String)">
	<summary>check, if the user's language matches the current language filter</summary>
	<param name="UserLanguage">Language of the user</param>
	<returns>userlanguage matches current languageFilter</returns>
	<remarks>if userlanguage is empty or filter not set, true is returned</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.conditionallyAddUser(DotNetNuke.Entities.Users.UserInfo@,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{DotNetNuke.Entities.Users.UserInfo}@)">
	<summary>add a user to the userlist, if it is not already in there</summary>
	<param name="user">user to add</param>
	<param name="keyList">list of key (either email addresses or userid's)</param>
	<param name="userList">List of users</param>
	<remarks>for use by Recipients method only</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.#ctor">
	<summary>create a new object with default settings only.</summary>
	<remarks>not all properties can be set individually, use other overload, if you need to set ReplaceTokens to False or another portal alias in image paths.</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{DotNetNuke.Entities.Users.UserInfo},System.Boolean,System.String,System.String)">
	<summary>create a new object with individual settings.</summary>
	<param name="AddressedRoles">List of role names, to address members</param>
	<param name="AddressedUsers">List of individual recipients</param>
	<param name="removeDuplicates">Shall duplicate emails be ignored?</param>
	<param name="Subject">Subject for Emails to be sent</param>
	<param name="Body">Email Body (plain Text or HTML)</param>
	<remarks>Body and Subjects may contain tokens to be replaced</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SetSMTPServer(System.String,System.String,System.String,System.String,System.Boolean)">
	<summary>Specify SMTP server to be used</summary>
	<param name="SMTPServer">name of the SMTP server</param>
	<param name="SMTPAuthentication">authentication string (0: anonymous, 1: basic, 2: NTLM)</param>
	<param name="SMTPUsername">username to log in SMTP server</param>
	<param name="SMTPPassword">password to log in SMTP server</param>
	<param name="SMTPEnableSSL">SSL used to connect tp SMTP server</param>
	<returns>always true</returns>
	<remarks>if not called, values will be taken from host settings</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddAttachment(System.String)">
	<summary>Add a single attachment file to the email</summary>
	<param name="pAttachment">path to file to attach</param>
	<remarks>secure storages are currently not supported</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddAddressedUser(DotNetNuke.Entities.Users.UserInfo)">
	<summary>Add a single recipient</summary>
	<param name="recipient">userinfo of user to add</param>
	<remarks>emaiol will be used for addressing, other properties might be used for TokenReplace</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddAddressedRole(System.String)">
	<summary>Add all members of a role to recipient list</summary>
	<param name="roleName">name of a role, whose members shall be added to recipients</param>
	<remarks>emaiol will be used for addressing, other properties might be used for TokenReplace</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Recipients">
	<summary>All bulk mail recipients, derived from role names and individual adressees </summary>
	<returns>List of userInfo objects, who receive the bulk mail </returns>
	<remarks>user.Email used for sending, other properties might be used for TokenReplace</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SendMails">
	<summary>Send bulkmail to all recipients according to settings</summary>
	<returns>Number of emails sent, null.integer if not determinable</returns>
	<remarks>Detailed status report is sent by email to sending user</remarks>
</member><member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Send">
	<summary>Wrapper for Function SendMails</summary>
</member><member name="T:DotNetNuke.Services.Mail.SendTokenizedBulkEmail">
 -----------------------------------------------------------------------------
 <summary>
 SendTokenizedBulkEmail Class is a class to manage the sending of bulk mails
 that contains tokens, which might be replaced with individual user properties
 </summary>
	<remarks>
	</remarks>
	<history>
     [sleupold]	8/15/2007	created to support tokens and localisation
     [sleupold]  9/09/2007   refactored interface for enhanced type safety
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Framework.UserControlBase">
 -----------------------------------------------------------------------------
 <summary>
 The UserControlBase class defines a custom base class inherited by all
 user controls within the Portal. 
 </summary>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
	<returns>The created Object</returns>
	<remarks>Overload for creating an object from a Provider configured in web.config</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
	<param name="UseCache">Caching switch</param>
	<returns>The created Object</returns>
	<remarks>Overload for creating an object from a Provider configured in web.config</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
	<param name="ObjectNamespace">The namespace of the object to create.</param>
	<param name="ObjectAssemblyName">The assembly of the object to create.</param>
	<returns>The created Object</returns>
	<remarks>Overload for creating an object from a Provider including NameSpace and 
 AssemblyName ( this allows derived providers to share the same config )</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
	<param name="ObjectNamespace">The namespace of the object to create.</param>
	<param name="ObjectAssemblyName">The assembly of the object to create.</param>
	<param name="UseCache">Caching switch</param>
	<returns>The created Object</returns>
	<remarks>Overload for creating an object from a Provider including NameSpace and 
 AssemblyName ( this allows derived providers to share the same config )</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
	<param name="ObjectProviderName">The name of the Provider</param>
	<param name="ObjectNamespace">The namespace of the object to create.</param>
	<param name="ObjectAssemblyName">The assembly of the object to create.</param>
	<returns>The created Object</returns>
	<remarks>Overload for creating an object from a Provider including NameSpace, 
 AssemblyName and ProviderName</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
	<param name="ObjectProviderName">The name of the Provider</param>
	<param name="ObjectNamespace">The namespace of the object to create.</param>
	<param name="ObjectAssemblyName">The assembly of the object to create.</param>
	<param name="UseCache">Caching switch</param>
	<returns>The created Object</returns>
	<remarks>Overload for creating an object from a Provider including NameSpace, 
 AssemblyName and ProviderName</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="TypeName">The fully qualified TypeName</param>
	<param name="CacheKey">The Cache Key</param>
	<returns>The created Object</returns>
	<remarks>Overload that takes a fully-qualified typename and a Cache Key</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<param name="TypeName">The fully qualified TypeName</param>
	<param name="CacheKey">The Cache Key</param>
	<param name="UseCache">Caching switch</param>
	<returns>The created Object</returns>
	<remarks>Overload that takes a fully-qualified typename and a Cache Key</remarks>
	<history>
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.Reflection.CreateObject``1">
 -----------------------------------------------------------------------------
 <summary>
 Creates an object
 </summary>
	<typeparam name="T">The type of object to create</typeparam>
	<returns></returns>
	<remarks>Generic version</remarks>
	<history>
 	[cnurse]	    10/13/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Framework.Reflection">
 -----------------------------------------------------------------------------
 Namespace: DotNetNuke.Framework
 Project	 : DotNetNuke
 Class	 : Reflection
 -----------------------------------------------------------------------------
 <summary>
 Library responsible for reflection
 </summary>
	<remarks>
	</remarks>
	<history>
 	[Nik Kalyani]	10/15/2004	Replaced brackets in parameter names
 	[cnurse]	    10/13/2005	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.PageBase.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Creates the Page
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Framework.PageBase.PageStatePersister">
 -----------------------------------------------------------------------------
 <summary>
 PageStatePersister returns an instance of the class that will be used to persist the Page State
 </summary>
	<returns>A System.Web.UI.PageStatePersister</returns>
	<history>
 	[cnurse]	    11/30/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.PageBase.ProcessControl(System.Web.UI.Control,System.Collections.ArrayList,System.Boolean,System.String)">
	<summary>
		<para>ProcessControl peforms the high level localization for a single control and optionally it's children.</para>
	</summary>
	<param name="c">Control to find the AttributeCollection on</param>
	<param name="affectedControls">ArrayList that hold the controls that have been localized. This is later used for the removal of the key attribute.</param>
	<param name="includeChildren">If true, causes this method to process children of this controls.</param>
</member><member name="M:DotNetNuke.Framework.PageBase.GetControlAttribute(System.Web.UI.Control,System.Collections.ArrayList)">
	<summary>
		<para>GetControlAttribute looks a the type of control and does it's best to find an AttributeCollection.</para>
	</summary>
	<param name="c">Control to find the AttributeCollection on</param>
	<param name="affectedControls">ArrayList that hold the controls that have been localized. This is later used for the removal of the key attribute.</param>
	<returns>A string containing the key for the specified control or null if a key attribute wasn't found</returns>
</member><member name="M:DotNetNuke.Framework.PageBase.RemoveKeyAttribute(System.Collections.ArrayList)">
	<summary>
		<para>RemoveKeyAttribute remove the key attribute from the control. If this isn't done, then the HTML output will have 
 a bad attribute on it which could cause some older browsers problems.</para>
	</summary>
	<param name="affectedControls">ArrayList that hold the controls that have been localized. This is later used for the removal of the key attribute.</param>
</member><member name="M:DotNetNuke.Framework.PageBase.OnPreRender(System.EventArgs)">
	<summary>
		<seealso cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)"/>
	</summary>
	<param name="evt">An EventArgs that controls the event data.</param>
</member><member name="M:DotNetNuke.Framework.PageBase.IterateControls(System.Collections.ArrayList)">
	<summary>
		<para>IterateControls performs the high level localization for each control on the page.</para>
	</summary>
</member><member name="T:DotNetNuke.Framework.PageBase">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Framework
 Project:    DotNetNuke
 Class:      PageBase
 -----------------------------------------------------------------------------
 <summary>
 PageBase provides a custom DotNetNuke base class for pages
 </summary>
	<history>
		[cnurse]	11/30/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.DiskPageStatePersister.#ctor(System.Web.UI.Page)">
 -----------------------------------------------------------------------------
 <summary>
 Creates the DiskPageStatePersister
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Framework.DiskPageStatePersister.CacheDirectory">
 -----------------------------------------------------------------------------
 <summary>
 The CacheDirectory property is used to return the location of the "Cache"
 Directory for the Portal
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 11/30/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Framework.DiskPageStatePersister.StateFileName">
 -----------------------------------------------------------------------------
 <summary>
 The StateFileName property is used to store the FileName for the State
 </summary>
	<remarks>
	</remarks>
	<history>
   [cnurse] 11/30/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.DiskPageStatePersister.Load">
 -----------------------------------------------------------------------------
 <summary>
 Loads the Page State from the Cache
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.DiskPageStatePersister.Save">
 -----------------------------------------------------------------------------
 <summary>
 Saves the Page State to the Cache
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Framework.DiskPageStatePersister">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Framework
 Project:    DotNetNuke
 Class:      DiskPageStatePersister
 -----------------------------------------------------------------------------
 <summary>
 DiskPageStatePersister provides a disk (stream) based page state peristence mechanism
 </summary>
	<history>
		[cnurse]	11/30/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.CDefault.ScrollToControl(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 Allows the scroll position on the page to be moved to the top of the passed in control.
 </summary>
	<param name="objControl">Control to scroll to</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	3/30/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Framework.CDefault">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : CDefault
 
 -----------------------------------------------------------------------------
 <summary>
	</summary>
	<remarks>
	</remarks>
	<history>
 	[sun1]	1/19/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.CachePageStatePersister.#ctor(System.Web.UI.Page)">
 -----------------------------------------------------------------------------
 <summary>
 Creates the CachePageStatePersister
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.CachePageStatePersister.Load">
 -----------------------------------------------------------------------------
 <summary>
 Loads the Page State from the Cache
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.CachePageStatePersister.Save">
 -----------------------------------------------------------------------------
 <summary>
 Saves the Page State to the Cache
 </summary>
	<history>
 	[cnurse]	    11/30/2006	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Framework.CachePageStatePersister">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Framework
 Project:    DotNetNuke
 Class:      CachePageStatePersister
 -----------------------------------------------------------------------------
 <summary>
 CachePageStatePersister provides a cache based page state peristence mechanism
 </summary>
	<history>
		[cnurse]	11/30/2006	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.IsHostEnabled">
 -----------------------------------------------------------------------------
 <summary>
 IsHostEnabled is used to determine whether the Host user has enabled AJAX.
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.IsEnabled">
 -----------------------------------------------------------------------------
 <summary>
 IsEnabled can be used to determine if AJAX has been enabled already as we
 only need one Script Manager per page.
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.IsInstalled">
 -----------------------------------------------------------------------------
 <summary>
 IsInstalled can be used to determine if AJAX is installed on the server
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.RegisterScriptManager">
 -----------------------------------------------------------------------------
 <summary>
 RegisterScriptManager must be used by developers to instruct the framework that AJAX is required on the page
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.ScriptManagerControl(System.Web.UI.Page)">
 -----------------------------------------------------------------------------
 <summary>
 ScriptManagerControl provides a reference to the ScriptManager control on the page
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.AddScriptManager(System.Web.UI.Page)">
 -----------------------------------------------------------------------------
 <summary>
 AddScriptManager is used internally by the framework to add a ScriptManager control to the page
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.RemoveScriptManager(System.Web.UI.Page)">
 -----------------------------------------------------------------------------
 <summary>
 RemoveScriptManager will remove the ScriptManager control during Page Render if the RegisterScriptManager has not been called
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.SetScriptManagerProperty(System.Web.UI.Page,System.String,System.Object[])">
 -----------------------------------------------------------------------------
 <summary>
 SetScriptManagerProperty uses reflection to set properties on the dynamically generated ScriptManager control
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.CreateUpdatePanelControl">
 -----------------------------------------------------------------------------
 <summary>
 UpdatePanelControl dynamically creates an instance of an UpdatePanel control
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.RegisterPostBackControl(System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 Allows a control to be excluded from UpdatePanel async callback
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.WrapUpdatePanelControl(System.Web.UI.Control,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Wraps a control in an update panel
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.CreateUpdateProgressControl(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateProgressControl dynamically creates an instance of an UpdateProgress control
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.CreateUpdateProgressControl(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateProgressControl dynamically creates an instance of an UpdateProgress control
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.CreateUpdateProgressControl(System.String,System.Web.UI.Control)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateProgressControl dynamically creates an instance of an UpdateProgress control
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Framework.AJAX.ContentTemplateContainerControl(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 ContentTemplateContainerControl gets a reference to the ContentTemplateContainer control within an UpdatePanel
 </summary>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.FileSystem.FolderInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a FolderInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	07/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.FileSystem.FolderInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	07/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.FileSystem.FolderController.GetFoldersSortedCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetFoldersCallBack gets a Dictionary of Folders by Portal from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	07/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.FileSystem.FolderController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : FolderController
 
 -----------------------------------------------------------------------------
 <summary>
 Business Class that provides access to the Database for the functions within the calling classes
 Instantiates the instance of the DataProvider and returns the object, if any
 </summary>
	<remarks>
	</remarks>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddFile(System.Int32,System.IO.Stream,System.String,System.String,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a File
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="inStream">The stream to add</param>
	<param name="contentType">The type of the content</param>
	<param name="length">The length of the content</param>
	<param name="folderName">The name of the folder</param>
	<param name="closeInputStream">A flag that dermines if the Input Stream should be closed.</param>
	<param name="ClearCache">A flag that indicates whether the file cache should be cleared</param>
	<remarks>This method adds a new file
 </remarks>
	<history>
     [cnurse]    04/26/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddFolder(System.Int32,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a Folder
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="relativePath">The relative path of the folder</param>
	<param name="StorageLocation">The type of storage location</param>
	<history>
     [cnurse]    04/26/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.CheckValidFileName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Checks that the file name is valid
 </summary>
	<param name="strFileName">The name of the file</param>
	<history>
     [cnurse]    04/26/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.GetFileName(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the filename for a file path
 </summary>
	<param name="filePath">The full name of the file</param>
	<history>
     [cnurse]    04/26/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.UpdateFile(System.String,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a File
 </summary>
	<param name="strSourceFile">The original File Name</param>
	<param name="strDestFile">The new File Name</param>
	<param name="isCopy">Flag determines whether file is to be be moved or copied</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/2/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.WriteStream(System.Int32,System.IO.Stream,System.String,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a Stream to the appropriate File Storage
 </summary>
	<param name="fileId">The Id of the File</param>
	<param name="inStream">The Input Stream</param>
	<param name="fileName">The name of the file</param>
	<param name="StorageLocation">The type of storage location</param>
	<param name="closeInputStream">A flag that dermines if the Input Stream should be closed.</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	04/27/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddFile(System.String,System.Int32,System.Boolean,DotNetNuke.Services.FileSystem.FolderInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a File
 </summary>
	<param name="strFile">The File Name</param>
	<param name="PortalId">The Id of the Portal</param>
	<param name="ClearCache">A flag that indicates whether the file cache should be cleared</param>
	<remarks>This method is called by the SynchonizeFolder method, when the file exists in the file system
 but not in the Database
 </remarks>
	<history>
 	[cnurse]	12/2/2004	Created
     [cnurse]    04/26/2006  Updated to account for secure storage
     [cnurse]    04/07/2008  Made public
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddFolder(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a Folder
 </summary>
	<param name="_PortalSettings">Portal Settings for the Portal</param>
	<param name="parentFolder">The Parent Folder Name</param>
	<param name="newFolder">The new Folder Name</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/4/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddFolder(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a Folder
 </summary>
	<param name="_PortalSettings">Portal Settings for the Portal</param>
	<param name="parentFolder">The Parent Folder Name</param>
	<param name="newFolder">The new Folder Name</param>
	<param name="StorageLocation">The Storage Location</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/4/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddToZip(ICSharpCode.SharpZipLib.Zip.ZipOutputStream@,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a File to a Zip File
 </summary>
	<history>
 	[cnurse]	12/4/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.CopyFile(System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Trys to copy a file in the file system
 </summary>
	<param name="sourceFileName">The name of the source file</param>
	<param name="destFileName">The name of the destination file</param>
	<history>
     [cnurse]    06/27/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.CopyFile(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
 Copies a File
 </summary>
	<param name="strSourceFile">The original File Name</param>
	<param name="strDestFile">The new File Name</param>
	<param name="settings">The Portal Settings for the Portal/Host Account</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/2/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DefaultProtectedFolders(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 This checks to see if the folder is a protected type of folder 
 </summary>
	<param name="folderPath">String</param>
	<returns>Boolean</returns>
	<remarks>
	</remarks>
	<history>
 	[cpaterra]	4/7/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFileWithWait(System.String,System.Int16,System.Int16)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes file in areas with a high degree of concurrent file access (i.e. caching, logging) 
 This solves file concurrency issues under heavy load.
 </summary>
	<param name="filename">String</param>
	<param name="waitInMilliseconds">Int16</param>
	<param name="maxAttempts">Int16</param>
	<returns>Boolean</returns>
	<remarks>
	</remarks>
	<history>
 	[dcaron]	9/17/2009	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFile(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Trys to delete a file from the file system
 </summary>
	<param name="strFileName">The name of the file</param>
	<history>
     [cnurse]    04/26/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFile(System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a file
 </summary>
	<param name="strSourceFile">The File to delete</param>
	<param name="settings">The Portal Settings for the Portal/Host Account</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	11/1/2004	Created
     [cnurse]        12/6/2004   delete file from db
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFile(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a file
 </summary>
	<param name="strSourceFile">The File to delete</param>
	<param name="settings">The Portal Settings for the Portal/Host Account</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	11/1/2004	Created
     [cnurse]        12/6/2004   delete file from db
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFolder(System.Int32,System.IO.DirectoryInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes a folder
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="folder">The Directory Info object to delete</param>
	<param name="folderName">The Name of the folder relative to the Root of the Portal</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/4/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DownloadFile(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Moved directly from FileManager code, probably should make extension lookup more generic
 </summary>
	<param name="FileLoc">File Location</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	11/1/2004	Created
 	[Jon Henning]	1/4/2005	Fixed extension comparison, added content length header - DNN-386
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DownloadFile(DotNetNuke.Entities.Portals.PortalSettings,System.Int32,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Streams a file to the output stream if the user has the proper permissions
 </summary>
	<param name="settings">Portal Settings</param>
	<param name="FileId">FileId identifying file in database</param>
	<param name="ClientCache">Cache file in client browser - true/false</param>
	<param name="ForceDownload">Force Download File dialog box - true/false</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DownloadFile(System.Int32,System.Int32,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Streams a file to the output stream if the user has the proper permissions
 </summary>
	<param name="PortalId">The Id of the Portal to which the file belongs</param>
	<param name="FileId">FileId identifying file in database</param>
	<param name="ClientCache">Cache file in client browser - true/false</param>
	<param name="ForceDownload">Force Download File dialog box - true/false</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.GetContentType(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 gets the content type based on the extension
 </summary>
	<param name="extension">The extension</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	04/26/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.GetFolders(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets all the folders for a Portal
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	04/22/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.GetFoldersByParentFolder(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets all the subFolders for a Parent
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	04/22/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.MoveFile(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
 Moves (Renames) a File
 </summary>
	<param name="strSourceFile">The original File Name</param>
	<param name="strDestFile">The new File Name</param>
	<param name="settings">The Portal Settings for the Portal/Host Account</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/2/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.SetFileAttributes(System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Assigns 1 or more attributes to a file
 </summary>
	<param name="FileLoc">File Location</param>
	<param name="FileAttributesOn">Pass in Attributes you wish to switch on (i.e. FileAttributes.Hidden + FileAttributes.ReadOnly)</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	11/1/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.SetFolderPermissions(System.Int32,System.Int32,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sets a Folders Permissions to the Administrator Role
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="FolderId">The Id of the Folder</param>
	<param name="AdministratorRoleId">The Id of the Administrator Role</param>
	<param name="relativePath">The folder's Relative Path</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	12/4/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.SetFolderPermissions(System.Int32,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sets a Folders Permissions the same as the Folders parent folder
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="FolderId">The Id of the Folder</param>
	<param name="relativePath">The folder's Relative Path</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	08/01/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.SetFolderPermission(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sets a Folder Permission
 </summary>
	<param name="PortalId">The Id of the Portal</param>
	<param name="FolderId">The Id of the Folder</param>
	<param name="PermissionId">The Id of the Permission</param>
	<param name="RoleId">The Id of the Role</param>
	<param name="relativePath">The folder's Relative Path</param>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/12/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.UnzipFile(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
 -----------------------------------------------------------------------------
 <summary>
 Unzips a File
 </summary>
	<param name="fileName">The zip File Name</param>
	<param name="DestFolder">The folder where the file is extracted to</param>
	<param name="settings">The Portal Settings for the Portal/Host Account</param>
	<remarks>
	</remarks>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.UploadFile(System.String,System.Web.HttpPostedFile,System.Boolean)">
	<summary>
 UploadFile pocesses a single file 
 </summary>
	<param name="RootPath">The folder wherr the file will be put</param>
	<param name="objHtmlInputFile">The file to upload</param>
	<param name="Unzip"></param>
</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.UploadFile(System.String,System.Web.HttpPostedFile,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 UploadFile pocesses a single file 
 </summary>
	<param name="RootPath">The folder wherr the file will be put</param>
	<param name="objHtmlInputFile">The file to upload</param>
	<param name="NewFileName"></param>
	<param name="Unzip"></param>
	<remarks>
	</remarks>
	<history>
     [cnurse]        16/9/2004   Updated for localization, Help and 508
     [Philip Beadle] 10/06/2004  Moved to Globals from WebUpload.ascx.vb so can be accessed by URLControl.ascx
     [cnurse]        04/26/2006  Updated for Secure Storage
     [sleupold]      08/14/2007  Added NewFileName
     [sdarkis]       10/19/2009  Calls CreateFile
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.CreateFileFromString(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 UploadFile pocesses a single file 
 </summary>
	<param name="RootPath">The folder where the file will be put</param>
	<param name="FileName">The file name</param>
	<param name="FileData">Content of the file</param>
	<param name="ContentType">Type of content, ie: text/html</param>
	<param name="NewFileName"></param>
	<param name="Unzip"></param>
	<remarks>
	</remarks>
	<history>
     [cnurse]        16/9/2004   Updated for localization, Help and 508
     [Philip Beadle] 10/06/2004  Moved to Globals from WebUpload.ascx.vb so can be accessed by URLControl.ascx
     [cnurse]        04/26/2006  Updated for Secure Storage
     [sleupold]      08/14/2007  Added NewFileName
     [sdarkis]       10/19/2009  Creates a file from a string
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.WriteFile(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Writes file to response stream.  Workaround offered by MS for large files
 http://support.microsoft.com/default.aspx?scid=kb;EN-US;812406
 </summary>
	<param name="strFileName">FileName</param>
	<remarks>
	</remarks>
	<history>
 	[Jon Henning]	1/4/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.FileSystem.FileServerHandler.ProcessRequest(System.Web.HttpContext)">
 -----------------------------------------------------------------------------
 <summary>
 This handler handles requests for LinkClick.aspx, but only those specifc
 to file serving
 </summary>
	<param name="context">System.Web.HttpContext)</param>
	<remarks>
	</remarks>
	<history>
 	[cpaterra]	4/19/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="F:DotNetNuke.Services.FileSystem.FileInfo._FileId">
 -----------------------------------------------------------------------------
 <summary>
 The Primary Key ID of the current File, as represented within the Database table named "Files"
 </summary>
	<remarks>
 This Integer Property is passed to the FileInfo Collection
 </remarks>
	<history>
 	[DYNST]	2/1/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.FileSystem.FileInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : FileInfo
 
 -----------------------------------------------------------------------------
 <summary>
 Represents the File object and holds the Properties of that object
 </summary>
	<remarks>
	</remarks>
	<history>
 	[DYNST]	2/1/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.FileSystem.FileController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : FileController
 
 -----------------------------------------------------------------------------
 <summary>
 Business Class that provides access to the Database for the functions within the calling classes
 Instantiates the instance of the DataProvider and returns the object, if any
 </summary>
	<remarks>
	</remarks>
	<history>
 	[DYNST]	2/1/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.IsVisible">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the ControlPanel is Visible
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 Gets the current Portal Settings
 </summary>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.UserMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets the User mode of the Control Panel
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.AddModulePermission(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Security.Permissions.PermissionInfo,System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a Module Permission
 </summary>
	<param name="permission">The permission to add</param>
	<param name="roleId">The Id of the role to add the permission for.</param>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.AddExistingModule(System.Int32,System.Int32,System.String,System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Adds an Existing Module to a Pane
 </summary>
	<param name="align">The alignment for the Modue</param>
	<param name="moduleId">The Id of the existing module</param>
	<param name="tabId">The id of the tab</param>
	<param name="paneName">The pane to add the module to</param>
	<param name="position">The relative position within the pane for the module</param>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.AddNewModule(System.String,System.Int32,System.String,System.Int32,DotNetNuke.UI.ControlPanels.ControlPanelBase.ViewPermissionType,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Adds a New Module to a Pane
 </summary>
	<param name="align">The alignment for the Modue</param>
	<param name="desktopModuleId">The Id of the DesktopModule</param>
	<param name="permissionType">The View Permission Type for the Module</param>
	<param name="title">The Title for the resulting module</param>
	<param name="paneName">The pane to add the module to</param>
	<param name="position">The relative position within the pane for the module</param>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.BuildURL(System.Int32,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Builds a URL
 </summary>
	<param name="FriendlyName">The friendly name of the Module</param>
	<param name="PortalID">The ID of the portal</param>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.SetUserMode(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Sets the UserMode
 </summary>
	<param name="userMode">The userMode to set</param>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.SetVisibleMode(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Sets the current Visible Mode
 </summary>
	<param name="isVisible">A flag indicating whether the Control Panel should be visible</param>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.LocalResourceFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Local ResourceFile for the Control Panel
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.ControlPanels.ControlPanelBase">
 -----------------------------------------------------------------------------
 <summary>
 The ControlPanel class defines a custom base class inherited by all
 ControlPanel controls.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/11/2008  documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.LanguagePackWriter.Language">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Language
 </summary>
	<value>An Locale object</value>
	<history>
 	[cnurse]	01/30/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.LanguagePackWriter.LanguagePack">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Language Pack
 </summary>
	<value>An LanguagePackInfo object</value>
	<history>
 	[cnurse]	05/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.LanguagePackWriter">
 -----------------------------------------------------------------------------
 <summary>
 The LanguagePackWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.AppCodeFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of AppCodeFiles that should be included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	02/12/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.AppCodePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Path for the Package's app code files
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/12/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Assemblies">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Assemblies that should be included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.AssemblyPath">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Path for the Package's assemblies
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.BasePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Base Path for the Package
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.CleanUpFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of CleanUpFiles that should be included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	02/21/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Files">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Files that should be included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.HasProjectFile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether a project file is found in the folder
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.IncludeAssemblies">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to include Assemblies
 </summary>
	<value>A Boolean</value>
	<history>
 	[cnurse]	02/06/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.LegacyError">
	<summary>
 Gets and sets whether there are any errors in parsing legacy packages
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Log">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Logger
 </summary>
	<value>An Logger object</value>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Package">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Package
 </summary>
	<value>An PackageInfo object</value>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Resources">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Resources that should be included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	02/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Scripts">
 -----------------------------------------------------------------------------
 <summary>
 Gets a Dictionary of Scripts that should be included in the Package
 </summary>
	<value>A Dictionary(Of String, InstallFile)</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Versions">
 -----------------------------------------------------------------------------
 <summary>
 Gets a List of Versions that should be included in the Package
 </summary>
	<value>A List(Of String)</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterBase.WriteManifest(System.String,System.String)">
	<summary>
 WriteManifest writes an existing manifest
 </summary>
	<param name="manifestName">The name of the manifest file</param>
	<param name="manifest">The manifest</param>
	<remarks>This overload takes a package manifest and writes it to a file</remarks>
</member><member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterBase.WriteManifest(System.Xml.XmlWriter,System.String)">
	<summary>
 WriteManifest writes a package manifest to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter</param>
	<param name="manifest">The manifest</param>
	<remarks>This overload takes a package manifest and writes it to a Writer</remarks>
</member><member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterBase.WriteManifest(System.Boolean)">
	<summary>
 WriteManifest writes the manifest assoicated with this PackageWriter to a string
 </summary>
	<param name="packageFragment">A flag that indicates whether to return the package element
 as a fragment (True) or whether to add the outer dotnetnuke and packages elements (False)</param>
	<returns>The manifest as a string</returns>
	<remarks></remarks>
</member><member name="T:DotNetNuke.Services.Installer.Writers.PackageWriterBase">
 -----------------------------------------------------------------------------
 <summary>
 The PackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterFactory.GetWriter(DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 The GetWriter method instantiates the relevant PackageWriter Installer
 </summary>
	<param name="package">The associated PackageInfo instance</param>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.PackageWriterFactory">
 -----------------------------------------------------------------------------
 <summary>
 The PackageWriterFactory is a factory class that is used to instantiate the
 appropriate Package Writer
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ModulePackageWriter.DesktopModule">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Desktop Module
 </summary>
	<value>A DesktopModuleInfo object</value>
	<history>
 	[cnurse]	02/01/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.ModulePackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The ModulePackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.FileComponentWriter.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the FileComponentWriter
 </summary>
	<param name="basePath">The Base Path for the files</param>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("files")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("File")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("file")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.Log">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Logger
 </summary>
	<value>A Logger</value>
	<history>
 	[cnurse]	02/06/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.Package">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Package
 </summary>
	<value>A PackageInfo</value>
	<history>
 	[cnurse]	02/11/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.FileComponentWriter.WriteCustomManifest(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 The WriteCustomManifest method writes the custom manifest items (that subclasses
 of FileComponentWriter may need)
 </summary>
	<param name="writer">The Xmlwriter to use</param>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.FileComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The FileComponentWriter class handles creating the manifest for File Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the SkinComponentWriter
 </summary>
	<param name="skinName">The name of the Skin</param>
	<param name="basePath">The Base Path for the files</param>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("skinFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("Skin")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("skinFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.SkinNameNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the SkinName Node ("skinName")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.WriteCustomManifest(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 The WriteCustomManifest method writes the custom manifest items (that subclasses
 of FileComponentWriter may need)
 </summary>
	<param name="writer">The Xmlwriter to use</param>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.SkinComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The SkinComponentWriter class handles creating the manifest for Skin Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.SkinPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The SkinPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.ContainerPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The ContainerPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the ContainerComponentWriter
 </summary>
	<param name="containerName">The name of the Container</param>
	<param name="basePath">The Base Path for the files</param>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("containerFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("Skin")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("containerFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.SkinNameNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the SkinName Node ("containerName")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The ContainerComponentWriter class handles creating the manifest for Container
 Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("assemblies")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("Assembly")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("assembly")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The AssemblyComponentWriter class handles creating the manifest for Assembly
 Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/01/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.AuthenticationPackageWriter.AuthSystem">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated Authentication System
 </summary>
	<value>An AuthenticationInfo object</value>
	<history>
 	[cnurse]	01/30/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.AuthenticationPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/30/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.AllowAccess">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets  aflag that indicates whether the user or role has permission
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.DisplayName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User's DisplayName
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.RoleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Role ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.RoleName">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Role Name
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.UserID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.Username">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User Name
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionInfoBase.FillInternal(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillInternal fills the PermissionInfoBase from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.PermissionInfoBase">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : PermissionInfoBase
 -----------------------------------------------------------------------------
 <summary>
 PermissionInfoBase provides a base class for PermissionInfo classes
 </summary>
	<remarks>All Permission calsses have  a common set of properties
   - AllowAccess
   - RoleID
   - RoleName
   - UserID
   - Username
   - DisplayName
 
 and these are implemented in this base class
 </remarks>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.CompareTabPermissions">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : CompareTabPermissions
 -----------------------------------------------------------------------------
 <summary>
 CompareTabPermissions provides the a custom IComparer implementation for 
 TabPermissionInfo objects
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.CompareModulePermissions">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : CompareModulePermissions
 -----------------------------------------------------------------------------
 <summary>
 CompareModulePermissions provides the a custom IComparer implementation for 
 ModulePermissionInfo objects
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : DesktopModuleSupportedFeature
 -----------------------------------------------------------------------------
 <summary>
 The DesktopModuleSupportedFeature enum provides an enumeration of Supported 
 Features
 </summary>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.VisibilityState">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : VisibilityState
 -----------------------------------------------------------------------------
 <summary>
 The VisibilityState enum provides an enumeration of the Visibility options
 </summary>
	<history>
 	[cnurse]	01/11/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Actions.ModuleActionType">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Class		: ModuleActionType
-----------------------------------------------------------------------------
 <summary>
 Identifies common module action types
 </summary>
	<remarks>
 Common action types can be specified in the CommandName attribute of the 
 ModuleAction class
 </remarks>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.Actions.ActionEventHandler">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Entities.Modules.Actions
 Class:      ActionEventHandler
 -----------------------------------------------------------------------------
 <summary>
 The ActionEventHandler delegate defines a custom event handler for an Action
 Event.
 </summary>
	<history>
     [cnurse]	01/12/2008	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.ObjectMappingInfo.#ctor">
-----------------------------------------------------------------------------
 <summary>
 Constructs a new ObjectMappingInfo Object
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.CacheKey">
 -----------------------------------------------------------------------------
 <summary>
 CacheKey gets the root value of the key used to identify the cached collection 
 in the ASP.NET Cache.
 </summary>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.CacheByProperty">
 -----------------------------------------------------------------------------
 <summary>
 CacheByProperty gets and sets the property that is used to cache collections
 of the object.  For example: Modules are cached by the "TabId" proeprty.  Tabs 
 are cached by the PortalId property.
 </summary>
	<remarks>If empty, a collection of all the instances of the object is cached.</remarks>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.CacheTimeOutMultiplier">
 -----------------------------------------------------------------------------
 <summary>
 CacheTimeOutMultiplier gets and sets the multiplier used to determine how long
 the cached collection should be cached.  It is multiplied by the Performance
 Setting - which in turn can be modified by the Host Account.
 </summary>
	<remarks>Defaults to 20.</remarks>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.ColumnNames">
 -----------------------------------------------------------------------------
 <summary>
 ColumnNames gets a dictionary of Database Column Names for the Object
 </summary>
	<history>
 	[cnurse]	12/02/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.ObjectType">
 -----------------------------------------------------------------------------
 <summary>
 ObjectType gets and sets the type of the object
 </summary>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.PrimaryKey">
 -----------------------------------------------------------------------------
 <summary>
 PrimaryKey gets and sets the property of the object that corresponds to the
 primary key in the database
 </summary>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.Properties">
 -----------------------------------------------------------------------------
 <summary>
 Properties gets a dictionary of Properties for the Object
 </summary>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.TableName">
 -----------------------------------------------------------------------------
 <summary>
 TableName gets and sets the name of the database table that is used to
 persist the object.
 </summary>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Utilities.ObjectMappingInfo">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Common.Utilities
 Class:      ObjectMappingInfo
 -----------------------------------------------------------------------------
 <summary>
 The ObjectMappingInfo class is a helper class that holds the mapping information
 for a particular type.  This information is in two parts:
     - Information about the Database Table that the object is mapped to
     - Information about how the object is cached.
 For each object, when it is first accessed, reflection is used on the class and
 an instance of ObjectMappingInfo is created, which is cached for performance.
 </summary>
	<history>
     [cnurse]	12/01/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.CreateObjectFromReader(System.Type,System.Data.IDataReader,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 CreateObjectFromReader creates an object of a specified type from the 
 provided DataReader
 </summary>
	<param name="objType">The type of the Object</param>
	<param name="dr">The IDataReader to use to fill the object</param>
	<param name="closeReader">A flag that indicates whether the DataReader should be closed</param>
	<returns>The object (TObject)</returns>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionaryFromReader``2(System.String,System.Data.IDataReader,System.Collections.Generic.IDictionary{``0,``1})">
 -----------------------------------------------------------------------------
 <summary>
 FillDictionaryFromReader fills a dictionary of objects of a specified type 
 from a DataReader.
 </summary>
	<typeparam name="TKey">The type of the key</typeparam>
	<typeparam name="TValue">The type of the value</typeparam>
	<param name="keyField">The key field for the object.  This is used as 
 the key in the Dictionary.</param>
	<param name="dr">The IDataReader to use to fill the objects</param>
	<param name="objDictionary">The Dictionary to fill.</param>
	<returns>A Dictionary of objects (T)</returns>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillListFromReader(System.Type,System.Data.IDataReader,System.Collections.IList,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillListFromReader fills a list of objects of a specified type 
 from a DataReader
 </summary>
	<param name="objType">The type of the business object</param>
	<param name="dr">The IDataReader to use to fill the objects</param>
	<param name="objList">The List to Fill</param>
	<param name="closeReader">A flag that indicates whether the DataReader should be closed</param>
	<returns>A List of objects (TItem)</returns>
	<remarks></remarks>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillListFromReader``1(System.Data.IDataReader,System.Collections.Generic.IList{``0},System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillListFromReader fills a list of objects of a specified type 
 from a DataReader
 </summary>
	<typeparam name="TItem">The type of the business object</typeparam>
	<param name="dr">The IDataReader to use to fill the objects</param>
	<param name="objList">The List to Fill</param>
	<param name="closeReader">A flag that indicates whether the DataReader should be closed</param>
	<returns>A List of objects (TItem)</returns>
	<remarks></remarks>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillObjectFromReader(System.Object,System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillObjectFromReader fills an object from the provided DataReader.  If the object 
 implements the IHydratable interface it will use the object's IHydratable.Fill() method.
 Otherwise, it will use reflection to fill the object.
 </summary>
	<param name="objObject">The object to fill</param>
	<param name="dr">The DataReader</param>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.HydrateObject(System.Object,System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 HydrateObject uses reflection to hydrate an object.
 </summary>
	<param name="objObject">The object to Hydrate</param>
	<param name="dr">The IDataReader that contains the columns of data for the object</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetCacheByProperty(System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 GetCacheByProperty gets the name of the Property that the object is cached by.
 For most modules this would be the "ModuleID".  In the core Tabs are cached 
 by "PortalID" and Modules are cached by "TabID".
 </summary>
	<param name="objType">The type of the business object</param>
	<returns>The name of the Property</returns>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetCacheTimeOutMultiplier(System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 GetCacheTimeOutMultiplier gets the multiplier to use in the sliding cache 
 expiration.  This value is multiplier by the Host Performance setting, which
 in turn can be set by the Host Account.
 </summary>
	<param name="objType">The type of the business object</param>
	<returns>The timeout expiry multiplier</returns>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetColumnName(System.Reflection.PropertyInfo)">
 -----------------------------------------------------------------------------
 <summary>
 GetColumnName gets the name of the Database Column that maps to the property.
 </summary>
	<param name="objProperty">The proeprty of the business object</param>
	<returns>The name of the Database Column</returns>
	<history>
 	[cnurse]	12/02/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetObjectMapping(System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 GetObjectMapping gets an instance of the ObjectMappingInfo class for the type.
 This is cached using a high priority as reflection is expensive.
 </summary>
	<param name="objType">The type of the business object</param>
	<returns>An ObjectMappingInfo object representing the mapping for the object</returns>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetPrimaryKey(System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 GetPrimaryKey gets the Primary Key property
 </summary>
	<param name="objType">The type of the business object</param>
	<returns>The name of the Primary Key property</returns>
	<history>
 	[cnurse]	12/01/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetTableName(System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 GetTableName gets the name of the Database Table that maps to the object.
 </summary>
	<param name="objType">The type of the business object</param>
	<returns>The name of the Database Table</returns>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.CloneObject(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 CloneObject clones an object
 </summary>
	<param name="objObject">The Object to Clone</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.CreateObject``1">
 -----------------------------------------------------------------------------
 <summary>
 CreateObject creates a new object of Type TObject.
 </summary>
	<typeparam name="TObject">The type of object to create.</typeparam>
	<remarks>This overload does not initialise the object</remarks>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.CreateObject``1(System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 CreateObject creates a new object of Type TObject.
 </summary>
	<typeparam name="TObject">The type of object to create.</typeparam>
	<param name="initialise">A flag that indicates whether to initialise the
 object.</param>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.CreateObject(System.Type,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 CreateObject creates a new object.
 </summary>
	<param name="objType">The type of object to create.</param>
	<param name="initialise">A flag that indicates whether to initialise the
 object.</param>
	<history>
 	[cnurse]	11/30/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 FillCollection fills a Collection of objects from a DataReader
 </summary>
	<param name="dr">The Data Reader</param>
	<param name="objType">The type of the Object</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillCollection fills a Collection of objects from a DataReader
 </summary>
	<param name="dr">The Data Reader</param>
	<param name="objType">The type of the Object</param>
	<param name="closeReader">Flag that indicates whether the Data Reader should be closed.</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type,System.Collections.IList@)">
 -----------------------------------------------------------------------------
 <summary>
 FillCollection fills a Collection of objects from a DataReader
 </summary>
	<param name="dr">The Data Reader</param>
	<param name="objType">The type of the Object</param>
	<param name="objToFill">An IList to fill</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillCollection fills a Collection of objects from a DataReader
 </summary>
	<typeparam name="TItem">The type of object</typeparam>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader,System.Collections.Generic.IList{``0}@)">
 -----------------------------------------------------------------------------
 <summary>
 FillCollection fills a Collection of objects from a DataReader
 </summary>
	<typeparam name="TItem">The type of object</typeparam>
	<param name="objToFill">The List to fill</param>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader,System.Collections.Generic.IList{``0},System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillCollection fills a List of objects from a DataReader
 </summary>
	<typeparam name="TItem">The type of the Object</typeparam>
	<param name="objToFill">The List to fill</param>
	<param name="dr">The Data Reader</param>
	<param name="closeReader">A flag that indicates whether the DataReader should be closed</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type@,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 Generic version of FillCollection fills a List custom business object of a specified type 
 from the supplied DataReader
 </summary>
	<param name="dr">The IDataReader to use to fill the object</param>
	<param name="objType">The type of the Object</param>
	<param name="totalRecords">The total No of records</param>
	<returns>A List of custom business objects</returns>
	<remarks></remarks>
	<history>
 	[cnurse]	01/28/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 Generic version of FillCollection fills a List custom business object of a specified type 
 from the supplied DataReader
 </summary>
	<typeparam name="T">The type of the business object</typeparam>
	<param name="dr">The IDataReader to use to fill the object</param>
	<returns>A List of custom business objects</returns>
	<remarks></remarks>
	<history>
 	[cnurse]	10/10/2005	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``1(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillDictionary fills a Dictionary of objects from a DataReader
 </summary>
	<typeparam name="TItem">The value for the Dictionary Item</typeparam>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``1(System.Data.IDataReader,System.Collections.Generic.IDictionary{System.Int32,``0}@)">
 -----------------------------------------------------------------------------
 <summary>
 FillDictionary fills a Dictionary of objects from a DataReader
 </summary>
	<typeparam name="TItem">The value for the Dictionary Item</typeparam>
	<param name="objToFill">The Dictionary to fill</param>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``2(System.String,System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillDictionary fills a Dictionary of objects from a DataReader
 </summary>
	<typeparam name="TKey">The key for the Dictionary</typeparam>
	<typeparam name="TValue">The value for the Dictionary Item</typeparam>
	<param name="keyField">The key field used for the Key</param>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``2(System.String,System.Data.IDataReader,System.Collections.Generic.IDictionary{``0,``1})">
 -----------------------------------------------------------------------------
 <summary>
 FillDictionary fills a Dictionary of objects from a DataReader
 </summary>
	<typeparam name="TKey">The key for the Dictionary</typeparam>
	<typeparam name="TValue">The value for the Dictionary Item</typeparam>
	<param name="keyField">The key field used for the Key</param>
	<param name="objDictionary">The Dictionary to fill</param>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillObject``1(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillObject fills an object from a DataReader
 </summary>
	<typeparam name="TObject">The type of the object</typeparam>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillObject``1(System.Data.IDataReader,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillObject fills an object from a DataReader
 </summary>
	<typeparam name="TObject">The type of the object</typeparam>
	<param name="dr">The Data Reader</param>
	<param name="closeReader">A flag that indicates the reader should be closed</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillObject(System.Data.IDataReader,System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 FillObject fills an object from a DataReader
 </summary>
	<param name="dr">The Data Reader</param>
	<param name="objType">The type of the object</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillObject(System.Data.IDataReader,System.Type,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillObject fills an object from a DataReader
 </summary>
	<param name="dr">The Data Reader</param>
	<param name="objType">The type of the object</param>
	<param name="closeReader">A flag that indicates the reader should be closed</param>
	<history>
 	[cnurse]	11/29/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.FillSortedList``2(System.String,System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillSortedList fills a SortedList of objects from a DataReader
 </summary>
	<typeparam name="TKey">The key for the SortedList</typeparam>
	<typeparam name="TValue">The value for the SortedList Item</typeparam>
	<param name="keyField">The key field used for the Key</param>
	<param name="dr">The Data Reader</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetCachedObject``1(DotNetNuke.Common.Utilities.CacheItemArgs,DotNetNuke.Common.Utilities.CacheItemExpiredCallback)">
 -----------------------------------------------------------------------------
 <summary>
 GetCachedObject gets an object from the Cache
 </summary>
	<typeparam name="TObject">The type of th object to fetch</typeparam>
	<param name="cacheItemArgs">A CacheItemArgs object that provides parameters to manage the
 cache AND to fetch the item if the cache has expired</param>
	<param name="cacheItemExpired">A CacheItemExpiredCallback delegate that is used to repopulate
 the cache if the item has expired</param>
	<history>
 	[cnurse]	01/13/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetProperties``1">
 -----------------------------------------------------------------------------
 <summary>
 GetProperties gets a Dictionary of the Properties for an object
 </summary>
	<typeparam name="TObject">The type of the object</typeparam>
	<history>
 	[cnurse]	01/17/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.GetProperties(System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 GetProperties gets a Dictionary of the Properties for an object
 </summary>
	<param name="objType">The type of the object</param>
	<history>
 	[cnurse]	01/17/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.InitializeObject(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 InitializeObject initialises all the properties of an object to their 
 Null Values.
 </summary>
	<param name="objObject">The object to Initialise</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.InitializeObject(System.Object,System.Type)">
 -----------------------------------------------------------------------------
 <summary>
 InitializeObject initialises all the properties of an object to their 
 Null Values.
 </summary>
	<param name="objObject">The object to Initialise</param>
	<param name="objType">The type of the object</param>
	<history>
 	[cnurse]	11/29/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeObject serializes an Object
 </summary>
	<param name="objObject">The object to Initialise</param>
	<param name="fileName">A filename for the resulting serialized xml</param>
	<history>
 	[cnurse]	01/17/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.Xml.XmlDocument)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeObject serializes an Object
 </summary>
	<param name="objObject">The object to Initialise</param>
	<param name="document">An XmlDocument to serialize to</param>
	<history>
 	[cnurse]	01/17/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.IO.Stream)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeObject serializes an Object
 </summary>
	<param name="objObject">The object to Initialise</param>
	<param name="stream">A Stream to serialize to</param>
	<history>
 	[cnurse]	01/17/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.IO.TextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeObject serializes an Object
 </summary>
	<param name="objObject">The object to Initialise</param>
	<param name="textWriter">A TextWriter to serialize to</param>
	<history>
 	[cnurse]	01/17/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 SerializeObject serializes an Object
 </summary>
	<param name="objObject">The object to Initialise</param>
	<param name="writer">An XmlWriter to serialize to</param>
	<history>
 	[cnurse]	01/17/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Utilities.CBO">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Common.Utilities
 Class:      CBO
 -----------------------------------------------------------------------------
 <summary>
 The CBO class generates objects.
 </summary>
	<history>
     [cnurse]	12/01/2007	Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.WebControls.PackageTypeEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
 -----------------------------------------------------------------------------
 <summary>
 RenderEditMode renders the Edit mode of the control
 </summary>
	<param name="writer">A HtmlTextWriter.</param>
	<history>
     [cnurse]	02/27/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.WebControls.PackageTypeEditControl">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Services.Installer.Packages.WebControls
 Class:      PackageTypeEditControl
 -----------------------------------------------------------------------------
 <summary>
 The PackageTypeEditControl control provides a standard UI component for editing 
 package types.
 </summary>
	<history>
     [cnurse]	01/25/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.PackageCreatedEventHandler">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Services.Installer.Packages
 Class:      PackageCreatedEventHandler
 -----------------------------------------------------------------------------
 <summary>
 The PackageCreatedEventHandler delegate defines a custom event handler for a
 PAckage Created Event.
 </summary>
	<history>
     [cnurse]	01/23/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageCreatedEventArgs.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo)">
-----------------------------------------------------------------------------
 <summary>
 Builds a new PackageCreatedEventArgs
 </summary>
	<param name="package">The package associated with this event</param>
	<remarks></remarks>
	<history>
     [cnurse]	01/23/2008	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageCreatedEventArgs.Package">
-----------------------------------------------------------------------------
 <summary>
 Gets the Package associated with this event
 </summary>
	<history>
     [cnurse]	01/23/2008	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.PackageCreatedEventArgs">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Namespace   : DotNetNuke.Services.Installer.Packages
 Class		: PackageCreatedEventArgs
-----------------------------------------------------------------------------
 <summary>
 PackageCreatedEventArgs provides a custom EventArgs class for a
 Package Created Event.
 </summary>
	<history>
     [cnurse]	01/23/2008	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageEditorBase.PackageID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Package ID
 </summary>
	<value>An Integer</value>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Packages.PackageEditorBase.IsWizard">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Editor is in the Wizard
 </summary>
	<value>An Boolean</value>
	<history>
 	[cnurse]	08/26/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageEditorBase.Initialize">
 -----------------------------------------------------------------------------
 <summary>
 Used to Initialize the Control
 </summary>
	<history>
 	[cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Packages.PackageEditorBase.UpdatePackage">
 -----------------------------------------------------------------------------
 <summary>
 Used to Update the Package
 </summary>
	<history>
 	[cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Packages.PackageEditorBase">
 -----------------------------------------------------------------------------
 <summary>
 The PackageEditorBase class provides a Base Classs for Package Editors
 </summary>
	<history>
 	[cnurse]	02/04/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.LegacyUtil">
 -----------------------------------------------------------------------------
 <summary>
 The LegacyUtil class is a Utility class that provides helper methods to transfer
 legacy packages to Cambrian's Universal Installer based system
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/23/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new PackageInstaller instance
 </summary>
	<param name="package">A PackageInfo instance</param>
	<history>
 	[cnurse]	01/21/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.#ctor(System.String,DotNetNuke.Services.Installer.InstallerInfo)">
 -----------------------------------------------------------------------------
 <summary>
 This Constructor creates a new PackageInstaller instance
 </summary>
	<param name="info">An InstallerInfo instance</param>
	<param name="packageManifest">The manifest as a string</param>
	<history>
 	[cnurse]	01/16/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.PackageInstaller.DeleteFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Packages files are deleted when uninstalling the
 package
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	01/31/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.PackageInstaller.IsValid">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Package is Valid
 </summary>
	<value>A Boolean value</value>
	<history>
 	[cnurse]	01/16/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.CheckSecurity">
 -----------------------------------------------------------------------------
 <summary>
 The CheckSecurity method checks whether the user has the appropriate security
 </summary>
	<history>
 	[cnurse]	09/04/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.ReadComponents(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadComponents method reads the components node of the manifest file.
 </summary>
	<history>
 	[cnurse]	01/21/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.ValidateVersion(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 The ValidateVersion method checks whether the package is already installed
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method commits the package installation
 </summary>
	<history>
 	[cnurse]	08/01/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the components of the package
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file and parses it into components.
 </summary>
	<history>
 	[cnurse]	07/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method rolls back the package installation
 </summary>
	<history>
 	[cnurse]	07/31/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The Uninstall method uninstalls the components of the package
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.PackageInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The PackageInstaller class is an Installer for Packages
 </summary>
	<history>
 	[cnurse]	01/16/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ModuleInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.DeleteModule">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteModule method deletes the Module from the data Store.
 </summary>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Modules this is not neccessary</remarks>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the Module component
 </summary>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file for the Module compoent.
 </summary>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the Module component
 </summary>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ModuleInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The ModuleInstaller installs Module Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("resourceFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("resourceFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.Manifest">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Manifest
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.CommitFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The CommitFile method commits a single file.
 </summary>
	<param name="insFile">The InstallFile to commit</param>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.DeleteFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteFile method deletes a single assembly.
 </summary>
	<param name="file">The InstallFile to delete</param>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.InstallFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The InstallFile method installs a single assembly.
 </summary>
	<param name="insFile">The InstallFile to install</param>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a flag that determines what type of file this installer supports
 </summary>
	<param name="type">The type of file being processed</param>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.ReadManifestItem(System.Xml.XPath.XPathNavigator,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifestItem method reads a single node
 </summary>
	<param name="nav">The XPathNavigator representing the node</param>
	<param name="checkFileExists">Flag that determines whether a check should be made</param>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.RollbackFile(DotNetNuke.Services.Installer.InstallFile)">
 -----------------------------------------------------------------------------
 <summary>
 The RollbackFile method rolls back the install of a single file.
 </summary>
	<remarks>For new installs this removes the added file.  For upgrades it restores the
 backup file created during install</remarks>
	<param name="insFile">The InstallFile to commit</param>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The ResourceFileInstaller installs Resource File Components (zips) to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/18/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.LanguageInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("languageFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.LanguageInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("languageFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.LanguageInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.DeleteLanguage">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteLanguage method deletes the Language
 from the data Store.
 </summary>
	<history>
 	[cnurse]	02/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ProcessFile method determines what to do with parsed "file" node
 </summary>
	<param name="file">The file represented by the node</param>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/07/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadCustomManifest method reads the custom manifest items
 </summary>
	<param name="nav">The XPathNavigator representing the node</param>
	<history>
 	[cnurse]	08/22/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Modules this is not neccessary</remarks>
	<history>
 	[cnurse]	01/15/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the language component
 </summary>
	<history>
 	[cnurse]	02/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	02/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the language component
 </summary>
	<history>
 	[cnurse]	02/11/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.LanguageInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The LanguageInstaller installs Language Packs to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	01/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.#ctor">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new DesktopModulePermissionInfo
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs a new DesktopModulePermissionInfo
 </summary>
	<param name="permission">A PermissionInfo object</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.DesktopModulePermissionID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the DesktopModule Permission ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.PortalDesktopModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the PortalDesktopModule ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.Equals(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Compares if two DesktopModulePermissionInfo objects are equivalent/equal
 </summary>
	<param name="obj">a DesktopModulePermissionObject</param>
	<returns>true if the permissions being passed represents the same permission
 in the current object
 </returns>
	<remarks>
 This function is needed to prevent adding duplicates to the DesktopModulePermissionCollection.
 DesktopModulePermissionCollection.Contains will use this method to check if a given permission
 is already included in the collection.
 </remarks>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a DesktopModulePermissionInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : DesktopModulePermissionInfo
 -----------------------------------------------------------------------------
 <summary>
 DesktopModulePermissionInfo provides the Entity Layer for DesktopModulePermissionInfo 
 Permissions
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.ClearPermissionCache">
 -----------------------------------------------------------------------------
 <summary>
 ClearPermissionCache clears the DesktopModule Permission Cache
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.FillDesktopModulePermissionDictionary(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 FillDesktopModulePermissionDictionary fills a Dictionary of DesktopModulePermissions from a
 dataReader
 </summary>
	<param name="dr">The IDataReader</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.GetDesktopModulePermissions">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModulePermissions gets a Dictionary of DesktopModulePermissionCollections by 
 DesktopModule.
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.GetDesktopModulePermissionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModulePermissionsCallBack gets a Dictionary of DesktopModulePermissionCollections by 
 DesktopModule from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.AddDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 AddDesktopModulePermission adds a DesktopModule Permission to the Database
 </summary>
	<param name="objDesktopModulePermission">The DesktopModule Permission to add</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.DeleteDesktopModulePermission(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteDesktopModulePermission deletes a DesktopModule Permission in the Database
 </summary>
	<param name="DesktopModulePermissionID">The ID of the DesktopModule Permission to delete</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.DeleteDesktopModulePermissionsByPortalDesktopModuleID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteDesktopModulePermissionsByPortalDesktopModuleID deletes a DesktopModule's 
 DesktopModule Permission in the Database
 </summary>
	<param name="portalDesktopModuleID">The ID of the DesktopModule to delete</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.DeleteDesktopModulePermissionsByUserID(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteDesktopModulePermissionsByUserID deletes a user's DesktopModule Permission in the Database
 </summary>
	<param name="objUser">The user</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.GetDesktopModulePermission(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModulePermission gets a DesktopModule Permission from the Database
 </summary>
	<param name="DesktopModulePermissionID">The ID of the DesktopModule Permission</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.GetDesktopModulePermissions(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetDesktopModulePermissions gets a DesktopModulePermissionCollection
 </summary>
	<param name="portalDesktopModuleID">The ID of the DesktopModule</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.HasDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionCollection,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HasDesktopModulePermission checks whether the current user has a specific DesktopModule Permission
 </summary>
	<param name="objDesktopModulePermissions">The Permissions for the DesktopModule</param>
	<param name="permissionKey">The Permission to check</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.UpdateDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionInfo)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateDesktopModulePermission updates a DesktopModule Permission in the Database
 </summary>
	<param name="objDesktopModulePermission">The DesktopModule Permission to update</param>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.DesktopModulePermissionController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : DesktopModulePermissionController
 -----------------------------------------------------------------------------
 <summary>
 DesktopModulePermissionController provides the Business Layer for DesktopModule Permissions
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.DesktopModulePermissionCollection">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : DesktopModulePermissionCollection
 -----------------------------------------------------------------------------
 <summary>
 DesktopModulePermissionCollection provides the a custom collection for DesktopModulePermissionInfo
 objects
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.CompareDesktopModulePermissions">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : CompareDesktopModulePermissions
 -----------------------------------------------------------------------------
 <summary>
 CompareDesktopModulePermissions provides the a custom IComparer implementation for 
 DesktopModulePermissionInfo objects
 </summary>
	<history>
 	[cnurse]	01/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.Permissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Permissions Collection
 </summary>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.PortalDesktopModuleID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Id of the PortalDesktopModule
 </summary>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.GetDesktopModulePermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the DesktopModulePermissions from the Data Store
 </summary>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.ParseKeys(System.String[])">
 -----------------------------------------------------------------------------
 <summary>
 Parse the Permission Keys used to persist the Permissions in the ViewState
 </summary>
	<param name="Settings">A string array of settings</param>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Updates a Permission
 </summary>
	<param name="permissions">The permissions collection</param>
	<param name="user">The user to add</param>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.GetPermissions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the permissions from the Database
 </summary>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.LoadViewState(System.Object)">
 -----------------------------------------------------------------------------
 <summary>
 Load the ViewState
 </summary>
	<param name="savedState">The saved state</param>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.SaveViewState">
 -----------------------------------------------------------------------------
 <summary>
 Saves the ViewState
 </summary>
	<history>
     [cnurse]    02/22/2008  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.SupportsDenyPermissions">
 -----------------------------------------------------------------------------
 <summary>
 returns whether or not the derived grid supports Deny permissions
 </summary>
	<history>
     [cnurse]    01/09/2006  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinPackageInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinPackageInfo
 
 -----------------------------------------------------------------------------
 <summary>
     Handles the Business Object for Skins
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/04/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.SkinInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Class	 : SkinInfo
 
 -----------------------------------------------------------------------------
 <summary>
     Handles the Business Object for Skins
 </summary>
	<remarks>
	</remarks>
	<history>
 	[willhsc]	3/3/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.EventListeners.SkinEventHandler">
 -----------------------------------------------------------------------------
 <summary>
 The SkinEventHandler delegate defines a custom event handler for a Skin
 Event.
 </summary>
	<history>
     [cnurse]	05/19/2009	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.EventListeners.SkinEventArgs">
-----------------------------------------------------------------------------
 <summary>
 SkinEventArgs provides a custom EventARgs class for Skin Events
 </summary>
	<remarks></remarks>
	<history>
     [cnurse]	05/19/2009	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Skins.EventListeners.SkinEventType">
-----------------------------------------------------------------------------
 <summary>
 SkinEventType provides a custom enum for skin event types
 </summary>
	<remarks></remarks>
	<history>
     [cnurse]	05/19/2009	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Modules.ISettingsControl">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.UI.Modules
 Class	 : ISettingsControl
 -----------------------------------------------------------------------------
 <summary>
 ISettingsControl provides a common Interface for Module Settings Controls
 </summary>
	<history>
 	[cnurse]	12/24/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.UI.ControlUtilities.LoadControl``1(System.Web.UI.TemplateControl,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 LoadControl loads a control and returns a reference to the control
 </summary>
	<typeparam name="T">The type of control to Load</typeparam>
	<param name="containerControl">The parent Container Control</param>
	<param name="ControlSrc">The source for the control.  This can either be a User Control (.ascx) or a compiled
 control.</param>
	<returns>A Control of type T</returns>
	<history>
 	[cnurse]	12/05/2007	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventType">
-----------------------------------------------------------------------------
 <summary>
 ContainerEventType provides a custom enum for Container event types
 </summary>
	<remarks></remarks>
	<history>
     [cnurse]	05/19/2009	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventHandler">
 -----------------------------------------------------------------------------
 <summary>
 The ContainerEventHandler delegate defines a custom event handler for a Container
 Event.
 </summary>
	<history>
     [cnurse]	05/19/2009	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventArgs">
-----------------------------------------------------------------------------
 <summary>
 ContainerEventArgs provides a custom EventARgs class for Container Events
 </summary>
	<remarks></remarks>
	<history>
     [cnurse]	05/20/2009	Created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Tokens.EmptyPropertyAccess">
	<summary>
 Returns an Empty String for all Properties
 </summary>
	<remarks></remarks>
</member><member name="P:DotNetNuke.Services.Search.SearchConfig.SearchIncludeCommon">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to inlcude Common Words in the Search Index
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Search.SearchConfig.SearchIncludeNumeric">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to inlcude Numbers in the Search Index
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Search.SearchConfig.SearchMaxWordlLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets the maximum Search Word length to index
 </summary>
	<remarks>Defaults to 25</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Search.SearchConfig.SearchMinWordlLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets the maximum Search Word length to index
 </summary>
	<remarks>Defaults to 3</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Search.SearchConfig">
 -----------------------------------------------------------------------------
 <summary>
 The SearchConfig class provides a configuration class for Search
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Localization.LocaleCollectionWrapper.#ctor(DotNetNuke.Services.Localization.LocaleCollection)">
 -----------------------------------------------------------------------------
 <summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Localization.LocaleCollectionWrapper"/>
  class containing the specified collection <see cref="T:DotNetNuke.Services.Localization.Locale"/> objects.
 </summary>
	<param name="Locales">A <see cref="T:DotNetNuke.Services.Localization.LocaleCollection"/> object 
 which is wrapped by the collection. </param>
	<remarks>This overloaded constructor copies the <see cref="T:DotNetNuke.ModuleAction"/>s
  from the indicated array.</remarks>
	<history>
 	[jbrinkman]	11/17/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Localization.LocaleCollectionWrapper">
 -----------------------------------------------------------------------------
 <summary>
 The LocaleCollectionWrapper class provides a simple wrapper around a  
 <see cref="T:DotNetNuke.Services.Localization.LocaleCollection"/>. 
 </summary>
	<remarks>
 The <see cref="T:DotNetNuke.Services.Localization.LocaleCollection"/> class
 implements a custom dictionary class which does not provide for simple databinding.
 This wrapper class exposes the individual objects of the underlying dictionary class
 thereby allowing for simple databinding to the colleciton of objects.
 </remarks>
	<history>
 	[jbrinkman]	11/17/2004	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Localization.LocaleCollection">
	<summary>
		<para>The LocaleCollection class is a collection of Locale objects.  It stores the supported locales.</para>
	</summary>
</member><member name="T:DotNetNuke.Services.Localization.LanguagesListType">
 -----------------------------------------------------------------------------
 <summary>
 Enumeration that determines the type of Languages List
 </summary>
	<history>
 	[cnurse]	2/19/2008	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.#ctor(DotNetNuke.Services.Localization.Locale,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the LanguageComponentWriter
 </summary>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/08/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.#ctor(DotNetNuke.Services.Localization.LanguagePackInfo,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the LanguageComponentWriter
 </summary>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/08/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("languageFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/08/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("CoreLanguage/ExtensionLanguage")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/08/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("languageFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/08/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.WriteCustomManifest(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 The WriteCustomManifest method writes the custom manifest items
 </summary>
	<param name="writer">The Xmlwriter to use</param>
	<history>
 	[cnurse]	02/04/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The LanguageComponentWriter class handles creating the manifest for Language
 Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/08/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("scripts")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/11/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("Script")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/11/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("script")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/11/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The ScriptComponentWriter class handles creating the manifest for Script
 Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/11/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the ResourceFileComponentWriter
 </summary>
	<param name="basePath">The Base Path for the files</param>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/22/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("resourceFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/22/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("ResourceFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/22/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("resourceFile")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	02/22/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The ResourceFileComponentWriter class handles creating the manifest for Resource 
 File Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/22/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.SkinControlPackageWriter.SkinControl">
 -----------------------------------------------------------------------------
 <summary>
 Gets the associated SkinControl
 </summary>
	<value>A SkinControlInfo object</value>
	<history>
 	[cnurse]	03/28/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.SkinControlPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The SkinControlPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	03/28/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.ProviderPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The ProviderPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	05/29/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.LibraryPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The LibraryPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/07/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("widgetFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("widgetFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter.ComponentType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Component Type ("Widget")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The WidgetComponentWriter class handles creating the manifest for Widget Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/24/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.WidgetPackageWriter">
 -----------------------------------------------------------------------------
 <summary>
 The WidgetPackageWriter class 
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Writers.CleanupComponentWriter.#ctor(System.String,System.Collections.Generic.SortedList{System.String,DotNetNuke.Services.Installer.InstallFile})">
 -----------------------------------------------------------------------------
 <summary>
 Constructs the ContainerComponentWriter
 </summary>
	<param name="files">A Dictionary of files</param>
	<history>
 	[cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Writers.CleanupComponentWriter">
 -----------------------------------------------------------------------------
 <summary>
 The CleanupComponentWriter class handles creating the manifest for Cleanup
 Component(s)
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	02/21/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.DeleteSkinControl">
 -----------------------------------------------------------------------------
 <summary>
 The DeleteSkinControl method deletes the SkinControl from the data Store.
 </summary>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.Commit">
 -----------------------------------------------------------------------------
 <summary>
 The Commit method finalises the Install and commits any pending changes.
 </summary>
	<remarks>In the case of Modules this is not neccessary</remarks>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.Install">
 -----------------------------------------------------------------------------
 <summary>
 The Install method installs the Module component
 </summary>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file for the SkinControl compoent.
 </summary>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.Rollback">
 -----------------------------------------------------------------------------
 <summary>
 The Rollback method undoes the installation of the component in the event 
 that one of the other components fails
 </summary>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.UnInstall">
 -----------------------------------------------------------------------------
 <summary>
 The UnInstall method uninstalls the SkinControl component
 </summary>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.SkinControlInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The SkinControlInstaller installs SkinControl (SkinObject) Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.ProviderInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	03/28/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.ProviderInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The ProviderInstaller installs Provider Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	05/29/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.CollectionNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Collection Node ("widgetFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.ItemNodeName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the name of the Item Node ("widgetFiles")
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.PhysicalBasePath">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PhysicalBasePath for the widget files
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Installer.Installers.WidgetInstaller">
 -----------------------------------------------------------------------------
 <summary>
 The WidgetInstaller installs Widget Components to a DotNetNuke site
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	11/24/2008  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Installer.Installers.DashboardInstaller.AllowableFiles">
 -----------------------------------------------------------------------------
 <summary>
 Gets a list of allowable file extensions (in addition to the Host's List)
 </summary>
	<value>A String</value>
	<history>
 	[cnurse]	01/05/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Installers.DashboardInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
 -----------------------------------------------------------------------------
 <summary>
 The ReadManifest method reads the manifest file for the Authentication compoent.
 </summary>
	<history>
 	[cnurse]	07/25/2007  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Installer.Dependencies.InvalidDependency.#ctor(System.String)">
	<summary>
 Initializes a new instance of the <see cref="T:DotNetNuke.Services.Installer.Dependencies.InvalidDependency"/> class.
 </summary>
	<param name="ErrorMessage">The error message to display.</param>
</member><member name="T:DotNetNuke.Services.Installer.Dependencies.InvalidDependency">
 -----------------------------------------------------------------------------
 <summary>
 The InvalidDependency signifies a dependency that is always invalid, 
 taking the place of dependencies that could not be created
 </summary>
	<remarks>
	</remarks>
	<history>
 	[bdukes]	03/03/2009  created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalSettings.#ctor(System.Int32,DotNetNuke.Entities.Portals.PortalAliasInfo)">
 -----------------------------------------------------------------------------
 <summary>
 The PortalSettings Constructor encapsulates all of the logic
 necessary to obtain configuration settings necessary to render
 a Portal Tab view for a given request.
 </summary>
	<remarks>
	</remarks>
	<param name="tabId">The current tab</param>
	<param name="objPortalAliasInfo">The current portal</param>
	<history>
 	[cnurse]	10/21/2004	documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.DefaultModuleId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Module Id
 </summary>
	<remarks>Defaults to Null.NullInteger</remarks>
	<history>
 	[cnurse]	05/02/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.DefaultTabId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Tab Id
 </summary>
	<remarks>Defaults to Null.NullInteger</remarks>
	<history>
 	[cnurse]	05/02/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableBrowserLanguage">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Browser Language Detection is Enabled
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	02/19/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableUrlLanguage">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to use the Language in the Url
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	02/19/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableSkinWidgets">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Skin Widgets are enabled/supported
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	07/03/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.InlineEditorEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Inline Editor is enabled
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	08/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchIncludeCommon">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to inlcude Common Words in the Search Index
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchIncludeNumeric">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to inlcude Numbers in the Search Index
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchMaxWordlLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets the maximum Search Word length to index
 </summary>
	<remarks>Defaults to 25</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchMinWordlLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets the maximum Search Word length to index
 </summary>
	<remarks>Defaults to 3</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalSettings.GetPortalSettings(System.Int32,DotNetNuke.Entities.Portals.PortalInfo)">
 -----------------------------------------------------------------------------
 <summary>
 The GetPortalSettings method builds the site Settings
 </summary>
	<remarks>
	</remarks>
	<param name="tabID">The current tabs id</param>
	<param name="portal">The Portal object</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Portals.PortalSettings.VerifyPortalTab(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 The VerifyPortalTab method verifies that the TabId/PortalId combination
 is allowed and returns default/home tab ids if not
 </summary>
	<returns></returns>
	<remarks>
	</remarks>
	<param name="PortalId">The Portal's id</param>
	<param name="TabId">The current tab's id</param>
	<history>
	</history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Portals.PortalSettings">
 -----------------------------------------------------------------------------
 <summary>
 PortalSettings Class

 This class encapsulates all of the settings for the Portal, as well
 as the configuration settings required to execute the current tab
 view within the portal.
 </summary>
	<remarks>
	</remarks>
	<history>
 	[cnurse]	10/21/2004	documented
 	[cnurse]	10/21/2004	added GetTabModuleSettings
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Host.Host.GetSecureHostSettingsDictionaryCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetSecureHostSettingsDictionaryCallBack gets a Dictionary of Security Host 
 Settings from the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	07/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.AutoAccountUnlockDuration">
 -----------------------------------------------------------------------------
 <summary>
 Gets the AutoAccountUnlockDuration
 </summary>
	<remarks>Defaults to 10</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.AuthenticatedCacheability">
 -----------------------------------------------------------------------------
 <summary>
 Gets the AuthenticatedCacheability
 </summary>
	<remarks>Defaults to HttpCacheability.ServerAndNoCache</remarks>
	<history>
 	[cnurse]	03/05/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.CheckUpgrade">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Upgrade Indicator is enabled
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ControlPanel">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Control Panel
 </summary>
	<remarks>Defaults to glbDefaultControlPanel constant</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DefaultAdminContainer">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Admin Container
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DefaultAdminSkin">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Admin Skin
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DefaultDocType">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Doc Type
 </summary>
	<history>
 	[cnurse]	07/14/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DefaultPortalContainer">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Portal Container
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DefaultPortalSkin">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Default Portal Skin
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DemoPeriod">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Demo Period for new portals
 </summary>
	<remarks>Defaults to -1</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DemoSignup">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether demo signups are enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	04/14/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DisplayBetaNotice">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to dislpay the beta notice
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	05/19/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.DisplayCopyright">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to dislpay the copyright
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	03/05/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableAJAX">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether AJAX is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableFileAutoSync">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether File AutoSync is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ContentLocalization">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether content localization has been enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cathal]	20/10/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ContentLocale">
 -----------------------------------------------------------------------------
 <summary>
 Gets the content locale used by dynamic localisation
 </summary>
	<remarks>If content localization is not enabled, defaults to portal default language</remarks>
	<history>
 	[cathal]	20/10/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableBrowserLanguage">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Browser Language Detection is Enabled
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	02/19/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableModuleOnLineHelp">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Module Online Help is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableRequestFilters">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Request Filters are Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableUrlLanguage">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to use the Language in the Url
 </summary>
	<remarks>Defaults to True</remarks>
	<history>
 	[cnurse]	02/19/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableUsersOnline">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Users Online are Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EnableSMTPSSL">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether SSL is Enabled for SMTP
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.EventLogBuffer">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Event Log Buffer is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.FileExtensions">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Allowed File Extensions
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.GUID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the GUID
 </summary>
	<history>
 	[cnurse]	12/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HelpURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Help URL
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostCurrency">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host Currency
 </summary>
	<remarks>Defaults to USD</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostEmail">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host Email
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostFee">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host Fee
 </summary>
	<remarks>Defaults to 0</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostPortalID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host Portal's PortalId
 </summary>
	<remarks>Defaults to Null.NullInteger</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostSpace">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host Space
 </summary>
	<remarks>Defaults to 0</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostTitle">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host Title
 </summary>
	<history>
 	[cnurse]	12/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HostURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Host URL
 </summary>
	<history>
 	[cnurse]	04/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.HttpCompressionAlgorithm">
 -----------------------------------------------------------------------------
 <summary>
 Gets the HttpCompression Algorithm
 </summary>
	<remarks>Defaults to Null.NullInteger(None)</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ModuleCachingMethod">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Module Caching method
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PageCachingMethod">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Page Caching method
 </summary>
	<history>
 	[jbrinkman]	11/17/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PageQuota">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Page Quota
 </summary>
	<remarks>Defaults to 0</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PageStatePersister">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PageState Persister
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PasswordExpiry">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Password Expiry
 </summary>
	<remarks>Defaults to 0</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PasswordExpiryReminder">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Password Expiry Reminder window
 </summary>
	<remarks>Defaults to 7 (1 week)</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PaymentProcessor">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Payment Processor
 </summary>
	<history>
 	[cnurse]	04/14/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.PerformanceSetting">
 -----------------------------------------------------------------------------
 <summary>
 Gets the PerformanceSettings
 </summary>
	<remarks>Defaults to PerformanceSettings.ModerateCaching</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ProcessorPassword">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Payment Processor Password
 </summary>
	<history>
 	[cnurse]	04/14/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ProcessorUserId">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Payment Processor User Id
 </summary>
	<history>
 	[cnurse]	04/14/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ProxyPassword">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Proxy Server Password
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ProxyPort">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Proxy Server Port
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ProxyServer">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Proxy Server
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ProxyUsername">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Proxy Server UserName
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.RememberCheckbox">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to use the remember me checkbox
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	04/14/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SchedulerMode">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Scheduler Mode
 </summary>
	<remarks>Defaults to SchedulerMode.TIMER_METHOD</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SearchIncludeCommon">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to inlcude Common Words in the Search Index
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SearchIncludeNumeric">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether to inlcude Numbers in the Search Index
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SearchMaxWordlLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets the maximum Search Word length to index
 </summary>
	<remarks>Defaults to 25</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SearchMinWordlLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets the maximum Search Word length to index
 </summary>
	<remarks>Defaults to 3</remarks>
	<history>
 	[cnurse]	03/10/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SiteLogBuffer">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Site Log Buffer size
 </summary>
	<remarks>Defaults to 1</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SiteLogHistory">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Site Log History
 </summary>
	<remarks>Defaults to -1</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SiteLogStorage">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Site Log Storage location
 </summary>
	<remarks>Defaults to "D"</remarks>
	<history>
 	[cnurse]	03/05/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SMTPAuthentication">
 -----------------------------------------------------------------------------
 <summary>
 Gets the SMTP Authentication
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SMTPPassword">
 -----------------------------------------------------------------------------
 <summary>
 Gets the SMTP Password
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SMTPServer">
 -----------------------------------------------------------------------------
 <summary>
 Gets the SMTP Server
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.SMTPUsername">
 -----------------------------------------------------------------------------
 <summary>
 Gets the SMTP Username
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.ThrowCBOExceptions">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Exceptions are rethrown
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	07/24/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.UseFriendlyUrls">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Friendly Urls is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.UseCustomErrorMessages">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether Custom Error Messages is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.UserQuota">
 -----------------------------------------------------------------------------
 <summary>
 Gets the User Quota
 </summary>
	<remarks>Defaults to 0</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.UsersOnlineTimeWindow">
 -----------------------------------------------------------------------------
 <summary>
 Gets the window to use in minutes when determining if the user is online
 </summary>
	<remarks>Defaults to 15</remarks>
	<history>
 	[cnurse]	01/29/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.WebRequestTimeout">
 -----------------------------------------------------------------------------
 <summary>
 Gets the WebRequest Timeout value
 </summary>
	<remarks>Defaults to 10000</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.WhitespaceFilter">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Whitespace Filter is Enabled
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.Host.jQueryDebug">
	<summary>
 Gets whether to use the minified or debug version of the jQuery scripts
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
     [jbrinkman]    09/30/2008    Created
 </history>
</member><member name="P:DotNetNuke.Entities.Host.Host.jQueryHosted">
	<summary>
 Gets whether to use a hosted version of the jQuery script file
 </summary>
	<remarks>Defaults to False</remarks>
	<history>
     [jbrinkman]    09/30/2008    Created
 </history>
</member><member name="P:DotNetNuke.Entities.Host.Host.jQueryUrl">
	<summary>
 Gets the Url for a hosted version of jQuery
 </summary>
	<remarks>Defaults to the DefaultHostedUrl constant in the jQuery class.
 The framework will default to the latest released 1.x version hosted on Google.
 </remarks>
	<history>
     [jbrinkman]    09/30/2008    Created
 </history>
</member><member name="M:DotNetNuke.Entities.Host.Host.GetHostSetting(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetHostSetting gets a single Host Setting
 </summary>
	<param name="key">The Setting key</param>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Host.Host.GetHostSettingsDictionary">
 -----------------------------------------------------------------------------
 <summary>
 GetHostSettingDictionary gets a Dictionary of Host Settings from the cache or
 from the the Database.
 </summary>
	<history>
 	[cnurse]	07/15/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Host.Host.GetSecureHostSetting(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetHostSetting gets a single Secure Host Setting
 </summary>
	<param name="key">The Setting key</param>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Host.Host.GetSecureHostSettingsDictionary">
 -----------------------------------------------------------------------------
 <summary>
 GetSecureHostSettingDictionary gets a Dictionary of SecureHost Settings from the cache or
 from the the Database.
 </summary>
	<history>
 	[cnurse]	01/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.#ctor(DotNetNuke.Entities.Users.UserInfo,System.String,DotNetNuke.Security.Membership.UserLoginStatus,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 All properties Constructor.
 </summary>
	<param name="user">The user being authenticated.</param>
	<param name="token">The user token</param>
	<param name="status">The login status.</param>
	<param name="type">The type of Authentication</param>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.Authenticated">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag that determines whether the User was authenticated
 </summary>
	<history>
 	[cnurse]	07/11/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.AuthenticationType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Authentication Type
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.AutoRegister">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag that determines whether the user should be automatically registered
 </summary>
	<history>
 	[cnurse]	07/16/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.LoginStatus">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Login Status
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.Message">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Message
 </summary>
	<history>
 	[cnurse]	07/11/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.Profile">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Profile
 </summary>
	<history>
 	[cnurse]	07/16/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.User">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the User
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.UserToken">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the UserToken (the userid or authenticated id)
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs">
 -----------------------------------------------------------------------------
 <summary>
 The UserAuthenticatedEventArgs class provides a custom EventArgs object for the
 UserAuthenticated event
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.LogOffHandler">
 -----------------------------------------------------------------------------
 <summary>
 The LogOffHandler class provides a replacement for the LogOff page
 </summary>
	<history>
 	[cnurse]	10/26/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationLogoffBase.AuthenticationType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Type of Authentication associated with this control
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationLogoffBase">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationLogoffBase class provides a base class for Authentiication 
 Logoff controls
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationConfigBase">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationConfigBase class provides base configuration class for the 
 Authentication providers
 </summary>
	<history>
 	[cnurse]	07/16/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationConfig">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationConfig class providesa configuration class for the DNN
 Authentication provider
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.AuthenticationType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Type of Authentication associated with this control
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.Enabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets whether the control is Enabled
 </summary>
	<remarks>This property must be overriden in the inherited class</remarks>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.IPAddress">
 -----------------------------------------------------------------------------
 <summary>
 Gets the IP address associated with the request
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.RedirectURL">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Type of Authentication associated with this control
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationLoginBase">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationLoginBase class provides a bas class for Authentiication 
 Login controls
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Services.Authentication.AuthenticationSettingsBase.AuthenticationType">
 -----------------------------------------------------------------------------
 <summary>
 Gets and Sets the Type of Authentication associated with this control
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationSettingsBase.UpdateSettings">
 -----------------------------------------------------------------------------
 <summary>
 UpdateSettings updates the settings in the Data Store
 </summary>
	<remarks>This method must be overriden in the inherited class</remarks>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationSettingsBase">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationSettingsBase class provides a base class for Authentiication 
 Settings controls
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.AddAuthentication(DotNetNuke.Services.Authentication.AuthenticationInfo)">
 -----------------------------------------------------------------------------
 <summary>
 AddAuthentication adds a new Authentication System to the Data Store.
 </summary>
	<param name="authSystem">The new Authentication System to add</param>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.AddUserAuthentication(System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 AddUserAuthentication adds a new UserAuthentication to the User.
 </summary>
	<param name="userID">The new Authentication System to add</param>
	<param name="authenticationType">The authentication type</param>
	<param name="authenticationToken">The authentication token</param>
	<history>
 	[cnurse]	07/12/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationService(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetAuthenticationService fetches a single Authentication Systems 
 </summary>
	<param name="authenticationID">The ID of the Authentication System</param>
	<returns>An AuthenticationInfo object</returns>
	<history>
 	[cnurse]	07/31/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationServiceByPackageID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetAuthenticationServiceByPackageID fetches a single Authentication System 
 </summary>
	<param name="packageID">The id of the Package</param>
	<returns>An AuthenticationInfo object</returns>
	<history>
 	[cnurse]	07/31/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationServiceByType(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetAuthenticationServiceByType fetches a single Authentication Systems 
 </summary>
	<param name="authenticationType">The type of the Authentication System</param>
	<returns>An AuthenticationInfo object</returns>
	<history>
 	[cnurse]	07/31/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationServices">
 -----------------------------------------------------------------------------
 <summary>
 GetAuthenticationServices fetches a list of all the Authentication Systems 
 installed in the system
 </summary>
	<returns>A List of AuthenticationInfo objects</returns>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationType">
 -----------------------------------------------------------------------------
 <summary>
 GetAuthenticationType fetches the authentication method used by the currently logged on user
 </summary>
	<returns>An AuthenticationInfo object</returns>
	<history>
 	[cnurse]	07/23/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetEnabledAuthenticationServices">
 -----------------------------------------------------------------------------
 <summary>
 GetEnabledAuthenticationServices fetches a list of all the Authentication Systems 
 installed in the system that have been enabled by the Host user
 </summary>
	<returns>A List of AuthenticationInfo objects</returns>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetLogoffRedirectURL(DotNetNuke.Entities.Portals.PortalSettings,System.Web.HttpRequest)">
 -----------------------------------------------------------------------------
 <summary>
 GetLogoffRedirectURL fetches the url to redirect too after logoff
 </summary>
	<param name="settings">A PortalSettings object</param>
	<param name="request">The current Request</param>
	<returns>The Url</returns>
	<history>
 	[cnurse]	08/15/2007  Created
     [cnurse]    02/28/2008  DNN-6881 Logoff redirect
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.SetAuthenticationType(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 SetAuthenticationType sets the authentication method used by the currently logged on user
 </summary>
	<param name="value">The Authentication type</param>
	<history>
 	[cnurse]	07/23/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Services.Authentication.AuthenticationController.UpdateAuthentication(DotNetNuke.Services.Authentication.AuthenticationInfo)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateAuthentication updates an existing Authentication System in the Data Store.
 </summary>
	<param name="authSystem">The new Authentication System to update</param>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Services.Authentication.AuthenticationController">
 -----------------------------------------------------------------------------
 <summary>
 The AuthenticationController class provides the Business Layer for the 
 Authentication Systems.
 </summary>
	<history>
 	[cnurse]	07/10/2007  Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.SecurityAccessLevel">
-----------------------------------------------------------------------------
 <summary>
 The SecurityAccessLevel enum is used to determine which level of access rights
 to assign to a specific module or module action. 
 </summary>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetModulePermissions(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModulePermissions gets a Dictionary of ModulePermissionCollections by 
 Module.
 </summary>
	<param name="tabID">The ID of the tab</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetModulePermissionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetModulePermissionsCallBack gets a Dictionary of ModulePermissionCollections by 
 Module from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetTabPermissions(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetTabPermissions gets a Dictionary of TabPermissionCollections by 
 Tab.
 </summary>
	<param name="portalID">The ID of the portal</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetTabPermissionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
 -----------------------------------------------------------------------------
 <summary>
 GetTabPermissionsCallBack gets a Dictionary of TabPermissionCollections by 
 Tab from the the Database.
 </summary>
	<param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
 needed for the database call</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveFolderPermissions(DotNetNuke.Services.FileSystem.FolderInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveFolderPermissions updates a Folder's permissions
 </summary>
	<param name="folder">The Folder to update</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.DeleteModulePermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteModulePermissionsByUser deletes a user's Module Permission in the Database
 </summary>
	<param name="objUser">The user</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetModulePermissions(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetModulePermissions gets a ModulePermissionCollection
 </summary>
	<param name="moduleID">The ID of the module</param>
	<param name="tabID">The ID of the tab</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.HasModulePermission(DotNetNuke.Security.Permissions.ModulePermissionCollection,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HasModulePermission checks whether the current user has a specific Module Permission
 </summary>
	<param name="objModulePermissions">The Permissions for the Module</param>
	<param name="permissionKey">The Permission to check</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveModulePermissions(DotNetNuke.Entities.Modules.ModuleInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveModulePermissions updates a Module's permissions
 </summary>
	<param name="objModule">The Module to update</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.DeleteTabPermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteTabPermissionsByUser deletes a user's Tab Permissions in the Database
 </summary>
	<param name="objUser">The user</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetTabPermissions(System.Int32,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetTabPermissions gets a TabPermissionCollection
 </summary>
	<param name="tabID">The ID of the tab</param>
	<param name="portalID">The ID of the portal</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.HasTabPermission(DotNetNuke.Security.Permissions.TabPermissionCollection,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 HasTabPermission checks whether the current user has a specific Tab Permission
 </summary>
	<param name="objTabPermissions">The Permissions for the Tab</param>
	<param name="permissionKey">The Permission to check</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveTabPermissions(DotNetNuke.Entities.Tabs.TabInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveTabPermissions saves a Tab's permissions
 </summary>
	<param name="objTab">The Tab to update</param>
	<history>
 	[cnurse]	04/15/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Permissions.CompareFolderPermissions">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Security.Permissions
 Class	 : CompareTabPermissions
 -----------------------------------------------------------------------------
 <summary>
 CompareTabPermissions provides the a custom IComparer implementation for 
 TabPermissionInfo objects
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="F:DotNetNuke.Framework.jQuery.DefaultHostedUrl">
	<summary>
 Returns the default URL for a hosted version of the jQuery script
 </summary>
	<remarks>
 Google hosts versions of many popular javascript libraries on their CDN.
 Using the hosted version increases the likelihood that the file is already
 cached in the users browser. 
 </remarks>
</member><member name="P:DotNetNuke.Framework.jQuery.IsInstalled">
	<summary>
 Checks whether the jQuery core script file exists locally.
 </summary>
	<remarks>
 This property checks for both the minified version and the full uncompressed version of jQuery.  
 These files should exist in the /Resources/Shared/Scripts/jquery directory.
 </remarks>
</member><member name="P:DotNetNuke.Framework.jQuery.UseDebugScript">
	<summary>
 Gets the HostSetting to determine if we should use the standard jQuery script or the minified jQuery script.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is a simple wrapper around the Host.jQueryDebug property</remarks>
</member><member name="P:DotNetNuke.Framework.jQuery.UseHostedScript">
	<summary>
 Gets the HostSetting to determine if we should use a hosted version of the jQuery script.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is a simple wrapper around the Host.jQueryHosted property</remarks>
</member><member name="P:DotNetNuke.Framework.jQuery.HostedUrl">
	<summary>
 Gets the HostSetting for the URL of the hosted version of the jQuery script.
 </summary>
	<value></value>
	<returns></returns>
	<remarks>This is a simple wrapper around the Host.jQueryUrl property</remarks>
</member><member name="P:DotNetNuke.Framework.jQuery.Version">
	<summary>
 Gets the version string for the local jQuery script
 </summary>
	<value></value>
	<returns></returns>
	<remarks>
 This only evaluates the version in the full jQuery file and assumes that the minified script
 is the same version as the full script.
 </remarks>
</member><member name="T:DotNetNuke.Entities.Tabs.TabCollection">
	<summary>
 Represents the collection of Tabs for a portal
 </summary>
	<remarks></remarks>
</member><member name="T:DotNetNuke.Entities.Tabs.TabMoveType">
-----------------------------------------------------------------------------
 Project		: DotNetNuke
 Class		: TabMoveType
-----------------------------------------------------------------------------
 <summary>
 Identifies common tab move types
 </summary>
	<remarks>
	</remarks>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.SkinControlInfo.SkinControlID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the SkinControl ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.SkinControlInfo.PackageID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the ID of the Package for this Desktop Module
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a SkinControlInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.SkinControlInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.GetSchema">
 -----------------------------------------------------------------------------
 <summary>
 Gets an XmlSchema for the SkinControlInfo
 </summary>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.ReadXml(System.Xml.XmlReader)">
 -----------------------------------------------------------------------------
 <summary>
 Reads a SkinControlInfo from an XmlReader
 </summary>
	<param name="reader">The XmlReader to use</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.WriteXml(System.Xml.XmlWriter)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a SkinControlInfo to an XmlWriter
 </summary>
	<param name="writer">The XmlWriter to use</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.SkinControlInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : SkinControlInfo
 -----------------------------------------------------------------------------
 <summary>
 SkinControlInfo provides the Entity Layer for Skin Controls (SkinObjects)
 </summary>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlController.DeleteSkinControl(DotNetNuke.Entities.Modules.SkinControlInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteSkinControl deletes a Skin Control in the database
 </summary>
	<param name="skinControl">The Skin Control to delete</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControl(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetSkinControl gets a single Skin Control from the database
 </summary>
	<param name="skinControlID">The ID of the SkinControl</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControlByPackageID(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetSkinControlByPackageID gets a single Skin Control from the database
 </summary>
	<param name="packageID">The ID of the Package</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControlByKey(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 GetSkinControlByKey gets a single Skin Control from the database
 </summary>
	<param name="key">The key of the Control</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControls">
 -----------------------------------------------------------------------------
 <summary>
 GetSkinControls gets all the Skin Controls from the database
 </summary>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.SkinControlController.SaveSkinControl(DotNetNuke.Entities.Modules.SkinControlInfo)">
 -----------------------------------------------------------------------------
 <summary>
 SaveSkinControl updates a Skin Control in the database
 </summary>
	<param name="skinControl">The Skin Control to save</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.SkinControlController">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : ModuleControlController
 -----------------------------------------------------------------------------
 <summary>
 ModuleControlController provides the Business Layer for Module Controls
 </summary>
	<history>
 	[cnurse]	01/14/2008   Documented
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ControlInfo.ControlKey">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Control Key
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ControlInfo.ControlSrc">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Control Source
 </summary>
	<returns>A String</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Modules.ControlInfo.SupportsPartialRendering">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a flag that determines whether the control support the AJAX
 Update Panel
 </summary>
	<returns>A Boolean</returns>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Modules.ControlInfo.FillInternal(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ControlInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Entities.Modules.ControlInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities.Modules
 Class	 : ControlInfo
 -----------------------------------------------------------------------------
 <summary>
 ControlInfo provides a base class for Module Controls and SkinControls
 </summary>
	<history>
 	[cnurse]	03/28/2008   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.Host.ServerInfo.Fill(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a ServerInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[cnurse]	03/25/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.Host.ServerInfo.KeyID">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Key ID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/25/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Modules.Dashboard.Components.Server.ServerInfo">
	<summary> 
 This class manages the Server Information for the site 
 </summary>
</member><member name="P:DotNetNuke.Entities.BaseEntityInfo.CreatedByUserID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the CreatedByUserID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.BaseEntityInfo.CreatedOnDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets the CreatedOnDate
 </summary>
	<returns>A DateTime</returns>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.BaseEntityInfo.LastModifiedByUserID">
 -----------------------------------------------------------------------------
 <summary>
 Gets the LastModifiedByUserID
 </summary>
	<returns>An Integer</returns>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.BaseEntityInfo.LastModifiedOnDate">
 -----------------------------------------------------------------------------
 <summary>
 Gets the LastModifiedOnDate
 </summary>
	<returns>A DateTime</returns>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.BaseEntityInfo.CreatedByUser(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the UserInfo object associated with this user
 </summary>
	<param name="PortalID">The PortalID associated with the desired user</param>
	<returns>A UserInfo object</returns>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Entities.BaseEntityInfo.LastModifiedByUser(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the UserInfo object associated with this user
 </summary>
	<param name="PortalID">The PortalID associated with the desired user</param>
	<returns>A UserInfo object</returns>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.BaseEntityInfo.FillInternal(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 Fills a BaseEntityInfo from a Data Reader
 </summary>
	<param name="dr">The Data Reader to use</param>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Entities.BaseEntityInfo.FillBaseProperties(System.Data.IDataReader)">
	<summary>
 method used by cbo to fill readonly properties ignored by HydrateObject reflection
 </summary>
	<param name="dr">the data reader to use</param>
	<remarks></remarks>
</member><member name="T:DotNetNuke.Entities.BaseEntityInfo">
 -----------------------------------------------------------------------------
 Project	 : DotNetNuke
 Namespace: DotNetNuke.Entities
 Class	 : BaseEntityInfo
 -----------------------------------------------------------------------------
 <summary>
 BaseEntityInfo provides auditing fields for Core tables.
 </summary>
	<history>
 	[jlucarino]	02/20/2009   Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.ComponentModel.SimpleContainer.#ctor">
	<summary>
 Initializes a new instance of the SimpleContainer class.
 </summary>
</member><member name="M:DotNetNuke.ComponentModel.SimpleContainer.#ctor(System.String)">
	<summary>
 Initializes a new instance of the SimpleContainer class.
 </summary>
	<param name="name"></param>
</member><member name="M:DotNetNuke.ComponentModel.InstanceComponentBuilder.#ctor(System.String,System.Object)">
	<summary>
 Initializes a new instance of the InstanceComponentBuilder class.
 </summary>
	<param name="name"></param>
	<param name="instance"></param>
</member><member name="M:DotNetNuke.ComponentModel.TransientComponentBuilder.#ctor(System.String,System.Type)">
	<summary>
 Initializes a new instance of the TransientComponentBuilder class.
 </summary>
	<param name="name">The name of the component</param>
	<param name="type">The type of the component</param>
</member><member name="M:DotNetNuke.ComponentModel.SingletonComponentBuilder.#ctor(System.String,System.Type)">
	<summary>
 Initializes a new instance of the SingletonComponentBuilder class.
 </summary>
	<param name="name">The name of the component</param>
	<param name="type">The type of the component</param>
</member><member name="M:DotNetNuke.ComponentModel.ComponentType.#ctor(System.Type)">
	<summary>
 Initializes a new instance of the ComponentType class.
 </summary>
	<param name="baseType">The base type of Components of this ComponentType</param>
</member><member name="T:DotNetNuke.Common.Utilities.CacheItemExpiredCallback">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Common.Utilities
 Class:      CacheItemExpiredCallback
 -----------------------------------------------------------------------------
 <summary>
 The CacheItemExpiredCallback delegate defines a callback method that notifies
 the application when a CacheItem is Expired (when an attempt is made to get the item)
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String)">
-----------------------------------------------------------------------------
 <summary>
 Constructs a new CacheItemArgs Object
 </summary>
	<param name="key"></param>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Int32)">
-----------------------------------------------------------------------------
 <summary>
 Constructs a new CacheItemArgs Object
 </summary>
	<param name="key"></param>
	<param name="timeout"></param>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Web.Caching.CacheItemPriority)">
-----------------------------------------------------------------------------
 <summary>
 Constructs a new CacheItemArgs Object
 </summary>
	<param name="key"></param>
	<param name="priority"></param>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Int32,System.Web.Caching.CacheItemPriority)">
-----------------------------------------------------------------------------
 <summary>
 Constructs a new CacheItemArgs Object
 </summary>
	<param name="key"></param>
	<param name="timeout"></param>
	<param name="priority"></param>
	<history>
     [cnurse]	07/15/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Int32,System.Web.Caching.CacheItemPriority,System.Object[])">
-----------------------------------------------------------------------------
 <summary>
 Constructs a new CacheItemArgs Object
 </summary>
	<param name="key"></param>
	<param name="timeout"></param>
	<param name="priority"></param>
	<history>
     [cnurse]	07/14/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheCallback">
-----------------------------------------------------------------------------
 <summary>
 Gets and sets the Cache Item's CacheItemRemovedCallback delegate
 </summary>
	<history>
     [cnurse]	01/13/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheDependency">
-----------------------------------------------------------------------------
 <summary>
 Gets and sets the Cache Item's CacheDependency
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheKey">
-----------------------------------------------------------------------------
 <summary>
 Gets the Cache Item's Key
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CachePriority">
-----------------------------------------------------------------------------
 <summary>
 Gets the Cache Item's priority (defaults to Default)
 </summary>
	<remarks>Note: DotNetNuke currently doesn't support the ASP.NET Cache's
 ItemPriority, but this is included for possible future use. </remarks>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheTimeOut">
-----------------------------------------------------------------------------
 <summary>
 Gets the Cache Item's Timeout
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.ParamList">
-----------------------------------------------------------------------------
 <summary>
 Gets the Cache Item's Parameter List
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.Params">
-----------------------------------------------------------------------------
 <summary>
 Gets the Cache Item's Parameter Array
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
-----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Common.Utilities.CacheItemArgs">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Common.Utilities
 Class:      CacheItemArgs
 -----------------------------------------------------------------------------
 <summary>
 The CacheItemArgs class provides an EventArgs implementation for the
 CacheItemExpiredCallback delegate
 </summary>
	<history>
     [cnurse]	01/12/2008	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Application.Application">
 -----------------------------------------------------------------------------
 Namespace:  DotNetNuke.Application
 Project:    DotNetNuke
 Module:     Application
 -----------------------------------------------------------------------------
 <summary>
 The Application class contains properties that describe the Application.
 </summary>
	<remarks>
	</remarks>
	<history>
		[cnurse]	09/10/2009  created
 </history>
 -----------------------------------------------------------------------------

</member>
</members>
</doc>