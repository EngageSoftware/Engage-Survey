<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowMultipleLabel.Help" xml:space="preserve">
    <value>Specify whether you want to allow the same person to submit a survey more than once.</value>
  </data>
  <data name="AllowMultipleLabel.Text" xml:space="preserve">
    <value>Allow more than one survey submission</value>
  </data>
  <data name="ShowRequiredNotationLabel.Text" xml:space="preserve">
    <value>Show Required Notation (*)</value>
  </data>
  <data name="ShowRequiredNotationLabel.Help" xml:space="preserve">
    <value>Choose whether to display asterisks (*) by required questions</value>
  </data>
  <data name="ChooseDisplayType.Help" xml:space="preserve">
    <value>Select the view for this instance of the module.</value>
  </data>
  <data name="ChooseDisplayTypeLabel.Text" xml:space="preserve">
    <value>Select a Display Type</value>
  </data>
  <data name="RegistrationidLabel.Help" xml:space="preserve">
    <value>Enter the Registration Id to associate the survey.</value>
  </data>
  <data name="RegistrationidLabel.Text" xml:space="preserve">
    <value>Enter a RegistrationId</value>
  </data>
  <data name="SurveyTypeIdLabel.Help" xml:space="preserve">
    <value>Select a Survey for the survey to display</value>
  </data>
  <data name="SurveyTypeIdLabel.Text" xml:space="preserve">
    <value>Select a Survey</value>
  </data>
  <data name="Survey Settings.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SurveyListing.Text" xml:space="preserve">
    <value>Survey Listing</value>
  </data>
  <data name="ViewSurvey.Text" xml:space="preserve">
    <value>View Survey</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Survey Settings</value>
  </data>
  <data name="ThankYou.Text" xml:space="preserve">
    <value>Thank You</value>
  </data>
  <data name="ChooseDisplayTypeLabel.Help" xml:space="preserve">
    <value>Choose this module's function.  Each module can display a list of the available surveys (the default), it can display a specific survey, or it can display the "Thank You" message for when the user is finished taking a survey.</value>
  </data>
  <data name="Email Settings.Text" xml:space="preserve">
    <value>Email Settings</value>
  </data>
  <data name="NotificationFromEmailLabel.Help" xml:space="preserve">
    <value>The email address from which notification emails should be sent</value>
  </data>
  <data name="NotificationFromEmailLabel.Text" xml:space="preserve">
    <value>Notification "From" Email</value>
  </data>
  <data name="NotificationToEmailsLabel.Help" xml:space="preserve">
    <value>The email addresses to which notification emails should be sent (separate multiple email addresses with commas)</value>
  </data>
  <data name="NotificationToEmailsLabel.Text" xml:space="preserve">
    <value>Notification "To" Emails</value>
  </data>
  <data name="SendNotificationLabel.Help" xml:space="preserve">
    <value>If checked, a survey created through this module will default to sending an email to the email address(es) below whenever someone completes it.</value>
  </data>
  <data name="SendNotificationLabel.Text" xml:space="preserve">
    <value>Send Notification Email</value>
  </data>
  <data name="SendThankYouLabel.Help" xml:space="preserve">
    <value>If checked, a survey created through this module will default to sending an email to everyone who completes it (when they are logged in and have a valid email address in their profile).</value>
  </data>
  <data name="SendThankYouLabel.Text" xml:space="preserve">
    <value>Send Thank You Email</value>
  </data>
  <data name="ThankYouFromEmailLabel.Help" xml:space="preserve">
    <value>The email address from which thank you emails should be sent</value>
  </data>
  <data name="ThankYouFromEmailLabel.Text" xml:space="preserve">
    <value>Thank You "From" Email</value>
  </data>
  <data name="View Survey Settings.Text" xml:space="preserve">
    <value>View Survey Settings</value>
  </data>
  <data name="NotificationFromEmailError.Text" xml:space="preserve">
    <value>Notification "From" Email is not a valid email address</value>
  </data>
  <data name="NotificationToEmailsError.Text" xml:space="preserve">
    <value>Notification "To" Emails is not a valid list of email addresses (comma-separated)</value>
  </data>
  <data name="ThankYouFromEmailError.Text" xml:space="preserve">
    <value>Thank You "From" Email is not a valid email address</value>
  </data>
</root>